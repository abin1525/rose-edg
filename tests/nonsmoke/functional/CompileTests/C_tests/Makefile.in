# Makefile.in generated by automake 1.15 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@

# DQ (1/5/2014): Some failing test codes:
#     test2014_03.c  (demonstrates nested functions (not supported in EDG))
#     test2014_10.c  (demonstrates enum type declaration at top of switch body (before first case); bug in ROSE switch implementation)
#     test2014_11.c  (simpler case of test2014_10.c)
#     test2014_45.c  (inconsitant function declarations, but consistant through typedefs)
#     test2014_54.c  (old-stype C function parameters in wrong order, appears to be legal C but a problem for ROSE)
#     test2014_59.c  (complex macro handling where variables are named using the __LINE__ macro)
#     test2014_61.c  (example of assigned goto (gnu extension))
#     test2014_71.c  (macro namespace intrudes into application namespace (macro suppression using "()")
#     test2014_73.c  (example of anonymous union in an initializer)
#     test2014_74.c  (another example similar to test2014_73.c)
#     test2014_75.c  (incomplete code from application example, will not compile with gcc).
#     test2014_90.c  (asm command that is incomplete -- the version built using CPP is in test2014_91.c).

# DQ (9/9/2013): This is a problem for the new block support.
#     test2012_23.c 
#     test2012_25.c 
#     test2012_36.c 
#     test2012_42.c
#     test2012_101.c
#     test2012_102.c
#     test2012_103.c 
#     test2012_104.c 
#     test2012_105.c 
#     test2012_116.c 
#     test2012_118.c 
#     test2012_119.c 

# DQ (5/23/2013): This is a failing case (reported by Sara). Case of "void foo(int N,int a[N]){}"
# test2013_04.c 

# DQ (9/2/2013): This is now fixed.
# DQ (6/19/2013): Failing case of include used to initialize array (still working on this case).
# test2013_05.c 

# DQ (9/28/2012): Failing tests.
# test2012_04.c (infinite recursion!) (DQ: 11/21/2012: NOW FIXED)
# test2012_30.c (break statement not unparsed in loop)
# test2012_42.c (more complex (original) case of test2012_43.c)
# test2012_43.c (macro for compile-time assertions)
# test2012_44.c (asm issue stat64 undefined after compilation)
# test2012_45.c (same problems at test2012_44.c)
# test2012_59.c (C-style comment in quoted string (inside of #if-def comment, so should be ignored)
# test2012_78.c (variable with initializer using #include file to provide value (classic source-to-source issue))
# test2012_79.c (test code demonstrating an outstanding error (generated before focusing on switch support))
# test2012_80.c (same as test2012_79.c)
# test2012_101.c (example of failing test from zsh : jobs.c file: NOW FIXED)
# test2012_102.c (example of failing test from zsh : module.c file)
# test2012_103.c (example of failing test from zsh : params.c file)
# test2012_107.c (fails to unparse "..." in function type: NOW FIXED)
# test2012_128.c (label attached to case option statement is a current bug, but not yet found in application code)
# test2012_132.c (this has a overly complex duff's device like switch statement that I have rewritten to put the
#                 default case at the same scope as the other case option statements. Adding this level of support
#                 to the switch statment support in ROSE is deferred to later. test2012_137.c is a required test
#                 code to pass; so that we can test the rewritten version of the switch.
# test2012_145.c NOT A FAILING test, but tested below with -D options.
# test2012_155.c (array with initializer using #include file to provide value (classic source-to-source issue))
# test2012_160.c (application code with label on default case option statement: full size)
# test2012_161.c (small test code demonstrating bug in test2012_160.c)

# Failing tests of interest relative to C application codes:
# test2012_128
# test2012_31
# test2012_132
# test2012_138
# test2012_159

# This is a C99 test code (moved to the C99_tests directory). (These are not really C99 codes, I thought they were).
# test2012_20.c 
# test2012_23.c
# test2012_25.c
# test2012_58.c 
# test2012_100.c 
# test2012_104.c
# test2012_105.c 
# test2012_106.c 
@ROSE_USE_CLANG_FRONTEND_TRUE@am__append_1 = \
@ROSE_USE_CLANG_FRONTEND_TRUE@     stdio.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2006_48.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2006_132.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2010_04.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2006_14.c  \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2006_100.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2006_136.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2010_02.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2010_03.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2011_03.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     test2011_04.c \
@ROSE_USE_CLANG_FRONTEND_TRUE@     Yarden_client.c

# Failling tests for CLANG only:
#  -  test2004_21.c
#  -  test2005_168.c
#  -  test2006_65.c
#  -  test2010_11.c
#  -  test2010_14.c
# Failling tests for CLANG but also in TESTCODE_CURRENTLY_FAILING
#  -  test2004_126.c
#  -  test2006_134.c
#  -  test2009_06.c
#  -  test2010_05.c     -> Unknown statement kind: CompoundLiteralExpr
#  -  test2010_16.c     -> Unknown statement kind: CompoundLiteralExpr
@ROSE_USE_CLANG_FRONTEND_FALSE@am__append_2 = \
@ROSE_USE_CLANG_FRONTEND_FALSE@     test2004_21.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@     test2006_65.c

@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@am__append_3 = \
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@     stdio.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@     test2006_48.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@     test2006_132.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@     test2010_04.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@     test2010_11.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_EDG_VERSION_4_4_FALSE@@ROSE_USE_EDG_VERSION_4_7_FALSE@     test2010_14.c


# DQ (1/16/2017): This file name is already mentioned previously (need not be repeated).
# test2010_12.c 

# DQ (12/3/2016): Moved test2012_09.c to not be tested withon Mac OSX OS.
# Note that these might just be an issue specific to Clang version 3.8
# or we don't have the correct emulation of the clang compiler since on Mac
# we are detecting clang as GNU 4.2, where as on Linux we can correctly 
# detect it as clang 3.8 (with some trouble).
# Also, the only file previously in the list below was test2009_19.c.
# DQ (9/26/2009): Conditionally compile this file (fails in OSX due to lack of OSX
# support for thread local storage). Liao know more about the details of this test.
# test2009_19.c
@OS_MACOSX_FALSE@am__append_4 = \
@OS_MACOSX_FALSE@      test2009_19.c \
@OS_MACOSX_FALSE@      test2012_10.c \
@OS_MACOSX_FALSE@      test2012_12.c \
@OS_MACOSX_FALSE@      test2012_64.c \
@OS_MACOSX_FALSE@      test2012_72.c \
@OS_MACOSX_FALSE@      test2012_73.c \
@OS_MACOSX_FALSE@      test2012_74.c \
@OS_MACOSX_FALSE@      test2012_151.c \
@OS_MACOSX_FALSE@      test2012_152.c \
@OS_MACOSX_FALSE@      test2013_21.c \
@OS_MACOSX_FALSE@      test2013_32.c \
@OS_MACOSX_FALSE@      test2013_104.c \
@OS_MACOSX_FALSE@      test2013_113.c \
@OS_MACOSX_FALSE@      test2014_12.c \
@OS_MACOSX_FALSE@      test2014_13.c \
@OS_MACOSX_FALSE@      test2015_34.c \
@OS_MACOSX_FALSE@      test2012_09.c

@ROSE_USE_CLANG_FRONTEND_FALSE@am__append_5 = \
@ROSE_USE_CLANG_FRONTEND_FALSE@     test2009_05.c \
@ROSE_USE_CLANG_FRONTEND_FALSE@     test2009_17.c

# ROSE_FLAGS = -rose:C89 -rose:unparse_tokens
@ROSE_USE_CLANG_FRONTEND_FALSE@am__append_6 = --edg:no_warnings --edg:restrict
check_PROGRAMS = $(am__EXEEXT_4)
subdir = tests/nonsmoke/functional/CompileTests/C_tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-frontend-x10.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-git-versioning.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
@ROSE_USE_CLANG_FRONTEND_FALSE@am__EXEEXT_1 =  \
@ROSE_USE_CLANG_FRONTEND_FALSE@	test2009_05.out$(EXEEXT) \
@ROSE_USE_CLANG_FRONTEND_FALSE@	test2009_17.out$(EXEEXT)
am__EXEEXT_2 = $(am__EXEEXT_1)
am__EXEEXT_3 = $(am__EXEEXT_2)
am__EXEEXT_4 = $(am__EXEEXT_3)
test2009_05_out_SOURCES = test2009_05.c
test2009_05_out_OBJECTS = test2009_05.$(OBJEXT)
test2009_05_out_LDADD = $(LDADD)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
test2009_17_out_SOURCES = test2009_17.c
test2009_17_out_OBJECTS = test2009_17.$(OBJEXT)
test2009_17_out_LDADD = $(LDADD)
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp =
am__depfiles_maybe =
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = test2009_05.c test2009_17.c
DIST_SOURCES = test2009_05.c test2009_17.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS = @EXEEXT@ .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:@EXEEXT@.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/mkinstalldirs \
	$(top_srcdir)/config/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ABS_COMPASS2_XML_SRCDIR = @ABS_COMPASS2_XML_SRCDIR@
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
ATERM_BIN_PATH = @ATERM_BIN_PATH@
ATERM_INSTALL_PATH = @ATERM_INSTALL_PATH@
ATERM_LIBRARY_PATH = @ATERM_LIBRARY_PATH@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKEND_CXX_COMPILER = @BACKEND_CXX_COMPILER@
BACKEND_CXX_VENDOR_AND_VERSION2 = @BACKEND_CXX_VENDOR_AND_VERSION2@
BACKEND_CXX_VENDOR_AND_VERSION3 = @BACKEND_CXX_VENDOR_AND_VERSION3@
BACKEND_C_COMPILER = @BACKEND_C_COMPILER@
BACKEND_FORTRAN_COMPILER = @BACKEND_FORTRAN_COMPILER@
BACKEND_JAVA_COMPILER = @BACKEND_JAVA_COMPILER@
BACKEND_X10_COMPILER = @BACKEND_X10_COMPILER@
BACKSTROKE_ROSS_INCLUDE = @BACKSTROKE_ROSS_INCLUDE@
BACKSTROKE_SPEEDES_INCLUDE = @BACKSTROKE_SPEEDES_INCLUDE@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_IOSTREAMS_LIB = @BOOST_IOSTREAMS_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SERIALIZATION_LIB = @BOOST_SERIALIZATION_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CANDL_PATH = @CANDL_PATH@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CFLAGS32 = @CFLAGS32@
CLANG_CXXFLAGS = @CLANG_CXXFLAGS@
CLANG_LDFLAGS = @CLANG_LDFLAGS@
CLANG_LIBDIR = @CLANG_LIBDIR@
CLASSPATH = @CLASSPATH@
CLOOG_PATH = @CLOOG_PATH@
CPP = @CPP@

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES 
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = @CUDA_BIN_DIR@
CUDA_INC_DIR = @CUDA_INC_DIR@
CUDA_LIB_DIR = @CUDA_LIB_DIR@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLIB_PREFIX = @DLIB_PREFIX@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DOXYINDEXER = @DOXYINDEXER@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FC = @FC@
FCFLAGS = @FCFLAGS@
FFLAGS = @FFLAGS@
FGREP = @FGREP@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
FRONTEND_CXX_VENDOR_AND_VERSION2 = @FRONTEND_CXX_VENDOR_AND_VERSION2@
FRONTEND_CXX_VENDOR_AND_VERSION3 = @FRONTEND_CXX_VENDOR_AND_VERSION3@
GCC_MINOR_VERSION = @GCC_MINOR_VERSION@
GCC_VERSION = @GCC_VERSION@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_CFLAGS = @GLUT_CFLAGS@
GLUT_LIBS = ${glut_path}
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GMP_INCLUDE_PATH = @GMP_INCLUDE_PATH@
GMP_INSTALL_PATH = @GMP_INSTALL_PATH@
GMP_LIBRARY_PATH = @GMP_LIBRARY_PATH@
GREP = @GREP@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAVE_CXX11 = @HAVE_CXX11@
HAVE_CXX14 = @HAVE_CXX14@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLTDL = @INCLTDL@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
ISL_INCLUDE_PATH = @ISL_INCLUDE_PATH@
ISL_INSTALL_PATH = @ISL_INSTALL_PATH@
ISL_LIBRARY_PATH = @ISL_LIBRARY_PATH@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_JVM_PATH = @JAVA_JVM_PATH@
JAVA_PATH = @JAVA_PATH@
LD = @LD@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBADD_DLD_LINK = @LIBADD_DLD_LINK@
LIBADD_DLOPEN = @LIBADD_DLOPEN@
LIBADD_SHL_LOAD = @LIBADD_SHL_LOAD@
LIBDWARF_CPPFLAGS = @LIBDWARF_CPPFLAGS@
LIBDWARF_LDFLAGS = @LIBDWARF_LDFLAGS@
LIBDWARF_PREFIX = @LIBDWARF_PREFIX@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBREADLINE_INCLUDE_PATH = @LIBREADLINE_INCLUDE_PATH@
LIBREADLINE_INSTALL_PATH = @LIBREADLINE_INSTALL_PATH@
LIBREADLINE_LIBRARY_PATH = @LIBREADLINE_LIBRARY_PATH@
LIBREADLINE_LIBS = @LIBREADLINE_LIBS@
LIBS = @LIBS@
LIBS_WITH_RPATH = @LIBS_WITH_RPATH@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LLVM_CONFIG = @LLVM_CONFIG@
LN_S = @LN_S@
LTDLDEPS = @LTDLDEPS@
LTDLINCL = @LTDLINCL@
LTDLOPEN = @LTDLOPEN@
LTLIBOBJS = @LTLIBOBJS@
LT_ARGZ_H = @LT_ARGZ_H@
LT_CONFIG_H = @LT_CONFIG_H@
LT_DLLOADERS = @LT_DLLOADERS@
LT_DLPREOPEN = @LT_DLPREOPEN@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBDIR = @MAPLE_LIBDIR@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MINT = @MINT@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MPICC = @MPICC@
MPICXX = @MPICXX@
MPIF77 = @MPIF77@
MPIFC = @MPIFC@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
NM = @NM@
NMEDIT = @NMEDIT@
NVCCBIN = @NVCCBIN@
OBJ = @OBJ@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENCL_INC_DIR = @OPENCL_INC_DIR@
OPENCL_LIB_DIR = @OPENCL_LIB_DIR@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OPTIONAL_PROJECTS = @OPTIONAL_PROJECTS@
OS_major_release_number = @OS_major_release_number@
OS_minor_release_number = @OS_minor_release_number@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
POET_INCL = @POET_INCL@
POET_LIB = @POET_LIB@
PPL_PATH = @PPL_PATH@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
PYTHON = @PYTHON@
PYTHON_CPPFLAGS = @PYTHON_CPPFLAGS@
PYTHON_EXTRA_LDFLAGS = @PYTHON_EXTRA_LDFLAGS@
PYTHON_EXTRA_LIBS = @PYTHON_EXTRA_LIBS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@
PYTHON_SITE_PKG = @PYTHON_SITE_PKG@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HOME = @ROSE_HOME@
ROSE_LIBMAGIC_PREFIX = @ROSE_LIBMAGIC_PREFIX@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_JAR_FILE = @ROSE_OFP_JAR_FILE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_OFP_VERSION_NUMBER = @ROSE_OFP_VERSION_NUMBER@
ROSE_PS2PDF_PATH = @ROSE_PS2PDF_PATH@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_CANDL = @ROSE_USE_CANDL@
ROSE_USE_CLOOG = @ROSE_USE_CLOOG@
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = @ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_SCOPLIB = @ROSE_USE_SCOPLIB@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_MPI_CFLAGS = @ROSE_WITH_MPI_CFLAGS@
ROSE_WITH_MPI_CLDFLAGS = @ROSE_WITH_MPI_CLDFLAGS@
ROSE_WITH_MPI_CXXFLAGS = @ROSE_WITH_MPI_CXXFLAGS@
ROSE_WITH_MPI_CXXLDFLAGS = @ROSE_WITH_MPI_CXXLDFLAGS@
ROSE_WITH_MPI_F77FLAGS = @ROSE_WITH_MPI_F77FLAGS@
ROSE_WITH_MPI_F77LDFLAGS = @ROSE_WITH_MPI_F77LDFLAGS@
ROSE_WITH_MPI_FFLAGS = @ROSE_WITH_MPI_FFLAGS@
ROSE_WITH_MPI_FLDFLAGS = @ROSE_WITH_MPI_FLDFLAGS@
ROSE_YAML_PREFIX = @ROSE_YAML_PREFIX@
ROSE_YICES = @ROSE_YICES@
ROSE_YICES_PREFIX = @ROSE_YICES_PREFIX@
RT_LIBS = @RT_LIBS@
SCOPLIB_PATH = @SCOPLIB_PATH@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRATEGO_BIN_PATH = @STRATEGO_BIN_PATH@
STRATEGO_INSTALL_PATH = @STRATEGO_INSTALL_PATH@
STRATEGO_LIBRARY_PATH = @STRATEGO_LIBRARY_PATH@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
UPC = @UPC@
UPCDEPMODE = @UPCDEPMODE@
UPCFLAGS = @UPCFLAGS@
USING_WINDOWS = @USING_WINDOWS@
VALGRIND_BINARY = @VALGRIND_BINARY@
VALGRIND_BIN_PATH = @VALGRIND_BIN_PATH@
VALGRIND_INCLUDE_PATH = @VALGRIND_INCLUDE_PATH@
VALGRIND_INSTALL_PATH = @VALGRIND_INSTALL_PATH@
VALGRIND_LIBRARY_PATH = @VALGRIND_LIBRARY_PATH@
VECTORIZATION = @VECTORIZATION@
VERSION = @VERSION@
WT_PREFIX = @WT_PREFIX@
X10_BIN_PATH = @X10_BIN_PATH@
X10_INSTALL_PATH = @X10_INSTALL_PATH@
X10_LIBRARY_PATH = @X10_LIBRARY_PATH@
X10_VERSION = @X10_VERSION@
XERCES_CPPFLAGS = @XERCES_CPPFLAGS@
XERCES_LDFLAGS = @XERCES_LDFLAGS@
XERCES_LIBS = @XERCES_LIBS@
XERCES_VERSION = @XERCES_VERSION@
XMKMF = @XMKMF@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
YACC = @YACC@
YFLAGS = @YFLAGS@
Z3BIN = @Z3BIN@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
ac_ct_F77 = @ac_ct_F77@
ac_ct_FC = @ac_ct_FC@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_UPC = @ac_ct_UPC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
backstroke_ross_path = @backstroke_ross_path@
backstroke_speedes_path = @backstroke_speedes_path@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
builddir = @builddir@
configure_date = @configure_date@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localedir = @localedir@
localstatedir = @localstatedir@
ltdl_LIBOBJS = @ltdl_LIBOBJS@
ltdl_LTLIBOBJS = @ltdl_LTLIBOBJS@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
pdfdir = @pdfdir@
php_path = @php_path@
poet_dir = @poet_dir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
res_top_src = @res_top_src@
rted_path = @rted_path@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
subdirs = @subdirs@
sys_symbol_underscore = @sys_symbol_underscore@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_pwd = @top_pwd@
top_srcdir = @top_srcdir@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@ROSE_YICES_PREFIX@/include
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @ROSE_YICES_PREFIX@/lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_INCLUDES = -I@ROSE_YAML_PREFIX@/include
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS = -lyaml-cpp
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS_WITH_PATH = -L@ROSE_YAML_PREFIX@/lib -lyaml-cpp

# GNU readline
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_INCLUDES = -I@LIBREADLINE_INCLUDE_PATH@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS = @LIBREADLINE_LIBS@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS_WITH_PATH = -L@LIBREADLINE_LIBRARY_PATH@ $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_INCLUDES = -I@ROSE_LIBMAGIC_PREFIX@/include
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS = -lmagic
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS_WITH_PATH = -L@ROSE_LIBMAGIC_PREFIX@/lib -lmagic

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_INCLUDES = -I@DLIB_PREFIX@
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS = 
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`

# ROSE-DWARF libdwarf support
@ROSE_HAVE_LIBDWARF_TRUE@ROSE_DWARF_INCLUDES = $(LIBDWARF_CPPFLAGS)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(LIBDWARF_PREFIX/lib) -L$(LIBDWARF_PREFIX/lib) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(LIBDWARF_PREFIX)/lib/libdwarf.a -lelf
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @LIBDWARF_LDFLAGS@

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

#   libroseExperimentalOpenFortranParserlibraries = frontend/Experimental_OpenFortranParser_ROSE_Connection/aterm_traversal/libexperimentalRoseFortran.la

# DQ (9/26/2015): This is defined in src/Makefile.am
#   libroseExperimentalOpenFortranParserlibraries =
#   ROSE_EXPERIMENTAL_OFP_INCLUDE = -I$(_PREFIX)/include
#   ROSE_EXPERIMENTAL_OFP_LIBS    = -L$(top_builddir)/src/frontend/Experimental_OpenFortranParser_ROSE_Connection/aterm_traversal -lexperimentalRoseFortran

# DQ (1/26/2017): This is not built in the new way that Craig and I are working together on the new OFP.
@ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE@ROSE_EXPERIMENTAL_OFP_LIBS = -L$(top_builddir)/src/3rdPartyLibraries/experimental-fortran-parser/aterm_traversal -lexperimentalOFP
#   ROSE_EXPERIMENTAL_OFP_LIBS    = 

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -lm
# ROSE_INCLUDES = 
#     $(ROSE_BOOST_PREINCLUDE_PATH) 
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PHPFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_FRONTEND_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PythonFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractHandle \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractMemoryObject \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractLayer \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astRewriteMechanism \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/annotation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SIDEEFFECTS_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_GUI_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_QT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@			$(ROSE_SIDEEFFECT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/libltdl \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PHP_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PYTHON_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YICES_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YAML_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_READLINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_LIBMAGIC_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DLIB_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DWARF_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_WINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(VALGRIND_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(SQLITE3_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PCH_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(INTEL_PIN_INCLUDE_PATHS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ETHER_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES = 
#    $(ROSE_BOOST_PREINCLUDE_PATH) 
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/binaryAnalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to 
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend 
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang 
#    $(ROSE_CLANG_FRONTEND_INCLUDE) 
#    $(ROSE_CLANG_INCLUDE) 
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH) 

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS) $(ROSE_BOOST_LIBS) \
  $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) $(ROSE_EXPERIMENTAL_OFP_LIBS) \
  $(ROSE_YAML_LIBS_WITH_PATH) $(ROSE_LIBMAGIC_LIBS_WITH_PATH) $(ROSE_READLINE_LIBS_WITH_PATH) \
  $(ROSE_DLIB_LIBS_WITH_PATH)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl

##################################################################################
# These are C testcodes targeting aspects of C that might not be a subset of C++ #
##################################################################################
OLD_TESTCODES_REQUIRED_TO_PASS = \
     test_CplusplusMacro_C.c \
     gconv_info.c \
     stdio.c \
     testCvsCpp.c \
     testAnsiC.c \
     YardenPragmaPackExample.c \
     commentTest.c \
     test2003_12.c \
     test2004_20.c \
     test2004_21.c \
     test2005_172.c \
     test2005_186.c \
     test2006_48.c  \
     test2006_110.c \
     test2006_114.c \
     test2006_132.c \
     test2006_133.c \
     test2006_135.c \
     test2008_01.c \
     test2008_02.c \
     test2009_01.c \
     test2009_02.c \
     test2009_03.c \
     test2009_04.c \
     test2009_07.c \
     test2009_08.c \
     test2009_16.c \
     test2009_21.c \
     test2009_22.c \
     test2010_01.c \
     test2010_04.c \
     test2010_06.c \
     test2010_07.c \
     test2010_08.c \
     test2010_09.c \
     test2010_10.c \
     test2010_12.c \
     test2010_13.c \
     test2010_15.c \
     test2010_17.c \
     test2011_05.c \
     test2007_177.c \
     test2006_65.c \
     test2010_11.c \
     test2010_14.c \
     math.c \
     complex_01.c \
     constants.c


# This is listed seperately below with the required path to find the "sla.h" header file.
# test2005_168.c 
TESTCODES_REQUIRED_TO_PASS = test_CplusplusMacro_C.c gconv_info.c \
	testCvsCpp.c testAnsiC.c YardenPragmaPackExample.c \
	commentTest.c test_multiline_string_01.c test2003_12.c \
	test2004_20.c test2005_172.c test2005_186.c test2006_110.c \
	test2006_114.c test2006_133.c test2006_135.c test2007_177.c \
	test2008_01.c test2008_02.c test2009_01.c test2009_02.c \
	test2009_03.c test2009_04.c test2009_07.c test2009_08.c \
	test2009_16.c test2009_21.c test2009_22.c test2010_01.c \
	test2010_06.c test2010_07.c test2010_08.c test2010_09.c \
	test2010_13.c test2010_15.c test2010_17.c test2011_05.c \
	test2012_01.c test2012_02.c test2012_03.c test2012_04.c \
	test2012_05.c test2012_06.c test2012_07.c test2012_08.c \
	test2012_11.c test2012_13.c test2012_15.c test2012_16.c \
	test2012_17.c test2012_18.c test2012_19.c test2012_20.c \
	test2012_21.c test2012_22.c test2012_23.c test2012_24.c \
	test2012_26.c test2012_27.c test2012_28.c test2012_29.c \
	test2012_30.c test2012_32.c test2012_33.c test2012_34.c \
	test2012_35.c test2012_36.c test2012_37.c test2012_38.c \
	test2012_39.c test2012_40.c test2012_42.c test2012_41.c \
	test2012_43.c test2012_46.c test2012_47.c test2012_49.c \
	test2012_50.c test2012_53.c test2012_55.c test2012_57.c \
	test2012_58.c test2012_59.c test2012_60.c test2012_61.c \
	test2012_62.c test2012_63.c test2012_65.c test2012_66.c \
	test2012_67.c test2012_68.c test2012_69.c test2012_70.c \
	test2012_71.c test2012_75.c test2012_76.c test2012_77.c \
	test2012_79.c test2012_80.c test2012_81.c test2012_82.c \
	test2012_83.c test2012_84.c test2012_85.c test2012_86.c \
	test2012_87.c test2012_88.c test2012_89.c test2012_90.c \
	test2012_91.c test2012_92.c test2012_93.c test2012_94.c \
	test2012_95.c test2012_96.c test2012_97.c test2012_98.c \
	test2012_99.c test2012_100.c test2012_102.c test2012_103.c \
	test2012_104.c test2012_105.c test2012_107.c test2012_108.c \
	test2012_115.c test2012_116.c test2012_117.c test2012_118.c \
	test2012_119.c test2012_120.c test2012_121.c test2012_122.c \
	test2012_123.c test2012_124.c test2012_125.c test2012_126.c \
	test2012_127.c test2012_130.c test2012_131.c test2012_133.c \
	test2012_134.c test2012_135.c test2012_136.c test2012_137.c \
	test2012_139.c test2012_140.c test2012_141.c test2012_142.c \
	test2012_143.c test2012_144.c test2012_146.c test2012_147.c \
	test2012_148.c test2012_149.c test2012_150.c test2012_153.c \
	test2012_154.c test2012_156.c test2012_157.c test2012_158.c \
	test2012_159.c test2012_163.c test2012_164.c test2012_165.c \
	test2012_166.c test2012_167.c test2012_168.c test2012_169.c \
	test2012_170.c test2012_171.c test2012_172.c test2012_174.c \
	test2012_175.c test2013_01.c test2013_02.c test2013_03.c \
	test2013_05.c test2013_06.c test2013_07.c test2013_08.c \
	test2013_09.c test2013_10.c test2013_11.c test2013_12.c \
	test2013_13.c test2013_14.c test2013_15.c test2013_16.c \
	test2013_17.c test2013_18.c test2013_19.c test2013_20.c \
	test2013_22.c test2013_23.c test2013_24.c test2013_25.c \
	test2013_26.c test2013_27.c test2013_28.c test2013_29.c \
	test2013_30.c test2013_31.c test2013_33.c test2013_34.c \
	test2013_35.c test2013_36.c test2013_37.c test2013_38.c \
	test2013_39.c test2013_40.c test2013_41.c test2013_42.c \
	test2013_43.c test2013_44.c test2013_45.c test2013_46.c \
	test2013_47.c test2013_48.c test2013_49.c test2013_50.c \
	test2013_51.c test2013_52.c test2013_53.c test2013_54.c \
	test2013_55.c test2013_56.c test2013_57.c test2013_58.c \
	test2013_59.c test2013_60.c test2013_61.c test2013_62.c \
	test2013_63.c test2013_64.c test2013_65.c test2013_66.c \
	test2013_67.c test2013_68.c test2013_69.c test2013_70.c \
	test2013_71.c test2013_72.c test2013_73.c test2013_74.c \
	test2013_75.c test2013_76.c test2013_77.c test2013_78.c \
	test2013_79.c test2013_80.c test2013_81.c test2013_82.c \
	test2013_83.c test2013_84.c test2013_85.c test2013_86.c \
	test2013_87.c test2013_88.c test2013_89.c test2013_90.c \
	test2013_91.c test2013_92.c test2013_93.c test2013_94.c \
	test2013_95.c test2013_96.c test2013_97.c test2013_98.c \
	test2013_99.c test2013_100.c test2013_101.c test2013_102.c \
	test2013_103.c test2013_105.c test2013_106.c test2013_107.c \
	test2013_108.c test2013_109.c test2013_110.c test2013_111.c \
	test2013_112.c test2014_01.c test2014_02.c test2014_04.c \
	test2014_05.c test2014_06.c test2014_07.c test2014_08.c \
	test2014_09.c test2014_14.c test2014_15.c test2014_16.c \
	test2014_17.c test2014_18.c test2014_19.c test2014_20.c \
	test2014_21.c test2014_22.c test2014_23.c test2014_24.c \
	test2014_25.c test2014_26.c test2014_27.c test2014_28.c \
	test2014_29.c test2014_30.c test2014_31.c test2014_32.c \
	test2014_33.c test2014_34.c test2014_35.c test2014_36.c \
	test2014_37.c test2014_38.c test2014_39.c test2014_40.c \
	test2014_41.c test2014_42.c test2014_43.c test2014_44.c \
	test2014_46.c test2014_47.c test2014_48.c test2014_49.c \
	test2014_50.c test2014_51.c test2014_52.c test2014_53.c \
	test2014_55.c test2014_56.c test2014_57.c test2014_58.c \
	test2014_60.c test2014_62.c test2014_63.c test2014_64.c \
	test2014_65.c test2014_66.c test2014_67.c test2014_68.c \
	test2014_69.c test2014_70.c test2014_72.c test2014_76.c \
	test2014_77.c test2014_78.c test2014_79.c test2014_80.c \
	test2014_81.c test2014_82.c test2014_83.c test2014_84.c \
	test2014_85.c test2014_86.c test2014_87.c test2014_88.c \
	test2014_89.c test2014_91.c test2014_92.c test2014_93.c \
	test2014_94.c test2014_95.c test2014_100.c test2014_200.c \
	test2014_201.c test2014_202.c math.c complex_01.c stdio.c \
	test2006_48.c test2006_132.c test2010_04.c test2010_10.c \
	test2010_11.c test2010_14.c constants.c test2015_01.c \
	test2015_02.c test2015_03.c test2015_04.c test2015_05.c \
	test2015_06.c test2015_07.c test2015_08.c test2015_09.c \
	test2015_10.c test2015_11.c test2015_12.c test2015_13.c \
	test2015_19.c test2015_22.c test2015_23.c test2015_24.c \
	test2015_25.c test2015_26.c test2015_27.c test2015_28.c \
	test2015_29.c test2015_30.c test2015_31.c test2015_32.c \
	test2015_33.c test2015_35.c test2015_36.c test2015_37.c \
	test2015_52.c test2015_53.c test2015_59.c test2015_60.c \
	test2015_61.c test2015_62.c test2015_63.c test2015_64.c \
	test2015_65.c test2015_66.c test2015_67.c test2015_68.c \
	test2015_69.c test2015_70.c test2015_71.c test2015_72.c \
	test2015_73.c test2015_74.c test2015_75.c test2015_76.c \
	test2015_84.c test2015_85.c test2015_89.c test2015_90.c \
	test2015_91.c test2015_92.c test2015_109.c test2015_114.c \
	test2015_117.c test2015_118.c test2015_119.c test2015_120.c \
	test2015_121.c test2015_122.c test2015_123.c test2015_124.c \
	test2015_125.c test2015_126.c test2015_127.c test2015_128.c \
	test2015_129.c test2015_130.c test2015_131.c test2015_132.c \
	test2015_136.c test2015_137.c test2015_138.c test2015_145.c \
	test2015_156.c test2015_157.c test2015_158.c test2015_160.c \
	test2015_161.c test2015_163.c test2015_164.c test2015_165.c \
	test2015_166.c test2015_167.c test2015_168.c test2015_169.c \
	test2015_170.c test2015_171.c test2016_01.c test2016_02.c \
	test2016_03.c test2016_04.c test2016_05.c test2016_06.c \
	test2016_07.c test2016_08.c test2016_09.c test2016_10.c \
	test2016_11.c test2016_12.c test2016_13.c test2016_14.c \
	test2016_15.c $(EXTRA_OS_SPECIFIC_SOURCE_FILES) \
	$(am__append_1) $(am__append_2) $(am__append_3) \
	$(am__append_4)

# DQ (1/16/2017): Clang C support appears to be missign the typeof operator (C11 mode).
@USING_CLANG_COMPILER_FALSE@TESTCODES_REQUIRED_TO_PASS =  \
@USING_CLANG_COMPILER_FALSE@	test2010_12.c test2012_14.c \
@USING_CLANG_COMPILER_FALSE@	test2012_25.c test2012_48.c \
@USING_CLANG_COMPILER_FALSE@	test2012_51.c test2012_52.c \
@USING_CLANG_COMPILER_FALSE@	test2012_54.c test2012_56.c \
@USING_CLANG_COMPILER_FALSE@	test2012_101.c test2012_106.c \
@USING_CLANG_COMPILER_FALSE@	test2012_109.c test2012_110.c \
@USING_CLANG_COMPILER_FALSE@	test2012_111.c test2012_112.c \
@USING_CLANG_COMPILER_FALSE@	test2012_113.c test2012_114.c \
@USING_CLANG_COMPILER_FALSE@	test2012_129.c test2012_162.c \
@USING_CLANG_COMPILER_FALSE@	test2015_14.c test2015_15.c \
@USING_CLANG_COMPILER_FALSE@	test2015_16.c test2015_17.c \
@USING_CLANG_COMPILER_FALSE@	test2015_18.c test2015_20.c \
@USING_CLANG_COMPILER_FALSE@	test2015_21.c test2015_38.c \
@USING_CLANG_COMPILER_FALSE@	test2015_39.c test2015_40.c \
@USING_CLANG_COMPILER_FALSE@	test2015_41.c test2015_42.c \
@USING_CLANG_COMPILER_FALSE@	test2015_43.c test2015_44.c \
@USING_CLANG_COMPILER_FALSE@	test2015_45.c test2015_47.c \
@USING_CLANG_COMPILER_FALSE@	test2015_48.c test2015_49.c \
@USING_CLANG_COMPILER_FALSE@	test2015_50.c test2015_51.c \
@USING_CLANG_COMPILER_FALSE@	test2015_54.c test2015_55.c \
@USING_CLANG_COMPILER_FALSE@	test2015_57.c test2015_58.c \
@USING_CLANG_COMPILER_FALSE@	test2015_77.c test2015_78.c \
@USING_CLANG_COMPILER_FALSE@	test2015_79.c test2015_80.c \
@USING_CLANG_COMPILER_FALSE@	test2015_81.c test2015_82.c \
@USING_CLANG_COMPILER_FALSE@	test2015_83.c test2015_104.c \
@USING_CLANG_COMPILER_FALSE@	test2015_105.c test2015_107.c \
@USING_CLANG_COMPILER_FALSE@	test2015_108.c test2015_110.c \
@USING_CLANG_COMPILER_FALSE@	test2015_113.c test2015_115.c \
@USING_CLANG_COMPILER_FALSE@	test2015_116.c test2015_139.c \
@USING_CLANG_COMPILER_FALSE@	test2015_140.c test2015_141.c \
@USING_CLANG_COMPILER_FALSE@	test2015_142.c test2015_143.c \
@USING_CLANG_COMPILER_FALSE@	test2015_144.c test2015_146.c \
@USING_CLANG_COMPILER_FALSE@	test2015_147.c test2015_148.c \
@USING_CLANG_COMPILER_FALSE@	test2015_149.c $(am__append_1) \
@USING_CLANG_COMPILER_FALSE@	$(am__append_2) $(am__append_3) \
@USING_CLANG_COMPILER_FALSE@	$(am__append_4)

# DQ (4/11/2015): New failing tests:
FAILING_TESTCODES_XEN = \
    test2015_56.c \
    test2015_86.c \
    test2015_87.c \
    test2015_88.c \
    test2015_89.c \
    test2015_93.c \
    test2015_94.c \
    test2015_95.c \
    test2015_96.c \
    test2015_97.c \
    test2015_98.c \
    test2015_99.c \
    test2015_100.c \
    test2015_101.c \
    test2015_102.c \
    test2015_103.c \
    test2015_106.c \
    test2015_111.c \
    test2015_150.c \
    test2015_151.c \
    test2015_152.c \
    test2015_153.c \
    test2015_154.c \
    test2015_155.c \
    test2015_156.c \
    test2015_159.c 


# DQ (4/13/2015): The best examples of remaining bugs are:
# Makefile rules:
#    test_using_explicit_output_file_option:
#    test_rtd_use: 
#    test_m32_use: 
# And test codes:
#    test2015_85.c (demonstrates bug in designated initializer handling)
#    test2015_87.c (demonstrated need for 32-bit mode for EDG front-end, waiting on fix from EDG)
#    test2015_88.c (may require edits to source code where this happens)
#    test2015_89.c (only fails when tested using -m32 -mrtd options using makefile rule: test_rtd_use)
#    test2015_93.c  (demonstrates use of GNU statement-expression in default case of switch statement)
#    test2015_95.c  (demonstrates 32-bit mode requirement for EDG front-end)
#    test2015_100.c (demonstrates that the typeof operator not output in argument type for function type unparsing)
#    test2015_102.c (demonstrates unparsing of alias attribute on non-defining declaration)
#    test2015_103.c (demonstrates unparsing of CPP directive before closing ";" of expanded macro)
#    test2015_105.c (demonstrates unparsing of __asm__() in wrong position)
#    test2015_106.c (demonstrated use of volatile with va_list (not allowed)

# DQ (3/22/2015): Still failing:
#    test2015_31.c 
#    test2015_32.c 
@OS_VENDOR_REDHAT_REL5_TRUE@EXTRA_OS_SPECIFIC_SOURCE_FILES = test2012_173.c
@OS_VENDOR_REDHAT_REL6_TRUE@EXTRA_OS_SPECIFIC_SOURCE_FILES = test2012_173_redhat_rel6.c

# DQ (8/14/2014) List these files explicitly to avoid failing the policy tests.
FILES_NOT_PASSING = \
     test2014_71.c \
     test2014_73.c \
     test2014_74.c \
     test2014_75.c \
     test2014_90.c \
     test2014_96.c \
     test2014_97.c \
     test2014_98.c \
     test2014_99.c \
     test2015_46.c \
     test2015_112.c 


#Liao, 5/16/2009 add a set of self-verifiable test code with main() 
# and let them run during make check
# TV, 9/7/12 do not run them if using Clang
TESTCODES_REQUIRED_TO_RUN = $(am__append_5)
TESTCODE_CURRENTLY_FAILING = \
     test2004_126.c \
     test2006_14.c  \
     test2006_100.c \
     test2006_134.c \
     test2006_136.c \
     test2009_06.c \
     test2010_02.c \
     test2010_03.c \
     test2010_05.c \
     test2010_16.c \
     test2011_03.c \
     test2011_04.c \
     Yarden_client.c


# Automake's testing mechanism (which defines the "make check" rule) requires passing tests.
TESTCODES = $(TESTCODES_REQUIRED_TO_PASS)

# QMTest allows both passing and failing tests.
# ALL_TESTCODES = $(TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING) $(OLD_TESTCODES_REQUIRED_TO_PASS)
ALL_TESTCODES = $(TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING)

# File option to accumulate performance information about the compilation
# PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/C_ROSE_PERFORMANCE_DATA.csv

# DQ (3/28/2013): Now that we have changed the default C behavior to C99 (from C89), we need 
# to explicitly specify the C89 behavior for make of the C test codes in this directory.
# ROSE_FLAGS = -rose:C

# TOO1 (2013-09-17): Required by test2005_168.o to find "rosedll.h",
#                    introduced by CMake work.
ROSE_FLAGS = -rose:C89 $(am__append_6) -w \
	-I$(top_srcdir)/src/frontend/SageIII/
PASSING_TEST_Objects = ${TESTCODES:.c=.o}
PASSING_TEST_Objects_passed = ${TESTCODES:.c=.o.passed}
PASSING_TEST_Source_passed = ${TESTCODES:.c=.c.passed}
TEST_Objects = ${ALL_TESTCODES:.c=.o}
TEST_Objects_passed = ${ALL_TESTCODES:.c=.o.passed}
TEST_Source_passed = ${ALL_TESTCODES:.c=.c.passed}
TEST_Exe_Objects = ${TESTCODES_REQUIRED_TO_RUN:.c=.o}
PASSING_TEST_Executables = ${TEST_Exe_Objects:.o=.out}
# a list of programs or scripts to run in order to do the testing 
TESTS = $(check_PROGRAMS) caller.out 
# endif
# endif
testTranslator = ../../testTranslator
@ROSE_USE_SANITIZER_FALSE@VALGRIND = 

# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support 
# this, this implementation needs review).  It might be better to prepend the information to the 
# CC and CXX variables. I think that the purify support uses this approach.
@ROSE_USE_SANITIZER_TRUE@VALGRIND = $(ADDRESS_SANITIZER_OPTIONS)

#QMTEST_Objects = ${ALL_TESTCODES:.c=.qmt}
#
# Make rule to build the QMTest database files
#CURRENT_DIRECTORY = `pwd`
#$(QMTEST_Objects): ../../testTranslator $(srcdir)/$(@:.qmt=.c)
#	qm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../../testTranslator NULL $(ROSE_FLAGS) -c $(srcdir)/$(@:.qmt=.c)
#
#test2005_168.qmt: $(srcdir)/test2005_168.c
#	qm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../../testTranslator NULL $(ROSE_FLAGS) -I$(top_srcdir)/src/util/commandlineProcessing -c $(srcdir)/$(@:.qmt=.c)
#
# Include makefile rules specific to QMTest
#include $(top_srcdir)/config/QMTest_makefile.inc
EXTRA_DIST = $(ALL_TESTCODES) builtin-types.def callee.c caller.c c-common.def \
             predict.def test2009_18.c test2009_20.c test2014_20_inc.c test2014_27_inc.c test2014_28_inc.c \
	     test2012_145.c conftest.c test2005_168.c \
	     confdefs.h grep_verify.h verify.h \
	     test2006_134.h \
	     test2010_08.h \
	     test2010_15.h \
	     test2012_155.h \
	     test2012_156.h \
	     test2012_63.h \
	     test2012_75.h \
	     test2012_78.h \
	     test2013_05.h \
	     test2013_06.h \
	     test2013_114.h \
	     test2014_06.h \
	     test2014_07.h \
	     test2014_19.h \
	     test2014_33.h \
	     test2014_36.h \
	     test2014_43.h \
	     test2014_56.h \
	     test2014_59.h \
	     test2014_60_data_members.h \
	     test2014_60_values.h \
	     test2014_66.h \
	     test2014_73.h \
        test2015_103.h \
        test2015_77.h \
        test2015_88.h \
        test2015_149.h \
        test2015_154.h \
        test2015_156.h \
        test2015_157.h \
        test2015_159.h

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .log .o .obj .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/CompileTests/C_tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps tests/nonsmoke/functional/CompileTests/C_tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

test2009_05.out$(EXEEXT): $(test2009_05_out_OBJECTS) $(test2009_05_out_DEPENDENCIES) $(EXTRA_test2009_05_out_DEPENDENCIES) 
	@rm -f test2009_05.out$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test2009_05_out_OBJECTS) $(test2009_05_out_LDADD) $(LIBS)

test2009_17.out$(EXEEXT): $(test2009_17_out_OBJECTS) $(test2009_17_out_DEPENDENCIES) $(EXTRA_test2009_17_out_DEPENDENCIES) 
	@rm -f test2009_17.out$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test2009_17_out_OBJECTS) $(test2009_17_out_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.c.o:
	$(AM_V_CC)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@check-TESTS:
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	@set +e; $(am__set_TESTS_bases); \
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	log_list=`for i in $$bases; do echo $$i.log; done`; \
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@	exit $$?;
recheck: all $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
test2009_05.out.log: test2009_05.out$(EXEEXT)
	@p='test2009_05.out$(EXEEXT)'; \
	b='test2009_05.out'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
test2009_17.out.log: test2009_17.out$(EXEEXT)
	@p='test2009_17.out$(EXEEXT)'; \
	b='test2009_17.out'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
caller.out.log: caller.out
	@p='caller.out'; \
	b='caller.out'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
@am__EXEEXT_TRUE@.test$(EXEEXT).log:
@am__EXEEXT_TRUE@	@p='$<'; \
@am__EXEEXT_TRUE@	$(am__set_b); \
@am__EXEEXT_TRUE@	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
@am__EXEEXT_TRUE@	--log-file $$b.log --trs-file $$b.trs \
@am__EXEEXT_TRUE@	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
@am__EXEEXT_TRUE@	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS check-local
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-TESTS check-am \
	check-local clean clean-checkPROGRAMS clean-generic \
	clean-libtool clean-local cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)

# Temporary workaround for lack of AM_EXTRA_RECURSIVE_TARGETS in automake 1.11 and 1.12 [Matzke, 2016-09-14]
# The check for "." is because $ROSE/tests adds "." to SUBDIRS which would otherwise result in infinite recursion.
# The checks for other names are because we don't want to recurse into some directories that don't include this
# file and therefore don't have this rule (but that means these names can't be test subdirecties elsewhere either).
check-smoke check-nonsmoke check-all:
	@for subdir in $(SUBDIRS); do						\
		if [ "$$subdir" != .						\
			-a "$$subdir" != libltdl				\
			-a "$$subdir" != config					\
			-a "$$subdir" != EDG					\
			-a "$$subdir" != DLX					\
			-a "$$subdir" != MFB					\
			-a "$$subdir" != MDCG					\
			-a "$$subdir" != KLT					\
			-a "$$subdir" != 3rdPartyLibraries			\
			-a "$$subdir" != roseHPCToolkit				\
			-a "$$subdir" != projects				\
			-a "$$subdir" != docs					\
			-a "$$subdir" != tools ]; then				\
			echo "Making $@ in $$subdir";				\
			$(MAKE) $(AM_MAKEFLAGS) -C "$$subdir" $@ || exit 1;	\
		fi;								\
	done
	$(MAKE) $(AM_MAKEFLAGS) $@-local

check-smoke-local check-nonsmoke-local:
check-all-local: check-smoke-local check-nonsmoke-local

# Temporary until Jenkins and the Matrix are fixed to run "make check-all" isntead of "make check".  The correct version
# should be that check-local depends only on check-smoke-local. [Matzke, 2016-09-21].
check-local: check-smoke-local check-nonsmoke-local

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: check-smoke check-nonsmoke check-all check-smoke-local check-nonsmoke-local check-all-local clean-test-targets

# TOO (2/10/11): set the correct linker and linker-flags for the alternate
# backend C compiler.
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE@override CCLD=@BACKEND_C_COMPILER@
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE@override LIBS=

# TOO (2/10/11): don't run these tests if they were cross-compiled, otherwise
# they will just fail.
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE@check-TESTS:
@ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE@	@echo "Skipping execution of cross-compiled tests: $(TESTS)"

# Add the dependence upon the source file to trigger recompilation each time the makefile is run!
# $(TEST_Objects): ../../testTranslator $(srcdir)/$(@:.o=.c)
#$(TEST_Objects): ../../testTranslator
#	$(testTranslator) $(ROSE_FLAGS) -c $(srcdir)/$(@:.o=.c)

# DQ (9/23/2013): Added better control to run tests more cleanly (command-line and any output put into *.passed file, or generates similar *.failed file is testing is unsuccessful).
$(TEST_Source_passed): %.passed: ../../testTranslator $(top_srcdir)/scripts/test_exit_status
	@$(RTH_RUN) CMD="$(testTranslator) $(ROSE_FLAGS) -c $(srcdir)/$(@:.c.passed=.c)" $(top_srcdir)/scripts/test_exit_status $@

# This is a redundant test with it also being in the list TESTCODES_REQUIRED_TO_PASS (above).
# test2005_168.o: $(srcdir)/test2005_168.c
test2005_168.o: $(srcdir)/test2005_168.c
#	$(testTranslator) $(ROSE_FLAGS) -I$(top_srcdir)/src/util/commandlineProcessing -c $(srcdir)/test2005_168.c
	@$(RTH_RUN) CMD="$(testTranslator) -I$(srcdir) $(ROSE_FLAGS) -I$(top_srcdir)/src/util/commandlineProcessing -c $(srcdir)/test2005_168.c" $(top_srcdir)/scripts/test_exit_status $@

# DQ (11/1/2012): Added test code to test string concatination using a value defined 
# via a macro specified on the command line. This tests the string quoting mechanism.
test2012_145.o: $(srcdir)/test2012_145.c
#	NOTE: Additional escapes are required to handle quoted string handed on command line for ROSE Test Harness (RTH).
#	$(testTranslator) $(ROSE_FLAGS) -DSTRING_MACRO=\"some_text\" -c $(srcdir)/test2012_145.c
	@$(RTH_RUN) CMD="$(testTranslator) -I$(srcdir) $(ROSE_FLAGS) -DSTRING_MACRO=\\\"some_text\\\" -c $(srcdir)/test2012_145.c" $(top_srcdir)/scripts/test_exit_status $@

$(TEST_Exe_Objects): %.o: $(srcdir)/%.c $(testTranslator)
	$(testTranslator) $(ROSE_FLAGS) -c $<

test_build_generated_file_in_same_directory_as_input_file.passed: %.passed: $(testTranslator)
	@mkdir -p test_directory
	@cp $(srcdir)/test2013_73.c test_directory/test2013_73.c
#	$(testTranslator) -rose:unparse_in_same_directory_as_input_file $(ROSE_FLAGS) -c test_directory/test2013_73.c -o test_directory/test2013_73.o
	@$(RTH_RUN) CMD="$(testTranslator) -rose:unparse_in_same_directory_as_input_file $(ROSE_FLAGS) -c test_directory/test2013_73.c -o test_directory/test2013_73.o" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/13/2013): Added new test for -rose:unparse_includes (which has a bug in how it unparses C++ style comments
# and should maybe not be unparsing declarations that are front-end specific (e.g. builtin function declarations).
test_unparse_includes_option.passed: %.passed: $(testTranslator)
#	$(testTranslator) -rose:unparse_includes $(ROSE_FLAGS) -c $(srcdir)/test2013_75.c -o test2013_75_unparse_headers.o
	@$(RTH_RUN) CMD="$(testTranslator) -rose:unparse_includes $(ROSE_FLAGS) -c $(srcdir)/test2013_75.c -o test2013_75_unparse_headers.o" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/16/2013): Test linking the resulting translated file. Phil Miller reported an error and the issue
# is that va_start() and va_end() must be unparsed to be __builtin_va_start() and __builtin_va_end() (at least for GNU).
test_unparse_includes_option_with_link.passed: %.passed: $(testTranslator)
#	$(testTranslator) -rose:unparse_includes $(ROSE_FLAGS) $(srcdir)/test2013_76.c -o test2013_76_unparse_headers
	@$(RTH_RUN) CMD="$(testTranslator) -rose:unparse_includes $(ROSE_FLAGS) -c $(srcdir)/test2013_76.c -o test2013_76_unparse_headers.o" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/17/2013): Added autoconf style link test.
test_common_configure_test_with_link.passed: %.passed: $(testTranslator)
#	$(testTranslator) -I$(srcdir) $(ROSE_FLAGS) $(srcdir)/conftest.c -o conftest_configure_test
	@$(RTH_RUN) CMD="$(testTranslator) -I$(srcdir) $(ROSE_FLAGS) $(srcdir)/conftest.c -o conftest_configure_test" $(top_srcdir)/scripts/test_exit_status $@

# This is a simple demonstration of the token unparsing and how it preserves macros
# in the generated ROSE code (for the case where the statement is not transformed).
test_tokenMapping: 
#	rm -f test2003_12.c.mapping.passed
#	@$(MAKE) test2003_12.c.mapping.passed
	$(testTranslator) -rose:C89 -rose:unparse_tokens -c $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests/test2003_12.c

# DQ (1/19/2014): Test the use of the gnu "-S" option.
test_gnu_S_option:
	$(testTranslator) -S -o test2014_41.s $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests/test2014_41.c

test_link_using_alias_attribute: $(testTranslator)
	$(testTranslator) -o test2014_93 $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests/test2014_93.c

# DQ (2/17/2014): Added to force test of two week old asm fix for linking that didn't make it out in github.
test_link_using_asm_symbol_injection: $(testTranslator)
	$(testTranslator) -o test2014_83 $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests/test2014_83.c

# Liao 11/19/2009
# Custom tests to test rose translators as a linker (generating the final executables) for multiple files
# simplest case: generate .o with -c
caller.o: $(srcdir)/callee.c $(srcdir)/caller.c
	$(testTranslator) $(ROSE_FLAGS) -c $^
# default case: generate executable a.out from any number of input files	
caller.out: $(srcdir)/callee.c $(srcdir)/caller.c
	$(testTranslator) $(ROSE_FLAGS) $^ -o caller.out
# DQ (4/18/2015): Add the execution of the generated executable.
	./caller.out

# Customized test that modifies testTranslator to remove empty elses to test dangling else unparsing
# test2008_02.o: $(srcdir)/test2008_02.c
#	env ROSE_TEST_ELSE_DISAMBIGUATION=x $(testTranslator) $(ROSE_FLAGS) -c $(srcdir)/test2008_02.c

# test2008_02.o: $(srcdir)/test2008_02.c
test_else_case_disambiguation.passed: $(srcdir)/test2008_02.c
	@cp $(srcdir)/test2008_02.c else_case_disambiguation_test.c
	@$(RTH_RUN) CMD="env ROSE_TEST_ELSE_DISAMBIGUATION=x $(testTranslator) $(ROSE_FLAGS) -c else_case_disambiguation_test.c" $(top_srcdir)/scripts/test_exit_status $@

# DQ (4/8/2015): This causes an error due to a bug which outputs a redundant "-o <file>" option
test_using_explicit_output_file_option:
	$(testTranslator) -rose:verbose 0 -MMD -MF .subdirs-install.d $(srcdir)/test2015_86.c -o test2015_86

test_using_implicit_output_file_option:
	$(testTranslator) -rose:verbose 0 -MMD -MF .subdirs-install.d $(srcdir)/test2015_86.c

# DQ (8/28/2015): Exclude tests using the GNU specific "-m32" option when using the Intel v14 compiler.
# DQ (4/9/2015): Added test for using -m32 -mrtd options (required for Xen).
test_rtd_use: $(testTranslator) $(srcdir)/test2015_89.h
@USING_INTEL_COMPILER_FALSE@	$(testTranslator) -m32 -mrtd -rose:C89 -c $(srcdir)/test2015_89.c

# DQ (8/28/2015): Exclude tests using the GNU specific "-m32" option when using the Intel v14 compiler.
# DQ (4/10/2015): Added test for using -m32 option which fouces __uint128_t to be undefined (required for Xen).
test_m32_use: $(testTranslator)
@USING_INTEL_COMPILER_FALSE@	$(testTranslator) -m32 -rose:C89 -c $(srcdir)/test2015_95.c

# DQ (5/12/2015): Test demonstrated by Xen build system (where test2015_133.S is a generated C source code file).
test_file_suffix: $(testTranslator) 
	$(testTranslator) -c $(srcdir)/test2015_133.S

# DQ (8/28/2015): Exclude tests using the GNU specific "-m32" option when using the Intel v14 compiler.
# DQ (5/24/2015): Added test for using -mregparm=3 -m32 option which fouces the regparm(0) parameter in __attribute__ (( cdecl, regparm(0) )) to be significant.
test_mregparm_m32_use: $(testTranslator)
@USING_INTEL_COMPILER_FALSE@	$(testTranslator) -mregparm=3 -m32 -rose:C89 -c $(srcdir)/test2015_154.c

# DQ (5/24/2015): Added test for using -mregparm=3 -m32 option which fouces the regparm(0) parameter in __attribute__ (( cdecl, regparm(0) )) to be significant.
test_optimization_specifier_O: $(testTranslator)
	$(testTranslator) -O -c $(srcdir)/test2015_153.c

test_optimization_specifier_Os: $(testTranslator)
	$(testTranslator) -Os -c $(srcdir)/test2015_153.c

test_optimization_specifier_O1: $(testTranslator)
	$(testTranslator) -O1 -c $(srcdir)/test2015_153.c

test_optimization_specifier_O2: $(testTranslator)
	$(testTranslator) -O2 -c $(srcdir)/test2015_153.c

# DQ (5/27/2015): This was a bug in the internal generation of the backend compiler command line
# it was removing the 2nd parameter after the "-o" option, instead of the next parameter after 
# the "-o" option. Note that the isue was independent of what the 2nd parameter was after the 
# "-o" option, it was just initially demonstrated with -DNDEBUG.
test_compile_and_link_with_NDEBUG:
	$(testTranslator) -o test2015_162 -DNDEBUG $(srcdir)/test2015_162.c

test_compile_and_link_without_NDEBUG:
	$(testTranslator) -o test2015_162 $(srcdir)/test2015_162.c

../../testTranslator:
	cd ../..; $(MAKE) testTranslator

copyFiles:
	cp $(srcdir)/*.h $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests
	cp $(srcdir)/*.c $(top_srcdir)/tests/nonsmoke/functional/CompileTests/C_tests

check-pthread.passed: needs_reentrant.c $(testTranslator)
	@$(RTH_RUN)								\
		TITLE="-pthread should define -D_REENTRANT [$@]"		\
		CMD="$(testTranslator) -pthread -c $(srcdir)/needs_reentrant.c"	\
		USE_SUBDIR=no							\
		$(top_srcdir)/scripts/test_exit_status $@

check-local: check-pthread.passed
	@echo "Tests for C."
#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest
#	These C programs must be called externally to the test codes in the "TESTCODES" make variable
#	@$(MAKE) $(PASSING_TEST_Objects_passed)
	@$(MAKE) $(PASSING_TEST_Source_passed)
#	@$(MAKE) caller.o caller.out
	@$(MAKE) test2012_145.o
	@$(MAKE) test_link_using_asm_symbol_injection
	@$(MAKE) test_link_using_alias_attribute
	@$(MAKE) test_build_generated_file_in_same_directory_as_input_file.passed
	@$(MAKE) test_unparse_includes_option.passed
	@$(MAKE) test_unparse_includes_option_with_link.passed
	@$(MAKE) test_else_case_disambiguation.passed
	@$(MAKE) test_common_configure_test_with_link.passed
	@$(MAKE) test2005_168.o
	@$(MAKE) test_using_explicit_output_file_option
	@$(MAKE) test_using_implicit_output_file_option
	@$(MAKE) test_rtd_use
	@$(MAKE) test_optimization_specifier_O
	@$(MAKE) test_optimization_specifier_Os
	@$(MAKE) test_optimization_specifier_O1
	@$(MAKE) test_optimization_specifier_O2
	@$(MAKE) test_mregparm_m32_use
	@$(MAKE) test_compile_and_link_with_NDEBUG
	@$(MAKE) test_compile_and_link_without_NDEBUG
#	@$(MAKE) test_m32_use
	@echo "*********************************************************************************************"
	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/C_tests: make check rule complete (terminated normally) ******"
	@echo "*********************************************************************************************"

clean-local:
	rm -f *.o rose_*.[cC] rose_performance_report_lockfile.lock *.out *.dot
	rm -rf QMTest
	rm -rf test_directory
	rm -rf test2013_76_unparse_headers conftest_configure_test else_case_disambiguation_test.c
	rm -f *.err *.passed *.failed
	rm -f token_trailing_*.c token_leading_*.c
	rm -f test2014_83 test2014_93
	rm -f test2015_162 test2015_86

################################################################################
#
# Addition to show how to hook QMTest ROSE_Regression with automake
# Uncomment lines 115,$
#

#export ROSE_TEST_REGRESSION_ROOT=/home/yuan5/tmp/18/ROSE_Regression
#QMTEST=/home/yuan5/opt/qmtest-2.3/bin/qmtest
#ALL_Objects = ${ALL_TESTCODES:.c=.o}
#
#force:
#
#testTranslator_wrapper: force
#	rm -f ../../testTranslator
#	echo -e "#!/bin/bash\n${ROSE_TEST_REGRESSION_ROOT}/roseQMGen/bin/qm.sh ../../../testTranslator \"\$$@\"" > ../../testTranslator && chmod +x ../../testTranslator
#
#rrqm_generate: testTranslator_wrapper $(ALL_Objects)
#	test -d ./c_tests_testdatabase || mkdir c_tests_testdatabase 
#	rm -rf ./c_tests_testdatabase/*
#	find . -type f -mindepth 1 -maxdepth 1 -name "*.qmt" -exec mv {} c_tests_testdatabase/ \;
#	$(QMTEST) -D`pwd`/c_tests_testdatabase create-tdb
#	rm -f ../../testTranslator
#	cd ../..; $(MAKE) testTranslator
#
#c_tests_testdatabase/QMTest:
#	$(MAKE) rrqm_generate
#
#rrqm_run: c_tests_testdatabase/QMTest
#	-cd c_tests_testdatabase && $(QMTEST) run
#
#c_tests_testdatabase/results.qmr:
#	$(MAKE) rrqm_run
#
#rrqm_report: c_tests_testdatabase/results.qmr
#	sh -c "source ${ROSE_TEST_REGRESSION_ROOT}/scripts/rosetestrc; report.sh c_tests_testdatabase/results.qmr c_tests_testdatabase report_c_tests"
#	@echo -e "\nThe results are in `pwd`/report_c_tests/results.xml"

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
