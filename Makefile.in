# Makefile.in generated by automake 1.15 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE@am__append_1 = tests

# DQ (4/23/2011): Ignoring all of these whole directories might be over kill.  But I have had problems with 
# Insure++ compilation specific to Hudson and want to start small and work to grow the number of parts of ROSE
# used by Insure.  Except on Hudson (e.g. on my machine) Insure++ can be used to compiler nearly all of ROSE.
@ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_INSURE_FALSE@am__append_2 = projects
@ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_INSURE_FALSE@@ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE@am__append_3 = tutorial exampleTranslators docs 
@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_INSURE_FALSE@@ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE@am__append_4 = tools scripts 
@ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_INSURE_FALSE@@ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE@am__append_5 = demo

# DQ (7/25/2008): If ROSE was originallly configured with Fortran (by tuning 
# on the java support) then make sure it is tested as part of the distcheck rule.
# if ROSE_USE_OPEN_FORTRAN_PARSER
# DISTCHECK_CONFIGURE_FLAGS += --with-java
@ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE@am__append_6 = --with-java=$(JAVA_PATH)
# DQ (10/22/2010): Added specification of --without-java to distcheck rule.
# If we have first built without java then we have had to build some of the
# Fortran language supporting files as empty files and thus we don't want to
# run distcheck in a way that would use those files. However the problem
# when this is not used has more to do with the Java langauge support.
# A better reason why this is required might be so that we can run the NMI tests.
# TOO (3/24/2011): TODO: the new language-support configuration that I've
# implemented does not automatically disable fortran, whereas the previous
# implementation did. Since we now have Java-language support, the
# --without-java flag is confusing. I thought it meant "without java-language
# support". Speaking with Dan, we concluded that we need to look at renaming
# --without-java to something else like --without-jvm or --without-java-components
# This flag is suppose to turn off all parts of ROSE that use Java: 
# projects/javaports, java- and fortran-language support, etc.
@ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE@am__append_7 = --without-java \
@ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE@	--disable-fortran

# DQ (7/25/2008): If ROSE was originallly configured to use the HPC Toolkit
# then make sure it is tested as part of the distcheck rule.
@ROSE_BUILD_ROSEHPCT_TRUE@am__append_8 = --enable-rosehpct

# DQ (7/25/2008): If ROSE was originallly configured to use the javaport
# work (generation of Java interface functions for ROSE using SWIG) then 
# make sure it is tested as part of the distcheck rule.
@ENABLE_JAVAPORT_TRUE@am__append_9 = --with-javaport

# DQ (4/5/2010): Use the same version of OFP as specified on the original configure command line.
# CER (10/10/2011): No longer needed. A specific OFP version is configured by default and distributed with ROSE.
#DISTCHECK_CONFIGURE_FLAGS += --enable-ofp-version=@ROSE_OFP_MAJOR_VERSION_NUMBER@.@ROSE_OFP_MINOR_VERSION_NUMBER@.@ROSE_OFP_PATCH_VERSION_NUMBER@

# SRIRAM (8/2/2010): changing distcheck configuration for LLVM translator
@ROSE_USE_LLVM_TRUE@am__append_10 = --with-llvm=$(llvm_path)
subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-frontend-x10.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-git-versioning.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(top_srcdir)/configure \
	$(am__configure_deps) $(noinst_HEADERS) $(pkginclude_HEADERS) \
	$(am__DIST_COMMON)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = rose_config.h
CONFIG_CLEAN_FILES = src/frontend/CxxFrontend/EDG/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.4/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.4/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.4/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.4/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.4/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.7/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.7/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.7/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.7/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.7/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.8/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.8/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.8/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.8/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.8/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.9/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.9/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.9/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.9/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.9/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.11/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.11/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.11/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.11/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.11/lib/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile \
	src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile \
	src/frontend/CxxFrontend/EDG/edgRose/Makefile stamp-h \
	projects/compass2/share/xml/compass_parameters.xml
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
depcomp =
am__depfiles_maybe =
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(pkgincludedir)"
HEADERS = $(noinst_HEADERS) $(pkginclude_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	cscope distdir dist dist-all distcheck
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)rose_config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
CSCOPE = cscope
DIST_SUBDIRS = libltdl config src tests projects tutorial \
	exampleTranslators docs tools scripts demo
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/rose_config.h.in \
	$(srcdir)/stamp-h.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/automake_conditional_display_makefile \
	$(top_srcdir)/config/build_rose_paths.Makefile \
	$(top_srcdir)/config/compile $(top_srcdir)/config/config.guess \
	$(top_srcdir)/config/config.sub \
	$(top_srcdir)/config/install-sh $(top_srcdir)/config/ltmain.sh \
	$(top_srcdir)/config/missing \
	$(top_srcdir)/config/mkinstalldirs \
	$(top_srcdir)/projects/compass/src/compassSupport/compass_dirs.inc \
	$(top_srcdir)/projects/compass2/share/xml/compass_parameters.xml.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/lib/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/misc/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/src/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/src/disp/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/Makefile.in \
	$(top_srcdir)/src/frontend/CxxFrontend/EDG/edgRose/Makefile.in \
	ChangeLog README
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
top_distdir = $(distdir)
am__remove_distdir = \
  if test -d "$(distdir)"; then \
    find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
      && rm -rf "$(distdir)" \
      || { sleep 5 && rm -rf "$(distdir)"; }; \
  else :; fi
am__post_remove_distdir = $(am__remove_distdir)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
DIST_TARGETS = dist-gzip
distuninstallcheck_listfiles = find . -type f -print
am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \
  | sed 's|^\./|$(prefix)/|' | grep -v '$(infodir)/dir$$'
distcleancheck_listfiles = find . -type f -print
ABS_COMPASS2_XML_SRCDIR = @ABS_COMPASS2_XML_SRCDIR@
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
ATERM_BIN_PATH = @ATERM_BIN_PATH@
ATERM_INSTALL_PATH = @ATERM_INSTALL_PATH@
ATERM_LIBRARY_PATH = @ATERM_LIBRARY_PATH@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKEND_CXX_COMPILER = @BACKEND_CXX_COMPILER@
BACKEND_CXX_VENDOR_AND_VERSION2 = @BACKEND_CXX_VENDOR_AND_VERSION2@
BACKEND_CXX_VENDOR_AND_VERSION3 = @BACKEND_CXX_VENDOR_AND_VERSION3@
BACKEND_C_COMPILER = @BACKEND_C_COMPILER@
BACKEND_FORTRAN_COMPILER = @BACKEND_FORTRAN_COMPILER@
BACKEND_JAVA_COMPILER = @BACKEND_JAVA_COMPILER@
BACKEND_X10_COMPILER = @BACKEND_X10_COMPILER@
BACKSTROKE_ROSS_INCLUDE = @BACKSTROKE_ROSS_INCLUDE@
BACKSTROKE_SPEEDES_INCLUDE = @BACKSTROKE_SPEEDES_INCLUDE@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_IOSTREAMS_LIB = @BOOST_IOSTREAMS_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SERIALIZATION_LIB = @BOOST_SERIALIZATION_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CANDL_PATH = @CANDL_PATH@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CFLAGS32 = @CFLAGS32@
CLANG_CXXFLAGS = @CLANG_CXXFLAGS@
CLANG_LDFLAGS = @CLANG_LDFLAGS@
CLANG_LIBDIR = @CLANG_LIBDIR@
CLASSPATH = @CLASSPATH@
CLOOG_PATH = @CLOOG_PATH@
CPP = @CPP@

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES 
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = @CUDA_BIN_DIR@
CUDA_INC_DIR = @CUDA_INC_DIR@
CUDA_LIB_DIR = @CUDA_LIB_DIR@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLIB_PREFIX = @DLIB_PREFIX@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DOXYINDEXER = @DOXYINDEXER@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FC = @FC@
FCFLAGS = @FCFLAGS@
FFLAGS = @FFLAGS@
FGREP = @FGREP@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
FRONTEND_CXX_VENDOR_AND_VERSION2 = @FRONTEND_CXX_VENDOR_AND_VERSION2@
FRONTEND_CXX_VENDOR_AND_VERSION3 = @FRONTEND_CXX_VENDOR_AND_VERSION3@
GCC_MINOR_VERSION = @GCC_MINOR_VERSION@
GCC_VERSION = @GCC_VERSION@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_CFLAGS = @GLUT_CFLAGS@
GLUT_LIBS = ${glut_path}
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GMP_INCLUDE_PATH = @GMP_INCLUDE_PATH@
GMP_INSTALL_PATH = @GMP_INSTALL_PATH@
GMP_LIBRARY_PATH = @GMP_LIBRARY_PATH@
GREP = @GREP@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAVE_CXX11 = @HAVE_CXX11@
HAVE_CXX14 = @HAVE_CXX14@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLTDL = @INCLTDL@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
ISL_INCLUDE_PATH = @ISL_INCLUDE_PATH@
ISL_INSTALL_PATH = @ISL_INSTALL_PATH@
ISL_LIBRARY_PATH = @ISL_LIBRARY_PATH@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_JVM_PATH = @JAVA_JVM_PATH@
JAVA_PATH = @JAVA_PATH@
LD = @LD@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBADD_DLD_LINK = @LIBADD_DLD_LINK@
LIBADD_DLOPEN = @LIBADD_DLOPEN@
LIBADD_SHL_LOAD = @LIBADD_SHL_LOAD@
LIBDWARF_CPPFLAGS = @LIBDWARF_CPPFLAGS@
LIBDWARF_LDFLAGS = @LIBDWARF_LDFLAGS@
LIBDWARF_PREFIX = @LIBDWARF_PREFIX@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBREADLINE_INCLUDE_PATH = @LIBREADLINE_INCLUDE_PATH@
LIBREADLINE_INSTALL_PATH = @LIBREADLINE_INSTALL_PATH@
LIBREADLINE_LIBRARY_PATH = @LIBREADLINE_LIBRARY_PATH@
LIBREADLINE_LIBS = @LIBREADLINE_LIBS@
LIBS = @LIBS@
LIBS_WITH_RPATH = @LIBS_WITH_RPATH@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LLVM_CONFIG = @LLVM_CONFIG@
LN_S = @LN_S@
LTDLDEPS = @LTDLDEPS@
LTDLINCL = @LTDLINCL@
LTDLOPEN = @LTDLOPEN@
LTLIBOBJS = @LTLIBOBJS@
LT_ARGZ_H = @LT_ARGZ_H@
LT_CONFIG_H = @LT_CONFIG_H@
LT_DLLOADERS = @LT_DLLOADERS@
LT_DLPREOPEN = @LT_DLPREOPEN@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBDIR = @MAPLE_LIBDIR@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MINT = @MINT@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MPICC = @MPICC@
MPICXX = @MPICXX@
MPIF77 = @MPIF77@
MPIFC = @MPIFC@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
NM = @NM@
NMEDIT = @NMEDIT@
NVCCBIN = @NVCCBIN@
OBJ = @OBJ@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENCL_INC_DIR = @OPENCL_INC_DIR@
OPENCL_LIB_DIR = @OPENCL_LIB_DIR@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OPTIONAL_PROJECTS = @OPTIONAL_PROJECTS@
OS_major_release_number = @OS_major_release_number@
OS_minor_release_number = @OS_minor_release_number@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
POET_INCL = @POET_INCL@
POET_LIB = @POET_LIB@
PPL_PATH = @PPL_PATH@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
PYTHON = @PYTHON@
PYTHON_CPPFLAGS = @PYTHON_CPPFLAGS@
PYTHON_EXTRA_LDFLAGS = @PYTHON_EXTRA_LDFLAGS@
PYTHON_EXTRA_LIBS = @PYTHON_EXTRA_LIBS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@
PYTHON_SITE_PKG = @PYTHON_SITE_PKG@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HOME = @ROSE_HOME@
ROSE_LIBMAGIC_PREFIX = @ROSE_LIBMAGIC_PREFIX@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_JAR_FILE = @ROSE_OFP_JAR_FILE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_OFP_VERSION_NUMBER = @ROSE_OFP_VERSION_NUMBER@
ROSE_PS2PDF_PATH = @ROSE_PS2PDF_PATH@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_CANDL = @ROSE_USE_CANDL@
ROSE_USE_CLOOG = @ROSE_USE_CLOOG@
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = @ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_SCOPLIB = @ROSE_USE_SCOPLIB@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_MPI_CFLAGS = @ROSE_WITH_MPI_CFLAGS@
ROSE_WITH_MPI_CLDFLAGS = @ROSE_WITH_MPI_CLDFLAGS@
ROSE_WITH_MPI_CXXFLAGS = @ROSE_WITH_MPI_CXXFLAGS@
ROSE_WITH_MPI_CXXLDFLAGS = @ROSE_WITH_MPI_CXXLDFLAGS@
ROSE_WITH_MPI_F77FLAGS = @ROSE_WITH_MPI_F77FLAGS@
ROSE_WITH_MPI_F77LDFLAGS = @ROSE_WITH_MPI_F77LDFLAGS@
ROSE_WITH_MPI_FFLAGS = @ROSE_WITH_MPI_FFLAGS@
ROSE_WITH_MPI_FLDFLAGS = @ROSE_WITH_MPI_FLDFLAGS@
ROSE_YAML_PREFIX = @ROSE_YAML_PREFIX@
ROSE_YICES = @ROSE_YICES@
ROSE_YICES_PREFIX = @ROSE_YICES_PREFIX@
RT_LIBS = @RT_LIBS@
SCOPLIB_PATH = @SCOPLIB_PATH@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRATEGO_BIN_PATH = @STRATEGO_BIN_PATH@
STRATEGO_INSTALL_PATH = @STRATEGO_INSTALL_PATH@
STRATEGO_LIBRARY_PATH = @STRATEGO_LIBRARY_PATH@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
UPC = @UPC@
UPCDEPMODE = @UPCDEPMODE@
UPCFLAGS = @UPCFLAGS@
USING_WINDOWS = @USING_WINDOWS@
VALGRIND_BINARY = @VALGRIND_BINARY@
VALGRIND_BIN_PATH = @VALGRIND_BIN_PATH@
VALGRIND_INCLUDE_PATH = @VALGRIND_INCLUDE_PATH@
VALGRIND_INSTALL_PATH = @VALGRIND_INSTALL_PATH@
VALGRIND_LIBRARY_PATH = @VALGRIND_LIBRARY_PATH@
VECTORIZATION = @VECTORIZATION@
VERSION = @VERSION@
WT_PREFIX = @WT_PREFIX@
X10_BIN_PATH = @X10_BIN_PATH@
X10_INSTALL_PATH = @X10_INSTALL_PATH@
X10_LIBRARY_PATH = @X10_LIBRARY_PATH@
X10_VERSION = @X10_VERSION@
XERCES_CPPFLAGS = @XERCES_CPPFLAGS@
XERCES_LDFLAGS = @XERCES_LDFLAGS@
XERCES_LIBS = @XERCES_LIBS@
XERCES_VERSION = @XERCES_VERSION@
XMKMF = @XMKMF@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
YACC = @YACC@
YFLAGS = @YFLAGS@
Z3BIN = @Z3BIN@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
ac_ct_F77 = @ac_ct_F77@
ac_ct_FC = @ac_ct_FC@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_UPC = @ac_ct_UPC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
backstroke_ross_path = @backstroke_ross_path@
backstroke_speedes_path = @backstroke_speedes_path@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
builddir = @builddir@
configure_date = @configure_date@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localedir = @localedir@
localstatedir = @localstatedir@
ltdl_LIBOBJS = @ltdl_LIBOBJS@
ltdl_LTLIBOBJS = @ltdl_LTLIBOBJS@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
pdfdir = @pdfdir@
php_path = @php_path@
poet_dir = @poet_dir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
res_top_src = @res_top_src@
rted_path = @rted_path@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
subdirs = @subdirs@
sys_symbol_underscore = @sys_symbol_underscore@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_pwd = @top_pwd@
top_srcdir = @top_srcdir@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@ROSE_YICES_PREFIX@/include
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @ROSE_YICES_PREFIX@/lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_INCLUDES = -I@ROSE_YAML_PREFIX@/include
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS = -lyaml-cpp
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS_WITH_PATH = -L@ROSE_YAML_PREFIX@/lib -lyaml-cpp

# GNU readline
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_INCLUDES = -I@LIBREADLINE_INCLUDE_PATH@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS = @LIBREADLINE_LIBS@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS_WITH_PATH = -L@LIBREADLINE_LIBRARY_PATH@ $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_INCLUDES = -I@ROSE_LIBMAGIC_PREFIX@/include
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS = -lmagic
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS_WITH_PATH = -L@ROSE_LIBMAGIC_PREFIX@/lib -lmagic

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_INCLUDES = -I@DLIB_PREFIX@
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS = 
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`

# ROSE-DWARF libdwarf support
@ROSE_HAVE_LIBDWARF_TRUE@ROSE_DWARF_INCLUDES = $(LIBDWARF_CPPFLAGS)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(LIBDWARF_PREFIX/lib) -L$(LIBDWARF_PREFIX/lib) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(LIBDWARF_PREFIX)/lib/libdwarf.a -lelf
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @LIBDWARF_LDFLAGS@

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

#   libroseExperimentalOpenFortranParserlibraries = frontend/Experimental_OpenFortranParser_ROSE_Connection/aterm_traversal/libexperimentalRoseFortran.la

# DQ (9/26/2015): This is defined in src/Makefile.am
#   libroseExperimentalOpenFortranParserlibraries =
#   ROSE_EXPERIMENTAL_OFP_INCLUDE = -I$(_PREFIX)/include
#   ROSE_EXPERIMENTAL_OFP_LIBS    = -L$(top_builddir)/src/frontend/Experimental_OpenFortranParser_ROSE_Connection/aterm_traversal -lexperimentalRoseFortran

# DQ (1/26/2017): This is not built in the new way that Craig and I are working together on the new OFP.
@ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE@ROSE_EXPERIMENTAL_OFP_LIBS = -L$(top_builddir)/src/3rdPartyLibraries/experimental-fortran-parser/aterm_traversal -lexperimentalOFP
#   ROSE_EXPERIMENTAL_OFP_LIBS    = 

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -lm
# ROSE_INCLUDES = 
#     $(ROSE_BOOST_PREINCLUDE_PATH) 
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PHPFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_FRONTEND_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PythonFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractHandle \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractMemoryObject \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractLayer \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astRewriteMechanism \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/annotation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SIDEEFFECTS_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_GUI_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_QT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@			$(ROSE_SIDEEFFECT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/libltdl \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PHP_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PYTHON_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YICES_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YAML_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_READLINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_LIBMAGIC_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DLIB_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DWARF_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_WINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(VALGRIND_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(SQLITE3_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PCH_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(INTEL_PIN_INCLUDE_PATHS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ETHER_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES = 
#    $(ROSE_BOOST_PREINCLUDE_PATH) 
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/binaryAnalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to 
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend 
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang 
#    $(ROSE_CLANG_FRONTEND_INCLUDE) 
#    $(ROSE_CLANG_INCLUDE) 
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH) 

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS) $(ROSE_BOOST_LIBS) \
  $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) $(ROSE_EXPERIMENTAL_OFP_LIBS) \
  $(ROSE_YAML_LIBS_WITH_PATH) $(ROSE_LIBMAGIC_LIBS_WITH_PATH) $(ROSE_READLINE_LIBS_WITH_PATH) \
  $(ROSE_DLIB_LIBS_WITH_PATH)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
compass_srcdir = $(top_srcdir)/projects/compass/src
compass_tooldir = $(top_srcdir)/projects/compass/tools
compass_extdir = $(top_srcdir)/projects/compass/extensions
compass_build_srcdir = $(top_builddir)/projects/compass/src
compass_build_tooldir = $(top_builddir)/projects/compass/tools
compass_build_extdir = $(top_builddir)/projects/compass/extensions
compass_prereqs_dir = $(compass_extdir)/prerequisites
compass_checker_dir = $(compass_extdir)/checkers
compass_checker_repository = $(compass_checker_dir)/repository
compass_support_dir = $(compass_srcdir)/compassSupport
compass_scripts_dir = $(compass_srcdir)/compass_scripts
compass_input_dir = $(compass_srcdir)/in
compass_test_dir = $(compass_srcdir)/tests
compass_checker_bdir = $(compass_build_extdir)/checkers
compass_support_bdir = $(compass_build_srcdir)/compassSupport

# DQ (1/18/2009): Added demo directory to support showoffs :-).
# DQ "config" and "src" must preceed any other directories, and 
# "tutorial" and "exampleTranslators" must preceed "docs" since 
# they generate data that is subsequently used in the generated 
# ROSE documentation (examples, input codes, and generated output).
# SUBDIRS = config src projects tests tutorial exampleTranslators docs developersScratchSpace tools proposals scripts
# SUBDIRS = libltdl config src projects tests tutorial exampleTranslators docs tools scripts demo binaries

# DQ (2/6/2010): changed the order of tests, the projects directory now follows the tests directory.
# This was something that was discussed in email previously with the group.  Thei point is to have the
# first tests run by make check be the most relevant tests (e.g. can we compile C++ code).
# SUBDIRS = libltdl config src tests projects tutorial exampleTranslators docs tools scripts demo binaries

# DQ (4/17/2010): Support for minimal configuration of ROSE (e.g. "--enable-only-fortran").
SUBDIRS = libltdl config src $(am__append_1) $(am__append_2) \
	$(am__append_3) $(am__append_4) $(am__append_5)

# endif for excluding tests using GNU 4.8 and C++11 mode together.

# endif for controling Insure++ usage.

# Pei-Hung (12/06/2016) use "aclocal --print-ac-dir" to specify the include path to support both Linux and Mac
#ACLOCAL_AMFLAGS = -I ./config -I ./acmacros -I ./libltdl -I /usr/share/aclocal
ACLOCAL_INCLUDE = "$$(aclocal --print-ac-dir)"
ACLOCAL_AMFLAGS = -I ./config -I ./acmacros -I ./libltdl -I $(ACLOCAL_INCLUDE)

# DQ (6/29/2004): I don't think we need this!
# LIBS = @LIBS@ ${SAGE_LIBS}

# It seems that it is better to handle the config directory with its own Makefile.am
# This allows us to hide autoconf accessory files (config.guess, etc.)
# Copy the config directory to the distribution: why?
# (because it has the file: config/Makefile.for.ROSE.includes.and.libs)
# EXTRA_DIST = stamp-h.in stamp-h1.in GNU_HEADERS config
# EXTRA_DIST = stamp-h.in stamp-h1.in GNU_HEADERS COPYWRITE ROSE_ResearchPapers
# EXTRA_DIST = cmake CMakeLists.txt rose_config.h.in.cmake stamp-h.in stamp-h1.in COPYRIGHT \
#              LicenseInformation ROSE_ResearchPapers README.OSX README.Cygwin build ChangeLog2 bincompat-sig

# The bincompat-sig file contains the SHA1 part of the EDG binary tarball name and must be generated anew
# each time we make a distribution because we don't want to distribute stale information.
EXTRA_DIST = cmake CMakeLists.txt rose_config.h.in.cmake stamp-h.in \
	stamp-h1.in COPYRIGHT LicenseInformation ROSE_ResearchPapers \
	build ChangeLog2 bincompat-sig

# DQ (10/14/2010): We want to make sure that this does not go out to the install tree
# it also should not be in the distribution (since we want rose_config.h.in to be put 
# into the distribution instead; from which then rose_config.h is generated).
# However, the public version should be installed and distributed.
noinst_HEADERS = rose_config.h
pkginclude_HEADERS = rosePublicConfig.h

# DQ (4/22/2005): Set this so that make distcheck will use the same 
# --with-edg_source_code=true/false option as were used at configure.
# JJW (5/14/2008): Add the Boost flag the same way, using an internal
# variable from AX_BOOST_* to find the argument to --with-boost when
# this copy of ROSE was originally configured.
DISTCHECK_CONFIGURE_FLAGS = --with-boost=$(ac_boost_path) \
	$(am__append_6) $(am__append_7) $(am__append_8) \
	$(am__append_9) $(am__append_10)

# We reset distdir as shown on
# http://jcalcote.wordpress.com/2008/02/23/autoconf-macros-exposed-at3/ to add the SVN
# revision number
# The final distribution package should be
# rose-0.9.5a-8286.tar.gz
#
# Liao 12/14/2009
# We don't use subversion anymore
# We convert the number of git commits to a pseudo revision number instead
distdir = $(PACKAGE)-$(VERSION)$(DOT_SVNREV)

# CLEANFILES = rose_binary_compatibility_signature rose_binary_compatibility_signature_src
CLEANFILES = rose_binary_compatibility_signature bincompat-sig
FILTER_MAKEFILES = grep "Makefile\.am" | grep -v "Makefile\.am~"

# ***********************************************************
#      Display Which Automake Conditionals Are Defined
# ***********************************************************
# DQ (10/18/2010): Added test for names used in automake conditional macros
# (eventually we want tests for consistancy).  This rule generates a makefile
# containing a makefile rule. The makefile rule can be run to see what automake
# conditionals were defined in the last run of configure. It might be that 
# this mechanism should be in a script generated by the build script, but we 
# need an initial version of the generated script to be checked into git so that 
# the build script can find it.  Note that we grep the Makefile.in instead of
# the Makefile.am (which would be more difficult, I think). So we need the
# Makefile.in from runing the build script first.  Thus having the generated
# file checked into git avoids a dependence on a file that we would not have.
FILTER_AUTOMAKE_CONDITONALS = egrep -v "autom4te" | grep -v "~" | grep AM_CONDITIONAL
TEST_FILE = $(top_srcdir)/config/automake_conditional_display_makefile

# Include this file (generated first by the rule down below and checked into our git repository).
# This could be generated by our build script.
# ***********************************************************

# DQ (10/18/2010): These are used all over within a line (so don't use start of line anchor).
# (eventually we want tests for consistancy)
FILTER_AUTOCONF_DEFINE = egrep -v "autom4te" | grep -v "~" | grep -v "configure:" | grep AC_DEFINE
release_binary_compatibility_signature = $(shell ${top_srcdir}/scripts/bincompat-sig)
DISTCLEANFILES = rosePublicConfig.h

# DQ (2/22/2016): We can't include directories that ere not configured.
# -d src/frontend/CxxFrontend/EDG/EDG_4.9/misc
# -d src/frontend/CxxFrontend/EDG/EDG_4.9/src/.libs
# -d src/util/Sawyer 

# DQ (2/22/2016): The file genhtml has an error.
#   ERROR: cannot read /export/tmp.schordan1/development/rosework/mainbranch/rose/src/midend/astMatching/matcherlexer.ll
# So we can't process this directory.
# -d src/midend/astMatching/.libs

# DQ (2/22/2016): The file genhtml has an error.
# genhtml: ERROR: cannot read /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.8.3--dq-development-rc-lcov/src/3rdPartyLibraries/POET/poet_yacc.y
# So we can't process this directory.
# -d src/3rdPartyLibraries/POET/.libs 

# Initial result (2/22/2016):
# Overall coverage rate:
#   lines......: 42.7% (377904 of 885133 lines)
#   functions..: 53.0% (100721 of 189865 functions)

########################################################################################################################
# Robb's version of lcov commands, although they should work anywhere.
########################################################################################################################

# We want to snarf up all the *.gcno and *.gcda files in the build tree, but lcov will refuse to recurse into
# subdirectories when the parent directory has no such files, so list the directories explicitly. The sort is
# only so we have some idea of the progress of the long-running command to create lcov.info.
lcov_data_dirs = $(shell find $(top_builddir) -type d |sort)
all: rose_config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
am--refresh: Makefile
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/projects/compass/src/compassSupport/compass_dirs.inc $(top_srcdir)/config/build_rose_paths.Makefile $(top_srcdir)/config/automake_conditional_display_makefile $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign --ignore-deps'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign --ignore-deps \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/projects/compass/src/compassSupport/compass_dirs.inc $(top_srcdir)/config/build_rose_paths.Makefile $(top_srcdir)/config/automake_conditional_display_makefile $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):

rose_config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/rose_config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status rose_config.h
$(srcdir)/rose_config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f rose_config.h stamp-h1
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.4/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.4/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/misc/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.4/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/src/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.4/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/src/disp/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.4/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.4/lib/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.7/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.7/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/misc/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.7/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/src/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.7/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/src/disp/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.7/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.7/lib/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.8/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.8/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/misc/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.8/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/src/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.8/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/src/disp/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.8/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.8/lib/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.9/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.9/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/misc/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.9/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/src/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.9/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/src/disp/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.9/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.9/lib/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.11/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.11/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/misc/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.11/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/src/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.11/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/src/disp/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.11/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.11/lib/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/misc/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/src/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/src/disp/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/EDG_4.12/lib/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
@ROSE_HAS_EDG_SOURCE_TRUE@src/frontend/CxxFrontend/EDG/edgRose/Makefile: $(top_builddir)/config.status $(top_srcdir)/src/frontend/CxxFrontend/EDG/edgRose/Makefile.in
@ROSE_HAS_EDG_SOURCE_TRUE@	cd $(top_builddir) && $(SHELL) ./config.status $@
stamp-h: $(top_builddir)/config.status $(srcdir)/stamp-h.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
projects/compass2/share/xml/compass_parameters.xml: $(top_builddir)/config.status $(top_srcdir)/projects/compass2/share/xml/compass_parameters.xml.in
	cd $(top_builddir) && $(SHELL) ./config.status $@

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool config.lt
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pkgincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pkgincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(pkgincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(pkgincludedir)" || exit $$?; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(pkgincludedir)'; $(am__uninstall_files_from_dir)

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscope: cscope.files
	test ! -s cscope.files \
	  || $(CSCOPE) -b -q $(AM_CSCOPEFLAGS) $(CSCOPEFLAGS) -i cscope.files $(CSCOPE_ARGS)
clean-cscope:
	-rm -f cscope.files
cscope.files: clean-cscope cscopelist
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
	-rm -f cscope.out cscope.in.out cscope.po.out cscope.files

distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-hook
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__post_remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
	$(am__post_remove_distdir)

dist-lzip: distdir
	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz
	$(am__post_remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz
	$(am__post_remove_distdir)

dist-tarZ: distdir
	@echo WARNING: "Support for distribution archives compressed with" \
		       "legacy program 'compress' is deprecated." >&2
	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__post_remove_distdir)

dist-shar: distdir
	@echo WARNING: "Support for shar distribution archives is" \
	               "deprecated." >&2
	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__post_remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__post_remove_distdir)

dist dist-all:
	$(MAKE) $(AM_MAKEFLAGS) $(DIST_TARGETS) am__post_remove_distdir='@:'
	$(am__post_remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lz*) \
	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir)
	chmod u+w $(distdir)
	mkdir $(distdir)/_build $(distdir)/_build/sub $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build/sub \
	  && ../../configure \
	    $(AM_DISTCHECK_CONFIGURE_FLAGS) \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	    --srcdir=../.. --prefix="$$dc_install_base" \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__post_remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@test -n '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: trying to run $@ with an empty' \
	       '$$(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	$(am__cd) '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: cannot chdir into $(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	test `$(am__distuninstallcheck_listfiles) | wc -l` -eq 0 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile $(HEADERS) rose_config.h
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(pkgincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-hdr \
	distclean-libtool distclean-local distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am: install-data-local install-pkgincludeHEADERS

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-exec-local

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-local uninstall-pkgincludeHEADERS

.MAKE: $(am__recursive_targets) all check-am install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am \
	am--refresh check check-am check-local clean clean-cscope \
	clean-generic clean-libtool clean-local cscope cscopelist-am \
	ctags ctags-am dist dist-all dist-bzip2 dist-gzip dist-hook \
	dist-lzip dist-shar dist-tarZ dist-xz dist-zip distcheck \
	distclean distclean-generic distclean-hdr distclean-libtool \
	distclean-local distclean-tags distcleancheck distdir \
	distuninstallcheck dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am \
	install-data-local install-dvi install-dvi-am install-exec \
	install-exec-am install-exec-local install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-pkgincludeHEADERS \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-local uninstall-pkgincludeHEADERS

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)

# Temporary workaround for lack of AM_EXTRA_RECURSIVE_TARGETS in automake 1.11 and 1.12 [Matzke, 2016-09-14]
# The check for "." is because $ROSE/tests adds "." to SUBDIRS which would otherwise result in infinite recursion.
# The checks for other names are because we don't want to recurse into some directories that don't include this
# file and therefore don't have this rule (but that means these names can't be test subdirecties elsewhere either).
check-smoke check-nonsmoke check-all:
	@for subdir in $(SUBDIRS); do						\
		if [ "$$subdir" != .						\
			-a "$$subdir" != libltdl				\
			-a "$$subdir" != config					\
			-a "$$subdir" != EDG					\
			-a "$$subdir" != DLX					\
			-a "$$subdir" != MFB					\
			-a "$$subdir" != MDCG					\
			-a "$$subdir" != KLT					\
			-a "$$subdir" != 3rdPartyLibraries			\
			-a "$$subdir" != roseHPCToolkit				\
			-a "$$subdir" != projects				\
			-a "$$subdir" != docs					\
			-a "$$subdir" != tools ]; then				\
			echo "Making $@ in $$subdir";				\
			$(MAKE) $(AM_MAKEFLAGS) -C "$$subdir" $@ || exit 1;	\
		fi;								\
	done
	$(MAKE) $(AM_MAKEFLAGS) $@-local

check-smoke-local check-nonsmoke-local:
check-all-local: check-smoke-local check-nonsmoke-local

# Temporary until Jenkins and the Matrix are fixed to run "make check-all" isntead of "make check".  The correct version
# should be that check-local depends only on check-smoke-local. [Matzke, 2016-09-21].
check-local: check-smoke-local check-nonsmoke-local

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: check-smoke check-nonsmoke check-all check-smoke-local check-nonsmoke-local check-all-local clean-test-targets

# DQ (2/6/2017): Added test to detect if the default mode of the C++ frontend compiler for rOSE is C++11 or not.
# Ultimately we want this test to only apply to the GNU 4.8 compiler in C++11 mode (which can have internal errors 
# in compiling the C++ code represented by some more complex C++ test codes using ROSE).  Interestingly, the
# GNU 4.8 C++11 mode works fine for the C++ code that implements ROSE itself.
# if ROSE_USING_GCC_VERSION_4_8_CXX11
#check-local:
# all: remove_sage3basic_h_pch
# all:
#	@echo "**********************************************************************************************"
#	@echo "**********************************************************************************************"
#	@echo "Skipping tests in tutorial, exampleTranslators, docs, tools, scripts, and demo directories for"
#	@echo "GNU 4.8.x using C++11 mode (GNU 4.8 compiler has internal errors when using the C++11 mode)."
#	@echo "**********************************************************************************************"
#	@echo "**********************************************************************************************"

@ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_INSURE_FALSE@@ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE@ # If we can't process the tutorial directory then we can't generate example translators or the documentation
@ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@@ROSE_USE_CLANG_FRONTEND_FALSE@@ROSE_USE_INSURE_FALSE@@ROSE_USING_GCC_VERSION_4_8_CXX11_FALSE@ # If we can't process the tutorial directory then we can't run demos

all: remove_sage3basic_h_pch

core:
	$(MAKE) -C $(top_builddir)/src
	$(MAKE) -C $(top_builddir)/tools
	$(MAKE) -C $(top_builddir)/exampleTranslators
@ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@	$(MAKE) -C $(top_builddir)/tutorial

install-core: core rosePublicConfig.h
	$(MAKE) install-data-local
	$(MAKE) install -C $(top_builddir)/src
	$(MAKE) install -C $(top_builddir)/tools
	$(MAKE) install -C $(top_builddir)/exampleTranslators
	$(MAKE) install -C $(top_builddir)/projects/autoParallelization
	$(MAKE) install -C $(top_builddir)/projects/ArithmeticMeasureTool
	$(MAKE) install -C $(top_builddir)/projects/xgenTranslator
@ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@	$(MAKE) install -C $(top_builddir)/tutorial
	cp rosePublicConfig.h $(pkgincludedir)

install-compass: install-core
	$(MAKE) -C $(top_builddir)/projects/compass
	$(MAKE) install -C $(top_builddir)/projects/compass

# Install ONLY the library components (no examples, no tests, no projects). This is even more "core" than "core" but I'm
# not changing "install-core" because users use that and expect certain behavior. The purpose of this target is mainly for
# ROSE project developers that have a need to install the library and other specific tools (via other install targets) but
# don't want to install anything (perhaps because it doesn't compile). [Robb Matzke, 2016-03-07]
install-rose-library: install-data-local
	$(MAKE) -C $(top_builddir)/src install
	cp rosePublicConfig.h $(pkgincludedir)

# DQ (10/2/10): Of course this will over-rise the "make install" rule, so we can't 
# allow exactly this (what was I thinking?). Commented out until I get a better fix.
# DQ (9/29/2010): Next three lines are a modification suggested by Scott Warren to 
# support Eclipse.  Supports Eclipse feature called "makefile project with existing code" 
# which wants to have a single target to force the build.
#.PHONY: all-install

#all-install: all install

#install: all

remove_sage3basic_h_pch:
	touch $(top_builddir)/src/frontend/SageIII/sage3basic.h.pch
	rm    $(top_builddir)/src/frontend/SageIII/sage3basic.h.pch

# These are policies that we'd like to enforce for ROSE developers.  Things like:
#    1. source files should not use CR+LF line termination common on Windows platforms
#    2. header files should not include certain ROSE headers like "rose.h"
#    3. file names must be unique on a case-insensitive file system
#    4. header files must not have names that conflict with headers in other directories
#    5. etc.
# DO NOT DISABLE without first checking with a ROSE core developer
export prefix	# for use by policy scripts
enforce_policies:
	(cd $(top_srcdir) && ./scripts/policies-checker.sh)

# Most checks in ROSE are named "check-whatever", so do the same for policy checking
.PHONY: check-policies
check-policies: enforce_policies
.PHONY: cleanSig
cleanSig:
	rm -rf bincompat-sig
bincompat-sig: cleanSig
	$(srcdir)/scripts/edg-generate-sig > $@

# At some point we want to put tals into the distribution (likely just PDF files, but not yet).
# ROSE_Talks

# clean-local explanation:
# Remove template repositories.  No source code is compiled, but configuration
#   tests may have created template repositories here.
clean-local:
	rm -rf Templates.DB ii_files ti_files *.csv

# Not sure if this should be part of the clean-local rule.
# chmod -R +rwx rose-0.9.5a; rm -rf rose-0.9.5a

# DQ (9/8/2006): Modified to remove backend specific header files
uninstall-local:
#	rm -rf $(DESTDIR)$(includedir)/*_HEADERS
	rm -rf `find $(DESTDIR)$(includedir)/ -iname "*_HEADERS"`

distclean-local:
	-rm -rf $(top_builddir)/include-staging/

# This file supports the generation of rose_paths.C
# DQ (4/5/2009): Changed the generated file from a C file to a C++ file, so that it
# would be more consistant with the rest of C++ and work better with MSVC.
src/util/rose_paths.C: Makefile
	@@true > src/util/rose_paths.C
	@@echo "#include <string>" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* Use the same header file to declare these variables as is used to reference them so that they will be globally available (and not local). */" >> src/util/rose_paths.C
	@@echo "#include \"rose_paths.h\"" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* These paths will be absolute or relative depending on how the configure script is called (called with an absolute or relative path). */" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_GFORTRAN_PATH          = \"@GFORTRAN_PATH@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_TOP_SRCDIR    = \"`cd @top_srcdir@; pwd`\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_TOP_BUILDDIR  = \"@top_pwd@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_PREFIX        = \"@prefix@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_DATADIR       = \"@datadir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_BINDIR        = \"@bindir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_INCLUDEDIR    = \"@includedir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_INFODIR       = \"@infodir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_LIBDIR        = \"@libdir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_LIBEXECDIR    = \"@libexecdir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_LOCALSTATEDIR = \"@localstatedir@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_MANDIR        = \"@mandir@\";" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* This will always be an absolute path, while paths above are dependent on how the configure script is called (called with an absolute or relative path). */" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_ABSOLUTE_PATH_TOP_SRCDIR = \"@absolute_path_srcdir@\";" >> src/util/rose_paths.C
	@@echo "" >> src/util/rose_paths.C
	@@echo "/* Additional interesting data to provide. */" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_CONFIGURE_DATE     = \"@configure_date@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_BUILD_OS  = \"@build_os@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_AUTOMAKE_BUILD_CPU = \"@build_cpu@\";" >> src/util/rose_paths.C
	@@echo "const std::string ROSE_OFP_VERSION_STRING = \"@ROSE_OFP_VERSION_NUMBER@\";" >> src/util/rose_paths.C

	@@echo "" >> src/util/rose_paths.C
#	@@echo "/* Define the location of the Compass tool within ROSE */" >> src/util/rose_paths.C
#	@@echo "const char COMPASS_SOURCE_DIRECTORY = \"@absolute_path_srcdir@/projects/compass\";" >> src/util/rose_paths.C
#	@@echo "" >> src/util/rose_paths.C

#       Numeric form of ROSE version as documented in rose_paths.h. See that documentation before changing this command!
	@@echo "@PACKAGE_VERSION@" |\
	    tr -c 0-9 . |\
	    tr -s . |\
	    awk -F. '{printf "const unsigned long ROSE_NUMERIC_VERSION = %03d%03d%03dul;\n", $$1, $$2, $$3}' |\
	    sed 's/= 0*/= /' >> src/util/rose_paths.C

# DQ (4/5/2009): This rule is not called when compiling this directory, it is only
# called when compiling the /src/util directory (perhaps it should be located in 
# that directory's Makefile.am.
# DQ (12/3/2007): Added rose_paths.h so that it would be copied to the install tree.
# JJW (8/25/2008): Changed to a .c file

check-local: enforce_policies
	@echo '************************************************************'
	@echo '****** make check rule complete (terminated normally) ******'
	@echo '************************************************************'

install-exec-local:
	@echo '*****************************************************************'
	@echo '***** make install-exec rule complete (terminated normally) *****'
	@echo '*****************************************************************'

install-data-local: uninstall-local
	-mkdir -p $(DESTDIR)$(includedir)
#	DQ (11/1/2011): The EDG 4.x support does not require a separate include-staging directory.
#	if !ROSE_USE_NEW_EDG_INTERFACE
	mkdir -p "$(DESTDIR)$(includedir)/edg"
	cp -R $(top_builddir)/include-staging/* "$(DESTDIR)$(includedir)/edg"
#	endif
	@echo '*****************************************************************'
	@echo '***** make install-data rule complete (terminated normally) *****'
	@echo '*****************************************************************'

# DQ (4/22/2005): To make clear when binaries are in the distribution as 
# opposed to EDG source code we rename the final generated distribution.
# JJW (8/3/2008): This is only used for source distributions now --
# source_with_binary_edg_dist does its own renaming
rename_distribution:
	new_name="$(distdir)-source-with-EDG-source.tar.gz"; \
	cp $(distdir).tar.gz $$new_name

dist-hook:
	builddir="$$(pwd)" &&                                                      \
  (                                                                          \
  [ -e "$(srcdir)"/.git ] &&                                                 \
  cd $(srcdir) &&                                                            \
      git_head="$$(git rev-parse HEAD)" &&                                   \
      git_head_date="$$(git log -1 --format=%at $$(git rev-parse HEAD))" &&  \
          echo "$$git_head $$git_head_date" > $${builddir}/VERSION &&        \
          cp $${builddir}/VERSION $${builddir}/$(distdir)/VERSION            \
  ) ||                                                                       \
  (                                                                          \
  VERSION_FILE="$(srcdir)/VERSION" &&                                        \
  [ -e "$$VERSION_FILE" ] &&                                                 \
      cp "$$VERSION_FILE" $${builddir}/$(distdir)/VERSION                    \
  ) ||                                                                       \
  (                                                                          \
      echo "Error: could not determine SCM version information." &&          \
      exit 1                                                                 \
  ) ||                                                                       \
  exit 1

# Automake hook-ish rule to be run after dist rule (but hook runs before gzip so we can't use hook)
# We could build our own ROSE specific wrapper for dist and distcheck.
dist-after:
	@echo "Running dist hook rule ..."
	@$(MAKE) rename_distribution

# hook rule to be run after distcheck rule
distcheck-after:
	@echo "Running distcheck hook rule ..."
	@$(MAKE) rename_distribution

find_rose_lock_files:
#	du -a | grep rose_performance_report_lockfile
	find . -name rose_performance_report_lockfile -print

# New rule to simplify generation of documentation (we want to avoid using the
# automake generated "docs" rule because the generation of documentation is
# dependent upon separate tools which the user might not have available
# (true for bothe the LaTeX and html documentation).
# DQ (7/23/2004): Since there is a "docs" subdirectory we need to force the build!
FORCE_DOCS_TO_BE_MADE:

# DQ (7/25/2008): Running "make docs" introduces dependences that are inappropriate
# for a distribution.
# Liao (9/26/2013) We no longer support haskellport as part of the migration to EDG 4.x based ROSE
#	   $(MAKE) -Cprojects/haskellport docs && 
docs: FORCE_DOCS_TO_BE_MADE
	@if [ -f $(top_srcdir)/src/midend/midend.docs ]; then \
	   echo "    Generate all possible documentation cd docs; make documentation;"; \
	   $(MAKE) -Ctutorial docs && \
           $(MAKE) -Ctests/nonsmoke/functional/testSupport check && \
	   $(MAKE) -Ctests/nonsmoke/functional/roseTests/astInterfaceTests check && \
	   $(MAKE) -Ctests/nonsmoke/functional/roseTests/ompLoweringTests check && \
	   $(MAKE) -Ctests/nonsmoke/functional/CompileTests/UPC_tests check && \
	   $(MAKE) -Cprojects/UpcTranslation/tests check && \
	   $(MAKE) -Cprojects/autoParallelization/tests check && \
	   $(MAKE) -Cdocs docs && \
	   $(MAKE) -C$(compass_build_tooldir)/compass docs; \
	else \
	   echo "Please look at the ROSE web site for documentation (www.roseCompiler.org)"; \
	fi

# 1
# This rule generates the simple binary tarball for the directories: EDG and EDG_SAGE_Connection
@ROSE_HAS_EDG_SOURCE_TRUE@binary_edg_tarball: 
@ROSE_HAS_EDG_SOURCE_TRUE@	$(MAKE) -C src/frontend/CxxFrontend binary_edg_tarball

@ROSE_HAS_EDG_SOURCE_TRUE@upload_edg_binary:
@ROSE_HAS_EDG_SOURCE_TRUE@	$(MAKE) -C src/frontend/CxxFrontend upload_edg_binary

# Makefile rule to test the Hudson runTest script (used for all Hudson tests).
# Note that empty ROSE_TEST_BUILD_STYLE maps to a minimal build.
testHudsonRunScript:
	export ROSE_TEST_BUILD_SKIP_BUILD_SCRIPT=yes; \
   export ROSE_TEST_GCC_VERSION=4.2.4; \
   export ROSE_TEST_BUILD_STYLE=; \
   export ROSE_TEST_BOOST_PATH=${MY_BOOST_ROOT}; \
   export ROSE_TEST_JAVA_PATH=${JAVA_PATH}; \
   cd $(top_srcdir); \
   $(top_srcdir)/scripts/hudson/runTest

# This will cause the Hudson environment to be dumped to a file so that
# it can be sourced to reproduce the environment required to run tests
# in the hudson tmp directories as part of debugging.
dumpHudsonEnv:
	export ROSE_DUMP_HUDSON_ENV=yes; $(MAKE) testHudsonRunScript

# $(top_srcdir)/scripts/hudson/testHudsonRunScript.sh;

# DQ (12/16/2009): Added interesting "git" feature by Liao.
# It is unclear if it is very meaningful since it represents 
# individual work style more than anything else (but it's fun).
CheckinCounts:
	@echo "*****************************************************"
	@echo "Generated list of checkins to ROSE sumarized by user."
	@echo "*****************************************************"
	cd $(top_srcdir); git shortlog -s -n
	@echo "*****************************************************"

# This rule is useful for identifing source files where "rose_config.h" should be included.
FindFileRequiringRoseConfigHeaderShort:
#	grep "#define" rose_config.h | cut --delimiter=" " -f 2 
#	@list=`grep \"\#define\" rose_config.h | cut --delimiter=" " -f 2`; for f in $$list; do 
#	list=`ls -l | cut --delimiter=" " -f 2`; for f in $$list; do
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/src/* | grep "\.h:" | cut --delimiter=":" -f 1; \
   done

# This rule is useful for identifing header files where "rose_config.h" is required and 
# thus should be fixed to not require this file. In the case of #undef it is represented 
# as "/* #undef" so we have to detect and remove the "/* " using sed.
# And ignore the macro definitions for "const|error_t|inline|off_t|size_t".
FindFileRequiringRoseConfigHeaderLong:
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/* | grep "\.h:"; \
   done

FindFileRequiringRoseConfigSourceLong:
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/* | grep "\.C:"; \
   done

FindFileRequiringRoseConfigSourceAndHeadersLong:
	list=`egrep "#define|\/* #undef" rose_config.h | sed 's/\/\* //g' | egrep -v "const|error_t|inline|off_t|size_t" | cut --delimiter=" " -f 2`; \
   for f in $$list; do \
        echo "Searching for -->$$f<-- macro"; \
        grep -r $$f $(top_srcdir)/src/* | egrep "\.C:|\.h:"; \
   done
NumberOfMakefiles:
	@echo "Number of Makefile.am files in root directory: "
	@du -a $(srcdir) | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in src directory: "
	@du -a $(srcdir)/src | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in projects directory: "
	@du -a $(srcdir)/projects | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in tests directory: "
	@du -a $(srcdir)/tests | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in exampleTranslators directory: "
	@du -a $(srcdir)/exampleTranslators | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in tutorial directory: "
	@du -a $(srcdir)/tutorial | $(FILTER_MAKEFILES)| wc -l
	@echo "Number of Makefile.am files in docs directory: "
	@du -a $(srcdir)/docs | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in demo directory: "
	@du -a $(srcdir)/demo | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in tools directory: "
	@du -a $(srcdir)/tools | $(FILTER_MAKEFILES) | wc -l
	@echo "Number of Makefile.am files in config directory: "
	@du -a $(srcdir)/config | $(FILTER_MAKEFILES) | wc -l
NameOfAutomakeConditionals:
#	grep -r "^AM_CONDITIONAL" $(top_srcdir) | $(FILTER_AUTOMAKE_CONDITONALS)
#	grep "_TRUE@" $(top_srcdir)/Makefile.in | grep "@" | cut --delimiter="@" -f 2 | sed s/_TRUE//g | sort --unique | grep -v "top_srcdir"
	list=`grep "_TRUE@" $(top_srcdir)/Makefile.in | grep "@" | cut --delimiter="@" -f 2 | sed 's/_TRUE//g' | sort --unique | grep -v "top_srcdir"`; \
   rm -f $(TEST_FILE); \
   touch $(TEST_FILE); \
   echo "automake_conditional_display:" >> $(TEST_FILE); \
   for f in $$list; do \
        echo "Processing -->$$f<-- macro"; \
        echo "if $$f" >> $(TEST_FILE); \
        echo -e "\t@echo \"Automake conditional $$f: DEFINED\"" >> $(TEST_FILE); \
        echo "else" >> $(TEST_FILE); \
        echo -e "\t@echo \"Automake conditional $$f: NOT defined\"" >> $(TEST_FILE); \
        echo "endif" >> $(TEST_FILE); \
   done
#	This can't be run since it can't be processed through automake and autoconf.
#	$(MAKE) -f $(TEST_FILE) automake_conditional_display

# This is a test of the new make rule added in the file $(TEST_FILE).
testNameOfAutomakeConditionals:
	@echo "*************************************************************************"
	@echo "Testing makefile rule automake_conditional_display in file: $(TEST_FILE)."
	@echo "*************************************************************************"
	$(MAKE) automake_conditional_display
automake_conditional_display:
@AMDEP_TRUE@	@echo "Automake conditional AMDEP: DEFINED"
@AMDEP_FALSE@	@echo "Automake conditional AMDEP: NOT defined"
@am__fastdepCC_TRUE@	@echo "Automake conditional am__fastdepCC: DEFINED"
@am__fastdepCC_FALSE@	@echo "Automake conditional am__fastdepCC: NOT defined"
@am__fastdepCXX_TRUE@	@echo "Automake conditional am__fastdepCXX: DEFINED"
@am__fastdepCXX_FALSE@	@echo "Automake conditional am__fastdepCXX: NOT defined"
@AXXPXX_SPECIFIC_TESTS_TRUE@	@echo "Automake conditional AXXPXX_SPECIFIC_TESTS: DEFINED"
@AXXPXX_SPECIFIC_TESTS_FALSE@	@echo "Automake conditional AXXPXX_SPECIFIC_TESTS: NOT defined"
@BINARY_EDG_TARBALL_ENABLED_TRUE@	@echo "Automake conditional BINARY_EDG_TARBALL_ENABLED: DEFINED"
@BINARY_EDG_TARBALL_ENABLED_FALSE@	@echo "Automake conditional BINARY_EDG_TARBALL_ENABLED: NOT defined"
@CONVENIENCE_LTDL_TRUE@	@echo "Automake conditional CONVENIENCE_LTDL: DEFINED"
@CONVENIENCE_LTDL_FALSE@	@echo "Automake conditional CONVENIENCE_LTDL: NOT defined"
@DOT_TO_GML_TRANSLATOR_TRUE@	@echo "Automake conditional DOT_TO_GML_TRANSLATOR: DEFINED"
@DOT_TO_GML_TRANSLATOR_FALSE@	@echo "Automake conditional DOT_TO_GML_TRANSLATOR: NOT defined"
@ENABLE_JAVAPORT_TRUE@	@echo "Automake conditional ENABLE_JAVAPORT: DEFINED"
@ENABLE_JAVAPORT_FALSE@	@echo "Automake conditional ENABLE_JAVAPORT: NOT defined"
@ROSE_HAVE_LIBYICES_TRUE@	@echo "Automake conditional ROSE_HAVE_LIBYICES: DEFINED"
@ROSE_HAVE_LIBYICES_FALSE@	@echo "Automake conditional ROSE_HAVE_LIBYICES: NOT defined"
@ROSE_HAVE_YICES_TRUE@	@echo "Automake conditional ROSE_HAVE_YICES: DEFINED"
@ROSE_HAVE_YICES_FALSE@	@echo "Automake conditional ROSE_HAVE_YICES: NOT defined"
@INSTALL_LTDL_TRUE@	@echo "Automake conditional INSTALL_LTDL: DEFINED"
@INSTALL_LTDL_FALSE@	@echo "Automake conditional INSTALL_LTDL: NOT defined"
@OLD_COMPILER_VERSION_TRUE@	@echo "Automake conditional OLD_COMPILER_VERSION: DEFINED"
@OLD_COMPILER_VERSION_FALSE@	@echo "Automake conditional OLD_COMPILER_VERSION: NOT defined"
@OS_32BIT_TRUE@	@echo "Automake conditional OS_32BIT: DEFINED"
@OS_32BIT_FALSE@	@echo "Automake conditional OS_32BIT: NOT defined"
@OS_64BIT_TRUE@	@echo "Automake conditional OS_64BIT: DEFINED"
@OS_64BIT_FALSE@	@echo "Automake conditional OS_64BIT: NOT defined"
@OS_LINUX_TRUE@	@echo "Automake conditional OS_LINUX: DEFINED"
@OS_LINUX_FALSE@	@echo "Automake conditional OS_LINUX: NOT defined"
@OS_MACOSX_TRUE@	@echo "Automake conditional OS_MACOSX: DEFINED"
@OS_MACOSX_FALSE@	@echo "Automake conditional OS_MACOSX: NOT defined"
@OS_MINGW_TRUE@	@echo "Automake conditional OS_MINGW: DEFINED"
@OS_MINGW_FALSE@	@echo "Automake conditional OS_MINGW: NOT defined"
@OS_MSDOS_TRUE@	@echo "Automake conditional OS_MSDOS: DEFINED"
@OS_MSDOS_FALSE@	@echo "Automake conditional OS_MSDOS: NOT defined"
@OS_VENDOR_APPLE_TRUE@	@echo "Automake conditional OS_VENDOR_APPLE: DEFINED"
@OS_VENDOR_APPLE_FALSE@	@echo "Automake conditional OS_VENDOR_APPLE: NOT defined"
@OS_VENDOR_CENTOS_TRUE@	@echo "Automake conditional OS_VENDOR_CENTOS: DEFINED"
@OS_VENDOR_CENTOS_FALSE@	@echo "Automake conditional OS_VENDOR_CENTOS: NOT defined"
@OS_VENDOR_DEBIAN_TRUE@	@echo "Automake conditional OS_VENDOR_DEBIAN: DEFINED"
@OS_VENDOR_DEBIAN_FALSE@	@echo "Automake conditional OS_VENDOR_DEBIAN: NOT defined"
@OS_VENDOR_REDHAT_TRUE@	@echo "Automake conditional OS_VENDOR_REDHAT: DEFINED"
@OS_VENDOR_REDHAT_FALSE@	@echo "Automake conditional OS_VENDOR_REDHAT: NOT defined"
@OS_VENDOR_REDHAT_32BIT_TRUE@	@echo "Automake conditional OS_VENDOR_REDHAT_32BIT: DEFINED"
@OS_VENDOR_REDHAT_32BIT_FALSE@	@echo "Automake conditional OS_VENDOR_REDHAT_32BIT: NOT defined"
@OS_VENDOR_UBUNTU_TRUE@	@echo "Automake conditional OS_VENDOR_UBUNTU: DEFINED"
@OS_VENDOR_UBUNTU_FALSE@	@echo "Automake conditional OS_VENDOR_UBUNTU: NOT defined"
@QROSE_USE_MINGW32_TRUE@	@echo "Automake conditional QROSE_USE_MINGW32: DEFINED"
@QROSE_USE_MINGW32_FALSE@	@echo "Automake conditional QROSE_USE_MINGW32: NOT defined"
@QROSE_USE_WINDOWS_TRUE@	@echo "Automake conditional QROSE_USE_WINDOWS: DEFINED"
@QROSE_USE_WINDOWS_FALSE@	@echo "Automake conditional QROSE_USE_WINDOWS: NOT defined"
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_BINARY_ANALYSIS_SUPPORT: DEFINED"
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_BINARY_ANALYSIS_SUPPORT: NOT defined"
@ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_C_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_C_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_CXX_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_CXX_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_JAVA_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_JAVA_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_OS_IS_CYGWIN_TRUE@	@echo "Automake conditional ROSE_BUILD_OS_IS_CYGWIN: DEFINED"
@ROSE_BUILD_OS_IS_CYGWIN_FALSE@	@echo "Automake conditional ROSE_BUILD_OS_IS_CYGWIN: NOT defined"
@ROSE_BUILD_OS_IS_OSX_TRUE@	@echo "Automake conditional ROSE_BUILD_OS_IS_OSX: DEFINED"
@ROSE_BUILD_OS_IS_OSX_FALSE@	@echo "Automake conditional ROSE_BUILD_OS_IS_OSX: NOT defined"
@ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_PHP_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_PHP_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT: DEFINED"
@ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT: NOT defined"
@ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT: DEFINED"
@ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT: NOT defined"
@ROSE_BUILD_ROSEHPCT_TRUE@	@echo "Automake conditional ROSE_BUILD_ROSEHPCT: DEFINED"
@ROSE_BUILD_ROSEHPCT_FALSE@	@echo "Automake conditional ROSE_BUILD_ROSEHPCT: NOT defined"
@ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_TESTS_DIRECTORY_SUPPORT: DEFINED"
@ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_TESTS_DIRECTORY_SUPPORT: NOT defined"
@ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@	@echo "Automake conditional ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT: DEFINED"
@ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE@	@echo "Automake conditional ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT: NOT defined"
@ROSE_HAS_EDG_SOURCE_TRUE@	@echo "Automake conditional ROSE_HAS_EDG_SOURCE: DEFINED"
@ROSE_HAS_EDG_SOURCE_FALSE@	@echo "Automake conditional ROSE_HAS_EDG_SOURCE: NOT defined"
@ROSE_MPI_TRUE@	@echo "Automake conditional ROSE_MPI: DEFINED"
@ROSE_MPI_FALSE@	@echo "Automake conditional ROSE_MPI: NOT defined"
@ROSE_OFP_CONTAINS_JAVA_FILE_TRUE@	@echo "Automake conditional ROSE_OFP_CONTAINS_JAVA_FILE: DEFINED"
@ROSE_OFP_CONTAINS_JAVA_FILE_FALSE@	@echo "Automake conditional ROSE_OFP_CONTAINS_JAVA_FILE: NOT defined"
@ROSE_PCH_TRUE@	@echo "Automake conditional ROSE_PCH: DEFINED"
@ROSE_PCH_FALSE@	@echo "Automake conditional ROSE_PCH: NOT defined"
@ROSE_USE_BDDBDDB_TRUE@	@echo "Automake conditional ROSE_USE_BDDBDDB: DEFINED"
@ROSE_USE_BDDBDDB_FALSE@	@echo "Automake conditional ROSE_USE_BDDBDDB: NOT defined"
@ROSE_USE_BINARYCONTEXTLOOKUP_TRUE@	@echo "Automake conditional ROSE_USE_BINARYCONTEXTLOOKUP: DEFINED"
@ROSE_USE_BINARYCONTEXTLOOKUP_FALSE@	@echo "Automake conditional ROSE_USE_BINARYCONTEXTLOOKUP: NOT defined"
@ROSE_USE_BOOST_WAVE_TRUE@	@echo "Automake conditional ROSE_USE_BOOST_WAVE: DEFINED"
@ROSE_USE_BOOST_WAVE_FALSE@	@echo "Automake conditional ROSE_USE_BOOST_WAVE: NOT defined"
@ROSE_HAVE_LIBDWARF_TRUE@	@echo "Automake conditional ROSE_HAVE_LIBDWARF: DEFINED"
@ROSE_HAVE_LIBDWARF_FALSE@	@echo "Automake conditional ROSE_HAVE_LIBDWARF: NOT defined"
@ROSE_USE_ETHER_TRUE@	@echo "Automake conditional ROSE_USE_ETHER: DEFINED"
@ROSE_USE_ETHER_FALSE@	@echo "Automake conditional ROSE_USE_ETHER: NOT defined"
@ROSE_USE_GCC_OMP_TRUE@	@echo "Automake conditional ROSE_USE_GCC_OMP: DEFINED"
@ROSE_USE_GCC_OMP_FALSE@	@echo "Automake conditional ROSE_USE_GCC_OMP: NOT defined"
@ROSE_USE_GRAPHVIZ_DOT_TRUE@	@echo "Automake conditional ROSE_USE_GRAPHVIZ_DOT: DEFINED"
@ROSE_USE_GRAPHVIZ_DOT_FALSE@	@echo "Automake conditional ROSE_USE_GRAPHVIZ_DOT: NOT defined"
@ROSE_USE_IDA_TRUE@	@echo "Automake conditional ROSE_USE_IDA: DEFINED"
@ROSE_USE_IDA_FALSE@	@echo "Automake conditional ROSE_USE_IDA: NOT defined"
@ROSE_USE_INDENT_TRUE@	@echo "Automake conditional ROSE_USE_INDENT: DEFINED"
@ROSE_USE_INDENT_FALSE@	@echo "Automake conditional ROSE_USE_INDENT: NOT defined"
@ROSE_USE_INTEL_PIN_TRUE@	@echo "Automake conditional ROSE_USE_INTEL_PIN: DEFINED"
@ROSE_USE_INTEL_PIN_FALSE@	@echo "Automake conditional ROSE_USE_INTEL_PIN: NOT defined"
@ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE@	@echo "Automake conditional ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL: DEFINED"
@ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE@	@echo "Automake conditional ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL: NOT defined"
@ROSE_USE_LIBFFI_TRUE@	@echo "Automake conditional ROSE_USE_LIBFFI: DEFINED"
@ROSE_USE_LIBFFI_FALSE@	@echo "Automake conditional ROSE_USE_LIBFFI: NOT defined"
@ROSE_USE_LLVM_TRUE@	@echo "Automake conditional ROSE_USE_LLVM: DEFINED"
@ROSE_USE_LLVM_FALSE@	@echo "Automake conditional ROSE_USE_LLVM: NOT defined"
@ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE@	@echo "Automake conditional ROSE_USE_LONG_MAKE_CHECK_RULE: DEFINED"
@ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE@	@echo "Automake conditional ROSE_USE_LONG_MAKE_CHECK_RULE: NOT defined"
@ROSE_USE_MAPLE_TRUE@	@echo "Automake conditional ROSE_USE_MAPLE: DEFINED"
@ROSE_USE_MAPLE_FALSE@	@echo "Automake conditional ROSE_USE_MAPLE: NOT defined"
@ROSE_USE_MYSQL_TRUE@	@echo "Automake conditional ROSE_USE_MYSQL: DEFINED"
@ROSE_USE_MYSQL_FALSE@	@echo "Automake conditional ROSE_USE_MYSQL: NOT defined"
@ROSE_USE_OBJDUMP_TRUE@	@echo "Automake conditional ROSE_USE_OBJDUMP: DEFINED"
@ROSE_USE_OBJDUMP_FALSE@	@echo "Automake conditional ROSE_USE_OBJDUMP: NOT defined"
@ROSE_USE_OMNI_OPENMP_TRUE@	@echo "Automake conditional ROSE_USE_OMNI_OPENMP: DEFINED"
@ROSE_USE_OMNI_OPENMP_FALSE@	@echo "Automake conditional ROSE_USE_OMNI_OPENMP: NOT defined"
#if ROSE_USE_OPEN_FORTRAN_PARSER
#	@echo "Automake conditional ROSE_USE_OPEN_FORTRAN_PARSER: DEFINED"
#else
#	@echo "Automake conditional ROSE_USE_OPEN_FORTRAN_PARSER: NOT defined"
#endif
@ROSE_USE_OPENGL_TRUE@	@echo "Automake conditional ROSE_USE_OPENGL: DEFINED"
@ROSE_USE_OPENGL_FALSE@	@echo "Automake conditional ROSE_USE_OPENGL: NOT defined"
@ROSE_USE_PHP_TRUE@	@echo "Automake conditional ROSE_USE_PHP: DEFINED"
@ROSE_USE_PHP_FALSE@	@echo "Automake conditional ROSE_USE_PHP: NOT defined"
@ROSE_USE_PYTHON_TRUE@	@echo "Automake conditional ROSE_USE_PYTHON: DEFINED"
@ROSE_USE_PYTHON_FALSE@	@echo "Automake conditional ROSE_USE_PYTHON: NOT defined"
@ROSE_USE_PPL_TRUE@	@echo "Automake conditional ROSE_USE_PPL: DEFINED"
@ROSE_USE_PPL_FALSE@	@echo "Automake conditional ROSE_USE_PPL: NOT defined"
@ROSE_USE_QROSE_TRUE@	@echo "Automake conditional ROSE_USE_QROSE: DEFINED"
@ROSE_USE_QROSE_FALSE@	@echo "Automake conditional ROSE_USE_QROSE: NOT defined"
@ROSE_USE_QT_TRUE@	@echo "Automake conditional ROSE_USE_QT: DEFINED"
@ROSE_USE_QT_FALSE@	@echo "Automake conditional ROSE_USE_QT: NOT defined"
@ROSE_USE_RTED_TRUE@	@echo "Automake conditional ROSE_USE_RTED: DEFINED"
@ROSE_USE_RTED_FALSE@	@echo "Automake conditional ROSE_USE_RTED: NOT defined"
@ROSE_USE_SAT_TRUE@	@echo "Automake conditional ROSE_USE_SAT: DEFINED"
@ROSE_USE_SAT_FALSE@	@echo "Automake conditional ROSE_USE_SAT: NOT defined"
@ROSE_USE_SMALLER_GENERATED_FILES_TRUE@	@echo "Automake conditional ROSE_USE_SMALLER_GENERATED_FILES: DEFINED"
@ROSE_USE_SMALLER_GENERATED_FILES_FALSE@	@echo "Automake conditional ROSE_USE_SMALLER_GENERATED_FILES: NOT defined"
@ROSE_USE_SQLITE_DATABASE_TRUE@	@echo "Automake conditional ROSE_USE_SQLITE_DATABASE: DEFINED"
@ROSE_USE_SQLITE_DATABASE_FALSE@	@echo "Automake conditional ROSE_USE_SQLITE_DATABASE: NOT defined"
@ROSE_USE_SSL_SUPPORT_TRUE@	@echo "Automake conditional ROSE_USE_SSL_SUPPORT: DEFINED"
@ROSE_USE_SSL_SUPPORT_FALSE@	@echo "Automake conditional ROSE_USE_SSL_SUPPORT: NOT defined"
@ROSE_USE_TCLSH_TRUE@	@echo "Automake conditional ROSE_USE_TCLSH: DEFINED"
@ROSE_USE_TCLSH_FALSE@	@echo "Automake conditional ROSE_USE_TCLSH: NOT defined"
@ROSE_USE_TEST_SMT_SOLVER_TRUE@	@echo "Automake conditional ROSE_USE_TEST_SMT_SOLVER: DEFINED"
@ROSE_USE_TEST_SMT_SOLVER_FALSE@	@echo "Automake conditional ROSE_USE_TEST_SMT_SOLVER: NOT defined"
@ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE@	@echo "Automake conditional ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT: DEFINED"
@ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE@	@echo "Automake conditional ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT: NOT defined"
@ROSE_USE_VISUALIZATION_TRUE@	@echo "Automake conditional ROSE_USE_VISUALIZATION: DEFINED"
@ROSE_USE_VISUALIZATION_FALSE@	@echo "Automake conditional ROSE_USE_VISUALIZATION: NOT defined"
@ROSE_USE_WGET_TRUE@	@echo "Automake conditional ROSE_USE_WGET: DEFINED"
@ROSE_USE_WGET_FALSE@	@echo "Automake conditional ROSE_USE_WGET: NOT defined"
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@	@echo "Automake conditional ROSE_USE_WINDOWS_ANALYSIS_SUPPORT: DEFINED"
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE@	@echo "Automake conditional ROSE_USE_WINDOWS_ANALYSIS_SUPPORT: NOT defined"
@ROSE_USE_XML_TRUE@	@echo "Automake conditional ROSE_USE_XML: DEFINED"
@ROSE_USE_XML_FALSE@	@echo "Automake conditional ROSE_USE_XML: NOT defined"
@ROSE_USING_BOOST_VERSION_1_35_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_35: DEFINED"
@ROSE_USING_BOOST_VERSION_1_35_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_35: NOT defined"
@ROSE_USING_BOOST_VERSION_1_36_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_36: DEFINED"
@ROSE_USING_BOOST_VERSION_1_36_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_36: NOT defined"
@ROSE_USING_BOOST_VERSION_1_37_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_37: DEFINED"
@ROSE_USING_BOOST_VERSION_1_37_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_37: NOT defined"
@ROSE_USING_BOOST_VERSION_1_38_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_38: DEFINED"
@ROSE_USING_BOOST_VERSION_1_38_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_38: NOT defined"
@ROSE_USING_BOOST_VERSION_1_39_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_39: DEFINED"
@ROSE_USING_BOOST_VERSION_1_39_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_39: NOT defined"
@ROSE_USING_BOOST_VERSION_1_40_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_40: DEFINED"
@ROSE_USING_BOOST_VERSION_1_40_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_40: NOT defined"
@ROSE_USING_BOOST_VERSION_1_41_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_41: DEFINED"
@ROSE_USING_BOOST_VERSION_1_41_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_41: NOT defined"
@ROSE_USING_BOOST_VERSION_1_42_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_42: DEFINED"
@ROSE_USING_BOOST_VERSION_1_42_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_42: NOT defined"
@ROSE_USING_BOOST_VERSION_1_43_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_43: DEFINED"
@ROSE_USING_BOOST_VERSION_1_43_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_43: NOT defined"
@ROSE_USING_BOOST_VERSION_1_44_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_44: DEFINED"
@ROSE_USING_BOOST_VERSION_1_44_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_44: NOT defined"
@ROSE_USING_BOOST_VERSION_1_45_TRUE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_45: DEFINED"
@ROSE_USING_BOOST_VERSION_1_45_FALSE@	@echo "Automake conditional ROSE_USING_BOOST_VERSION_1_45: NOT defined"
@ROSE_USING_GFORTRAN_VERSION_4_0_TRUE@	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_0: DEFINED"
@ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_0: NOT defined"
@ROSE_USING_GFORTRAN_VERSION_4_1_TRUE@	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_1: DEFINED"
@ROSE_USING_GFORTRAN_VERSION_4_1_FALSE@	@echo "Automake conditional ROSE_USING_GFORTRAN_VERSION_4_1: NOT defined"
@ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE@	@echo "Automake conditional ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY: DEFINED"
@ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE@	@echo "Automake conditional ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY: NOT defined"
@ROSE_USING_ROSE_TRUE@	@echo "Automake conditional ROSE_USING_ROSE: DEFINED"
@ROSE_USING_ROSE_FALSE@	@echo "Automake conditional ROSE_USING_ROSE: NOT defined"
@ROSE_USING_ROSE_ANALYSIS_TRUE@	@echo "Automake conditional ROSE_USING_ROSE_ANALYSIS: DEFINED"
@ROSE_USING_ROSE_ANALYSIS_FALSE@	@echo "Automake conditional ROSE_USING_ROSE_ANALYSIS: NOT defined"
@ROSE_USING_ROSE_AST_FILE_IO_TRUE@	@echo "Automake conditional ROSE_USING_ROSE_AST_FILE_IO: DEFINED"
@ROSE_USING_ROSE_AST_FILE_IO_FALSE@	@echo "Automake conditional ROSE_USING_ROSE_AST_FILE_IO: NOT defined"
@ROSE_USING_ROSE_CODE_GENERATION_TRUE@	@echo "Automake conditional ROSE_USING_ROSE_CODE_GENERATION: DEFINED"
@ROSE_USING_ROSE_CODE_GENERATION_FALSE@	@echo "Automake conditional ROSE_USING_ROSE_CODE_GENERATION: NOT defined"
@ROSE_USING_ROSE_TRANSLATOR_TRUE@	@echo "Automake conditional ROSE_USING_ROSE_TRANSLATOR: DEFINED"
@ROSE_USING_ROSE_TRANSLATOR_FALSE@	@echo "Automake conditional ROSE_USING_ROSE_TRANSLATOR: NOT defined"
@ROSE_WITH_ROSEQT_TRUE@	@echo "Automake conditional ROSE_WITH_ROSEQT: DEFINED"
@ROSE_WITH_ROSEQT_FALSE@	@echo "Automake conditional ROSE_WITH_ROSEQT: NOT defined"
@USE_GCJ_TRUE@	@echo "Automake conditional USE_GCJ: DEFINED"
@USE_GCJ_FALSE@	@echo "Automake conditional USE_GCJ: NOT defined"
@USE_HASKELL_TRUE@	@echo "Automake conditional USE_HASKELL: DEFINED"
@USE_HASKELL_FALSE@	@echo "Automake conditional USE_HASKELL: NOT defined"
@USE_CUDA_TRUE@	@echo "Automake conditional USE_CUDA: DEFINED"
@USE_CUDA_FALSE@	@echo "Automake conditional USE_CUDA: NOT defined"
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@	@echo "Automake conditional USE_ROSE_IN_BUILD_TREE_VAR: DEFINED"
@USE_ROSE_IN_BUILD_TREE_VAR_FALSE@	@echo "Automake conditional USE_ROSE_IN_BUILD_TREE_VAR: NOT defined"
@USE_VALGRIND_TRUE@	@echo "Automake conditional USE_VALGRIND: DEFINED"
@USE_VALGRIND_FALSE@	@echo "Automake conditional USE_VALGRIND: NOT defined"
@USING_GNU_COMPILER_TRUE@	@echo "Automake conditional USING_GNU_COMPILER: DEFINED"
@USING_GNU_COMPILER_FALSE@	@echo "Automake conditional USING_GNU_COMPILER: NOT defined"
@USING_INTEL_COMPILER_TRUE@	@echo "Automake conditional USING_INTEL_COMPILER: DEFINED"
@USING_INTEL_COMPILER_FALSE@	@echo "Automake conditional USING_INTEL_COMPILER: NOT defined"
@WITH_GOMP_OPENMP_LIB_TRUE@	@echo "Automake conditional WITH_GOMP_OPENMP_LIB: DEFINED"
@WITH_GOMP_OPENMP_LIB_FALSE@	@echo "Automake conditional WITH_GOMP_OPENMP_LIB: NOT defined"
NameOfAutoconfDefines:
	grep -r "AC_DEFINE" $(top_srcdir) | $(FILTER_AUTOCONF_DEFINE)

# DQ (2/12/2010): Report the areas of ROSE where we have skipped some tests of ROSE 
# either doing analysis, code generation, or translation of the ROSE source code.
ProblemAreas:
	echo "Directories where ROSE does not analyze code for some ROSE source files."
	grep -r ROSE_USING_ROSE_ANALYSIS $(top_srcdir) | grep Makefile.am
	echo "Directories where ROSE does not generate code for some ROSE source files."
	grep -r ROSE_USING_ROSE_CODE_GENERATION $(top_srcdir) | grep Makefile.am
	echo "Directories where ROSE does not translate (compile) code for some ROSE source files."
	grep -r ROSE_USING_ROSE_TRANSLATE $(top_srcdir) | grep Makefile.am
	echo "Directories where ROSE does not properly handled AST File I/O for at least some ROSE source files."
	grep -r ROSE_USING_ROSE_AST_FILE_IO $(top_srcdir) | grep Makefile.am
	echo "Files where ROSE does not analyze some amount of code (test of USE_ROSE in each ROSE source file)."
	grep -rl USE_ROSE $(top_srcdir) | grep "\.C"
	echo "Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_ANALYSIS in each ROSE source file)."
	grep -rl CXX_IS_ROSE_ANALYSIS $(top_srcdir) | grep "\.C"
	echo "Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_CODE_GENERATION"
	echo "in each ROSE source file)."
	grep -rl CXX_IS_ROSE_CODE_GENERATION $(top_srcdir) | grep "\.C"
#	echo "Files where ROSE does not analyze some amount of code (test of CXX_IS_ROSE_TRANSLATOR in each ROSE source file)."
#	grep -rl CXX_IS_ROSE_TRANSLATOR $(top_srcdir) | grep "\.C"

# Report the version number of the ROSE translator built.
PrintRoseTranslatorVersion: $(top_builddir)/tests/nonsmoke/functional/testAnalysis
	$(top_builddir)/tests/nonsmoke/functional/testAnalysis --version

PrintBinaryCompatibilitySignature:
	@echo "release_binary_compatibility_signature = ${release_binary_compatibility_signature}"

# Generate public version of rose_config.h, which is triggered by the AC_CONFIG_COMMANDS macro near the end
# of config/support-rose.m4 whenever config.status runs.
rosePublicConfig.h: rose_config.h
	@echo "  GEN     $@"
	@$(top_srcdir)/scripts/publicConfiguration.pl <$^ >$@

# This file does not exist until we run the compiler to build it.
# include $(top_builddir)/src/frontend/SageIII/astPostProcessing/.libs/astPostProcessing.d

################################################################################
# Makefile specific to Intel codecov process generated *.dyn files 
# generated by Intel's codecov option to the Intel icc and icpc compilers.
################################################################################

# For Intel's code coverage tool (codecov) we need to avoid the *.dyn files from being 
# built across the whole directory structure. So use the -prof-dir option to force them 
# into a single directory to simplify processing.  Then use the profmerge utility to 
# merge them into a single pgopti.dpi file.  Then process the pgopti.dpi file with the 
# codecov utility to generate the HTML file and directory of HTML files).

# configure using:
# --with-C_DEBUG="-g -prof-dir /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-intel-v14--dq-development-rc-code_coverage -prof-gen=srcpos" 
# --with-CXX_DEBUG="-g -prof-dir /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-intel-v14--dq-development-rc-code_coverage -prof-gen=srcpos"
#
# Then run "make -ki -j24 check" to generate all of the *.dyn files.
# Note that "-ki" is required because currently a few test files will demonstrate Intel specific errors.
# Also, the number of *.dyn files will be large (many thousand files) and the diskspace requirements are also large (~200Gig?).
#
# The code coverage results can be see from the CODE_COVERAGE.HTML file in the top level of the build tree.
#

process_codecov_files_part_1:
	profmerge *.dyn

process_codecov_files_part_2:
	codecov -comp ${top_srcdir}/intel_code_coverage_list

process_codecov_files: process_codecov_files_part_1 process_codecov_files_part_2

# All *.dyn files should be in the top level directory.
remove_codecov_files:
	find . -name '*.dyn' -delete

################################################################################
# Makefile specific to lcov comment to process generated *.gcda and *.gcno files 
# generated by GNU's gcov option to the GNU gcc adn g++ compilers.
################################################################################

# lcov command to generate the html files.
lcov:
	lcov --capture \
-d src/util/.libs \
-d src/util/stringSupport/.libs \
-d src/util/commandlineProcessing/.libs \
-d src/util/support/.libs \
-d src/util/graphs/.libs \
-d src/3rdPartyLibraries/MSTL/.libs \
-d src/ROSETTA/src \
-d src/roseExtensions/roseHPCToolkit/src/util/.libs \
-d src/roseExtensions/roseHPCToolkit/src/xml/.libs \
-d src/roseExtensions/roseHPCToolkit/src/profir/.libs \
-d src/roseExtensions/roseHPCToolkit/src/gprof/.libs \
-d src/roseExtensions/roseHPCToolkit/src/xml2profir/.libs \
-d src/roseExtensions/roseHPCToolkit/src/sage/.libs \
-d src/roseExtensions/roseHPCToolkit/src/profir2sage/.libs \
-d src/roseExtensions/roseHPCToolkit/src/.libs \
-d src/roseExtensions/failSafe/.libs \
-d src/frontend/SageIII/.libs \
-d src/frontend/SageIII/astFixup \
-d src/frontend/SageIII/astPostProcessing \
-d src/frontend/SageIII/astFileIO \
-d src/frontend/SageIII/astMerge \
-d src/frontend/SageIII/sageInterface \
-d src/frontend/SageIII/virtualCFG \
-d src/frontend/SageIII/astTokenStream \
-d src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
-d src/frontend/SageIII/astVisualization \
-d src/frontend/SageIII/astFromString \
-d src/frontend/SageIII/includeDirectivesProcessing \
-d src/frontend/SageIII/astFixup/.libs \
-d src/frontend/SageIII/astPostProcessing/.libs \
-d src/frontend/SageIII/astMerge/.libs \
-d src/frontend/SageIII/sageInterface/.libs \
-d src/frontend/SageIII/virtualCFG/.libs \
-d src/frontend/SageIII/astTokenStream/.libs \
-d src/frontend/SageIII/astVisualization/.libs \
-d src/frontend/SageIII/astFromString/.libs \
-d src/frontend/SageIII/includeDirectivesProcessing/.libs \
-d src/frontend/SageIII/sage_support/.libs \
-d src/frontend/MatlabFrontend \
-d src/frontend/CxxFrontend/EDG/EDG_4.7/misc \
-d src/frontend/CxxFrontend/EDG/EDG_4.7/src/.libs \
-d src/frontend/CxxFrontend/EDG/edgRose/.libs \
-d src/frontend/OpenFortranParser_SAGE_Connection/.libs \
-d src/frontend/ECJ_ROSE_Connection/.libs \
-d src/frontend/X10_ROSE_Connection/.libs \
-d src/frontend/PHPFrontend/.libs \
-d src/frontend/BinaryDisassembly/.libs \
-d src/frontend/BinaryLoader/.libs \
-d src/frontend/BinaryFormats/.libs \
-d src/frontend/Disassemblers/.libs \
-d src/frontend/Partitioner2/.libs \
-d src/midend/binaryAnalyses/.libs \
-d src/midend/programAnalysis/.libs \
-d src/midend/programAnalysis/staticSingleAssignment/.libs \
-d src/midend/programAnalysis/ssaUnfilteredCfg/.libs \
-d src/midend/programTransformation/extractFunctionArgumentsNormalization/.libs \
-d src/midend/programTransformation/singleStatementToBlockNormalization/.libs \
-d src/midend/programTransformation/loopProcessing/depInfo/.libs \
-d src/midend/programTransformation/loopProcessing/depGraph/.libs \
-d src/midend/programTransformation/loopProcessing/computation/.libs \
-d src/midend/programTransformation/loopProcessing/outsideInterface/.libs \
-d src/midend/programTransformation/loopProcessing/slicing/.libs \
-d src/midend/programTransformation/loopProcessing/driver/.libs \
-d src/midend/programTransformation/loopProcessing/prepostTransformation/.libs \
-d src/midend/programTransformation/ompLowering/.libs \
-d src/midend/programTransformation/partialRedundancyElimination/.libs \
-d src/midend/programTransformation/finiteDifferencing/.libs \
-d src/midend/programTransformation/functionCallNormalization/.libs \
-d src/midend/programTransformation/constantFolding/.libs \
-d src/midend/programTransformation/implicitCodeGeneration/.libs \
-d src/midend/programTransformation/astInlining/.libs \
-d src/midend/programTransformation/astOutlining/.libs \
-d src/midend/programTransformation/transformationTracking/.libs \
-d src/midend/abstractHandle/.libs \
-d src/midend/abstractLayer/.libs \
-d src/midend/astDiagnostics/.libs \
-d src/midend/abstractMemoryObject/.libs \
-d src/midend/astProcessing/.libs \
-d src/midend/astQuery/.libs \
-d src/midend/astSnippet/.libs \
-d src/midend/astRewriteMechanism/.libs \
-d src/midend/astUtil/annotation/.libs \
-d src/midend/astUtil/astInterface/.libs \
-d src/midend/astUtil/astSupport/.libs \
-d src/midend/astUtil/symbolicVal/.libs \
-d src/backend/.libs \
--output-file coverage.info

# lcov command to generate the html files.
lcov_genhtml: coverage.info
	genhtml --title ROSE --legend --demangle-cpp --prefix $(top_srcdir) --prefix $(top_pwd) --output-directory lcov_output coverage.info

# Capture *.gcda files from the build tree for whatever programs we've happened to run so far. This could be
# the ROSETTA-generator plus any tests, tutorials, and projects.  This can take a long time to run!
all-lcov.info:
	lcov --capture --no-recursion $(patsubst %,-d %,$(lcov_data_dirs)) -o $@

# Capture only coverage for the ROSE library source code (no tests, tutorials, projects, system headers, boost, etc).
# (04/26/2016) Pei-Hung lcov has issue to output extracted result to librose-lcov.info with -o option. Using piping instead.
librose-lcov.info: all-lcov.info
	lcov --extract $< "$(top_srcdir)/src/*" > $@

# Generate a directory containing the HTML representation of the coverage information for the ROSE library proper.
# THIS INCLUDES EDG SOURCES; DO NOT DISTRIBUTE THIS DIRECTORY
librose_lcov_web_pages: librose-lcov.info
	genhtml					\
		--title librose			\
		--legend			\
		--demangle-cpp			\
		--prefix $(top_srcdir)		\
		--ignore-errors=source		\
		--output-directory $@ $<

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
