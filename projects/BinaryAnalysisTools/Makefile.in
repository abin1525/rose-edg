# Makefile.in generated by automake 1.15 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?


VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
	$(am__EXEEXT_4) $(am__EXEEXT_5)

########################################################################################################################
########################################################################################################################
########################################################################################################################
######                                                                                                            ######
######                                         _____           _                                                  ######
######                                        |_   _|__   ___ | |___                                              ######
######                                          | |/ _ \ / _ \| / __|                                             ######
######                                          | | (_) | (_) | \__ \                                             ######
######                                          |_|\___/ \___/|_|___/                                             ######
######                                                                                                            ######
######                                                                                                            ######
########################################################################################################################
########################################################################################################################
########################################################################################################################

#------------------------------------------------------------------------------------------------------------------------
# dump specimen memory to files

#------------------------------------------------------------------------------------------------------------------------
# linear disassembly at specified addresses

#------------------------------------------------------------------------------------------------------------------------
# disassembler using the new partitioner

#------------------------------------------------------------------------------------------------------------------------
# Run specimen natively by single stepping

#------------------------------------------------------------------------------------------------------------------------
# Single-step a process and compare execution addresses with a list of addresses

#------------------------------------------------------------------------------------------------------------------------
# Scans memory for magic numbers

#------------------------------------------------------------------------------------------------------------------------
# Execute instructions

#------------------------------------------------------------------------------------------------------------------------
# Decode encoded strings

#------------------------------------------------------------------------------------------------------------------------
# Find code that cannot be reached according to static analysis

#------------------------------------------------------------------------------------------------------------------------
# Parse and simplify symbolic expressions

#------------------------------------------------------------------------------------------------------------------------
# Generate source code from a binary specimen

#------------------------------------------------------------------------------------------------------------------------
# Generate a program trace and show some properties of it
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__append_1 = dumpMemory \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	linearDisassemble \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	recursiveDisassemble \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	nativeExecutionTrace \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	checkExecutionAddresses \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	magicScanner simulate \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	stringDecoder \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	findDeadCode \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	symbolicSimplifier \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	binaryToSource trace
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__append_2 = detectConstants detectConstants.o

#------------------------------------------------------------------------------------------------------------------------
# Experimental "binary ROSE on-line workbench for specimen exploration"
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@am__append_3 = bROwSE-server
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@am__append_4 = \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/Application.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/FunctionListModel.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/FunctionUtil.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/InstructionListModel.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/Statistics.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WAddressComboBox.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WAddressSpace.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WAssemblyListing.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WBasicBlock.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WBusy.h				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WCrossReferences.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WFunctionCfg.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WFunctionList.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WFunctionNavigation.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WFunctionSummary.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WHexDump.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WHexValueEdit.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WInstructionList.h		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WMagic.h				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WMemoryMap.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WPartitioner.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WSemantics.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WSplash.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WStatus.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WStrings.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WStringDetail.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/WToggleButton.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@        bROwSE/bROwSE.h


#------------------------------------------------------------------------------------------------------------------------
# Generate programs having specific structures (for path testing)

#------------------------------------------------------------------------------------------------------------------------
# Find paths in the CFG
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__append_5 = generatePaths \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	findPath
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__append_6 = \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	PathFinder/PathFinder.h			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	PathFinder/semantics.h


#------------------------------------------------------------------------------------------------------------------------
# find similar functions in two specimens
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@am__append_7 = findSimilarFunctions

#------------------------------------------------------------------------------------------------------------------------
# maximize bijection of two sets

#------------------------------------------------------------------------------------------------------------------------
# debug instruction semantics

#------------------------------------------------------------------------------------------------------------------------
# x86-call-targets

#------------------------------------------------------------------------------------------------------------------------
# x86-function-vas
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__append_8 = maxBijection \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	debugSemantics \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	x86-call-targets \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	x86-function-vas

########################################################################################################################
########################################################################################################################
########################################################################################################################
######                                                                                                            ######
######                                         _____         _                                                    ######
######                                        |_   _|__  ___| |_ ___                                              ######
######                                          | |/ _ \/ __| __/ __|                                             ######
######                                          | |  __/\__ \ |_\__ \                                             ######
######                                          |_|\___||___/\__|___/                                             ######
######                                                                                                            ######
######                                                                                                            ######
########################################################################################################################
########################################################################################################################
########################################################################################################################

# Uses the debugSemantics and a carefully crafted input specimen to test features of RegisterStateGeneric.
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__append_9 = testAdaptiveRegisters.passed
subdir = projects/BinaryAnalysisTools
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/acinclude.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_iostreams.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_serialization.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_compiler_vendor.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_11.m4 \
	$(top_srcdir)/config/ax_cxx_compile_stdcxx_14.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_lib_xerces.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determine-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libtool.m4 $(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/ltargz.m4 $(top_srcdir)/config/ltdl.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/mdl_have_opengl_2014.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-accelerator.m4 \
	$(top_srcdir)/config/support-aterm.m4 \
	$(top_srcdir)/config/support-backend-x10.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-binary.m4 \
	$(top_srcdir)/config/support-blacklist.m4 \
	$(top_srcdir)/config/support-boost.m4 \
	$(top_srcdir)/config/support-clang.m4 \
	$(top_srcdir)/config/support-compass2.m4 \
	$(top_srcdir)/config/support-cuda.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-edg.m4 \
	$(top_srcdir)/config/support-fatal-rose-warnings.m4 \
	$(top_srcdir)/config/support-frontend-x10.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-git-versioning.m4 \
	$(top_srcdir)/config/support-gmp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-isl.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-magic.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-mint.m4 \
	$(top_srcdir)/config/support-mpi.m4 \
	$(top_srcdir)/config/support-ofp.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-pocc.m4 \
	$(top_srcdir)/config/support-projects.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-readline.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sanitizer.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-stratego.m4 \
	$(top_srcdir)/config/support-valgrind.m4 \
	$(top_srcdir)/config/support-vectorization.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-x10.m4 \
	$(top_srcdir)/config/support-yaml.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support-z3.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__pkginclude_HEADERS_DIST) \
	$(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__EXEEXT_1 =  \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	dumpMemory$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	linearDisassemble$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	recursiveDisassemble$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	nativeExecutionTrace$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	checkExecutionAddresses$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	magicScanner$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	simulate$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	stringDecoder$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	findDeadCode$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	symbolicSimplifier$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	binaryToSource$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	trace$(EXEEXT)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@am__EXEEXT_2 = bROwSE-server$(EXEEXT)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__EXEEXT_3 = generatePaths$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	findPath$(EXEEXT)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@am__EXEEXT_4 = findSimilarFunctions$(EXEEXT)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am__EXEEXT_5 = maxBijection$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	debugSemantics$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	x86-call-targets$(EXEEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	x86-function-vas$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"
PROGRAMS = $(bin_PROGRAMS)
am__bROwSE_server_SOURCES_DIST = bROwSE/Application.C bROwSE/bROwSE.C \
	bROwSE/FunctionListModel.C bROwSE/FunctionUtil.C \
	bROwSE/InstructionListModel.C bROwSE/Statistics.C \
	bROwSE/WAddressComboBox.C bROwSE/WAddressSpace.C \
	bROwSE/WAssemblyListing.C bROwSE/WBusy.C \
	bROwSE/WCrossReferences.C bROwSE/WFunctionCfg.C \
	bROwSE/WFunctionList.C bROwSE/WFunctionNavigation.C \
	bROwSE/WFunctionSummary.C bROwSE/WHexDump.C \
	bROwSE/WHexValueEdit.C bROwSE/WInstructionList.C \
	bROwSE/WMagic.C bROwSE/WMemoryMap.C bROwSE/WPartitioner.C \
	bROwSE/WSemantics.C bROwSE/WSplash.C bROwSE/WStatus.C \
	bROwSE/WStringDetail.C bROwSE/WStrings.C \
	bROwSE/WToggleButton.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@am_bROwSE_server_OBJECTS = bROwSE_server-Application.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-bROwSE.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-FunctionListModel.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-FunctionUtil.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-InstructionListModel.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-Statistics.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WAddressComboBox.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WAddressSpace.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WAssemblyListing.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WBusy.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WCrossReferences.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WFunctionCfg.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WFunctionList.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WFunctionNavigation.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WFunctionSummary.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WHexDump.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WHexValueEdit.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WInstructionList.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WMagic.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WMemoryMap.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WPartitioner.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WSemantics.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WSplash.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WStatus.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WStringDetail.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WStrings.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE_server-WToggleButton.$(OBJEXT)
bROwSE_server_OBJECTS = $(am_bROwSE_server_OBJECTS)
am__DEPENDENCIES_1 =
@ROSE_USE_SQLITE_DATABASE_TRUE@am__DEPENDENCIES_2 =  \
@ROSE_USE_SQLITE_DATABASE_TRUE@	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
@ROSE_USE_PHP_TRUE@am__DEPENDENCIES_4 = $(php_path)/lib/libphc.so \
@ROSE_USE_PHP_TRUE@	$(php_path)/lib/libphp5.so \
@ROSE_USE_PHP_TRUE@	$(am__DEPENDENCIES_1)
@ROSE_USE_QT_TRUE@am__DEPENDENCIES_5 = $(am__DEPENDENCIES_1)
@ROSE_WITH_LIBREADLINE_TRUE@am__DEPENDENCIES_6 =  \
@ROSE_WITH_LIBREADLINE_TRUE@	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_7 = $(abspath $(top_builddir)/src/librose.la) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(ROSE_YICES_LIBS_WITH_PATH) \
	$(am__DEPENDENCIES_4) $(am__DEPENDENCIES_1) \
	$(ROSE_GUI_LIBS_WITH_PATH) $(am__DEPENDENCIES_5) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_6) \
	$(am__DEPENDENCIES_1)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@bROwSE_server_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	$(am__DEPENDENCIES_7)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
am__binaryToSource_SOURCES_DIST = binaryToSource.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_binaryToSource_OBJECTS = binaryToSource-binaryToSource.$(OBJEXT)
binaryToSource_OBJECTS = $(am_binaryToSource_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@binaryToSource_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__checkExecutionAddresses_SOURCES_DIST = checkExecutionAddresses.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_checkExecutionAddresses_OBJECTS = checkExecutionAddresses-checkExecutionAddresses.$(OBJEXT)
checkExecutionAddresses_OBJECTS =  \
	$(am_checkExecutionAddresses_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@checkExecutionAddresses_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__debugSemantics_SOURCES_DIST = debugSemantics.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_debugSemantics_OBJECTS = debugSemantics-debugSemantics.$(OBJEXT)
debugSemantics_OBJECTS = $(am_debugSemantics_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@debugSemantics_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__dumpMemory_SOURCES_DIST = dumpMemory.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_dumpMemory_OBJECTS = dumpMemory-dumpMemory.$(OBJEXT)
dumpMemory_OBJECTS = $(am_dumpMemory_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@dumpMemory_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__findDeadCode_SOURCES_DIST = findDeadCode.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_findDeadCode_OBJECTS = findDeadCode-findDeadCode.$(OBJEXT)
findDeadCode_OBJECTS = $(am_findDeadCode_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findDeadCode_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__findPath_SOURCES_DIST = PathFinder/PathFinder.C \
	PathFinder/semantics.C PathFinder/findPath.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_findPath_OBJECTS = findPath-PathFinder.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	findPath-semantics.$(OBJEXT) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	findPath-findPath.$(OBJEXT)
findPath_OBJECTS = $(am_findPath_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findPath_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__findSimilarFunctions_SOURCES_DIST = findSimilarFunctions.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@am_findSimilarFunctions_OBJECTS = findSimilarFunctions-findSimilarFunctions.$(OBJEXT)
findSimilarFunctions_OBJECTS = $(am_findSimilarFunctions_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@findSimilarFunctions_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@	$(am__DEPENDENCIES_7)
am__generatePaths_SOURCES_DIST = generatePaths.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_generatePaths_OBJECTS = generatePaths-generatePaths.$(OBJEXT)
generatePaths_OBJECTS = $(am_generatePaths_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@generatePaths_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__linearDisassemble_SOURCES_DIST = linearDisassemble.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_linearDisassemble_OBJECTS = linearDisassemble-linearDisassemble.$(OBJEXT)
linearDisassemble_OBJECTS = $(am_linearDisassemble_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@linearDisassemble_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__magicScanner_SOURCES_DIST = magicScanner.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_magicScanner_OBJECTS = magicScanner-magicScanner.$(OBJEXT)
magicScanner_OBJECTS = $(am_magicScanner_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@magicScanner_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__maxBijection_SOURCES_DIST = maxBijection.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_maxBijection_OBJECTS = maxBijection-maxBijection.$(OBJEXT)
maxBijection_OBJECTS = $(am_maxBijection_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@maxBijection_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__nativeExecutionTrace_SOURCES_DIST = nativeExecutionTrace.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_nativeExecutionTrace_OBJECTS = nativeExecutionTrace-nativeExecutionTrace.$(OBJEXT)
nativeExecutionTrace_OBJECTS = $(am_nativeExecutionTrace_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@nativeExecutionTrace_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__recursiveDisassemble_SOURCES_DIST = recursiveDisassemble.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_recursiveDisassemble_OBJECTS = recursiveDisassemble-recursiveDisassemble.$(OBJEXT)
recursiveDisassemble_OBJECTS = $(am_recursiveDisassemble_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@recursiveDisassemble_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__simulate_SOURCES_DIST = simulate.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_simulate_OBJECTS = simulate-simulate.$(OBJEXT)
simulate_OBJECTS = $(am_simulate_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@simulate_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__stringDecoder_SOURCES_DIST = stringDecoder.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_stringDecoder_OBJECTS = stringDecoder-stringDecoder.$(OBJEXT)
stringDecoder_OBJECTS = $(am_stringDecoder_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@stringDecoder_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__symbolicSimplifier_SOURCES_DIST = symbolicSimplifier.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_symbolicSimplifier_OBJECTS = symbolicSimplifier-symbolicSimplifier.$(OBJEXT)
symbolicSimplifier_OBJECTS = $(am_symbolicSimplifier_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@symbolicSimplifier_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__trace_SOURCES_DIST = trace.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_trace_OBJECTS = trace-trace.$(OBJEXT)
trace_OBJECTS = $(am_trace_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@trace_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__x86_call_targets_SOURCES_DIST = x86-call-targets.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_x86_call_targets_OBJECTS = x86_call_targets-x86-call-targets.$(OBJEXT)
x86_call_targets_OBJECTS = $(am_x86_call_targets_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_call_targets_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
am__x86_function_vas_SOURCES_DIST = x86-function-vas.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@am_x86_function_vas_OBJECTS = x86_function_vas-x86-function-vas.$(OBJEXT)
x86_function_vas_OBJECTS = $(am_x86_function_vas_OBJECTS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_function_vas_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(am__DEPENDENCIES_7)
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp =
am__depfiles_maybe =
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(bROwSE_server_SOURCES) $(binaryToSource_SOURCES) \
	$(checkExecutionAddresses_SOURCES) $(debugSemantics_SOURCES) \
	$(dumpMemory_SOURCES) $(findDeadCode_SOURCES) \
	$(findPath_SOURCES) $(findSimilarFunctions_SOURCES) \
	$(generatePaths_SOURCES) $(linearDisassemble_SOURCES) \
	$(magicScanner_SOURCES) $(maxBijection_SOURCES) \
	$(nativeExecutionTrace_SOURCES) \
	$(recursiveDisassemble_SOURCES) $(simulate_SOURCES) \
	$(stringDecoder_SOURCES) $(symbolicSimplifier_SOURCES) \
	$(trace_SOURCES) $(x86_call_targets_SOURCES) \
	$(x86_function_vas_SOURCES)
DIST_SOURCES = $(am__bROwSE_server_SOURCES_DIST) \
	$(am__binaryToSource_SOURCES_DIST) \
	$(am__checkExecutionAddresses_SOURCES_DIST) \
	$(am__debugSemantics_SOURCES_DIST) \
	$(am__dumpMemory_SOURCES_DIST) \
	$(am__findDeadCode_SOURCES_DIST) $(am__findPath_SOURCES_DIST) \
	$(am__findSimilarFunctions_SOURCES_DIST) \
	$(am__generatePaths_SOURCES_DIST) \
	$(am__linearDisassemble_SOURCES_DIST) \
	$(am__magicScanner_SOURCES_DIST) \
	$(am__maxBijection_SOURCES_DIST) \
	$(am__nativeExecutionTrace_SOURCES_DIST) \
	$(am__recursiveDisassemble_SOURCES_DIST) \
	$(am__simulate_SOURCES_DIST) $(am__stringDecoder_SOURCES_DIST) \
	$(am__symbolicSimplifier_SOURCES_DIST) \
	$(am__trace_SOURCES_DIST) $(am__x86_call_targets_SOURCES_DIST) \
	$(am__x86_function_vas_SOURCES_DIST)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__pkginclude_HEADERS_DIST = bROwSE/Application.h \
	bROwSE/FunctionListModel.h bROwSE/FunctionUtil.h \
	bROwSE/InstructionListModel.h bROwSE/Statistics.h \
	bROwSE/WAddressComboBox.h bROwSE/WAddressSpace.h \
	bROwSE/WAssemblyListing.h bROwSE/WBasicBlock.C bROwSE/WBusy.h \
	bROwSE/WCrossReferences.h bROwSE/WFunctionCfg.h \
	bROwSE/WFunctionList.h bROwSE/WFunctionNavigation.h \
	bROwSE/WFunctionSummary.h bROwSE/WHexDump.h \
	bROwSE/WHexValueEdit.h bROwSE/WInstructionList.h \
	bROwSE/WMagic.h bROwSE/WMemoryMap.h bROwSE/WPartitioner.h \
	bROwSE/WSemantics.h bROwSE/WSplash.h bROwSE/WStatus.h \
	bROwSE/WStrings.h bROwSE/WStringDetail.h \
	bROwSE/WToggleButton.h bROwSE/bROwSE.h PathFinder/PathFinder.h \
	PathFinder/semantics.h
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
HEADERS = $(pkginclude_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/mkinstalldirs
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ABS_COMPASS2_XML_SRCDIR = @ABS_COMPASS2_XML_SRCDIR@
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
ATERM_BIN_PATH = @ATERM_BIN_PATH@
ATERM_INSTALL_PATH = @ATERM_INSTALL_PATH@
ATERM_LIBRARY_PATH = @ATERM_LIBRARY_PATH@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKEND_CXX_COMPILER = @BACKEND_CXX_COMPILER@
BACKEND_CXX_VENDOR_AND_VERSION2 = @BACKEND_CXX_VENDOR_AND_VERSION2@
BACKEND_CXX_VENDOR_AND_VERSION3 = @BACKEND_CXX_VENDOR_AND_VERSION3@
BACKEND_C_COMPILER = @BACKEND_C_COMPILER@
BACKEND_FORTRAN_COMPILER = @BACKEND_FORTRAN_COMPILER@
BACKEND_JAVA_COMPILER = @BACKEND_JAVA_COMPILER@
BACKEND_X10_COMPILER = @BACKEND_X10_COMPILER@
BACKSTROKE_ROSS_INCLUDE = @BACKSTROKE_ROSS_INCLUDE@
BACKSTROKE_SPEEDES_INCLUDE = @BACKSTROKE_SPEEDES_INCLUDE@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_IOSTREAMS_LIB = @BOOST_IOSTREAMS_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SERIALIZATION_LIB = @BOOST_SERIALIZATION_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CANDL_PATH = @CANDL_PATH@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CFLAGS32 = @CFLAGS32@
CLANG_CXXFLAGS = @CLANG_CXXFLAGS@
CLANG_LDFLAGS = @CLANG_LDFLAGS@
CLANG_LIBDIR = @CLANG_LIBDIR@
CLASSPATH = @CLASSPATH@
CLOOG_PATH = @CLOOG_PATH@
CPP = @CPP@

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES 
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)
CUDA_BIN_DIR = @CUDA_BIN_DIR@
CUDA_INC_DIR = @CUDA_INC_DIR@
CUDA_LIB_DIR = @CUDA_LIB_DIR@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLIB_PREFIX = @DLIB_PREFIX@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DOXYINDEXER = @DOXYINDEXER@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FC = @FC@
FCFLAGS = @FCFLAGS@
FFLAGS = @FFLAGS@
FGREP = @FGREP@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
FRONTEND_CXX_VENDOR_AND_VERSION2 = @FRONTEND_CXX_VENDOR_AND_VERSION2@
FRONTEND_CXX_VENDOR_AND_VERSION3 = @FRONTEND_CXX_VENDOR_AND_VERSION3@
GCC_MINOR_VERSION = @GCC_MINOR_VERSION@
GCC_VERSION = @GCC_VERSION@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_CFLAGS = @GLUT_CFLAGS@
GLUT_LIBS = ${glut_path}
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GMP_INCLUDE_PATH = @GMP_INCLUDE_PATH@
GMP_INSTALL_PATH = @GMP_INSTALL_PATH@
GMP_LIBRARY_PATH = @GMP_LIBRARY_PATH@
GREP = @GREP@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAVE_CXX11 = @HAVE_CXX11@
HAVE_CXX14 = @HAVE_CXX14@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLTDL = @INCLTDL@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
ISL_INCLUDE_PATH = @ISL_INCLUDE_PATH@
ISL_INSTALL_PATH = @ISL_INSTALL_PATH@
ISL_LIBRARY_PATH = @ISL_LIBRARY_PATH@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_JVM_PATH = @JAVA_JVM_PATH@
JAVA_PATH = @JAVA_PATH@
LD = @LD@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBADD_DLD_LINK = @LIBADD_DLD_LINK@
LIBADD_DLOPEN = @LIBADD_DLOPEN@
LIBADD_SHL_LOAD = @LIBADD_SHL_LOAD@
LIBDWARF_CPPFLAGS = @LIBDWARF_CPPFLAGS@
LIBDWARF_LDFLAGS = @LIBDWARF_LDFLAGS@
LIBDWARF_PREFIX = @LIBDWARF_PREFIX@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBREADLINE_INCLUDE_PATH = @LIBREADLINE_INCLUDE_PATH@
LIBREADLINE_INSTALL_PATH = @LIBREADLINE_INSTALL_PATH@
LIBREADLINE_LIBRARY_PATH = @LIBREADLINE_LIBRARY_PATH@
LIBREADLINE_LIBS = @LIBREADLINE_LIBS@
LIBS = @LIBS@
LIBS_WITH_RPATH = @LIBS_WITH_RPATH@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LLVM_CONFIG = @LLVM_CONFIG@
LN_S = @LN_S@
LTDLDEPS = @LTDLDEPS@
LTDLINCL = @LTDLINCL@
LTDLOPEN = @LTDLOPEN@
LTLIBOBJS = @LTLIBOBJS@
LT_ARGZ_H = @LT_ARGZ_H@
LT_CONFIG_H = @LT_CONFIG_H@
LT_DLLOADERS = @LT_DLLOADERS@
LT_DLPREOPEN = @LT_DLPREOPEN@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBDIR = @MAPLE_LIBDIR@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MINT = @MINT@
MKDIR_P = @MKDIR_P@
MOC = @MOC@
MPICC = @MPICC@
MPICXX = @MPICXX@
MPIF77 = @MPIF77@
MPIFC = @MPIFC@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
NM = @NM@
NMEDIT = @NMEDIT@
NVCCBIN = @NVCCBIN@
OBJ = @OBJ@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENCL_INC_DIR = @OPENCL_INC_DIR@
OPENCL_LIB_DIR = @OPENCL_LIB_DIR@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OPTIONAL_PROJECTS = @OPTIONAL_PROJECTS@
OS_major_release_number = @OS_major_release_number@
OS_minor_release_number = @OS_minor_release_number@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
POET_INCL = @POET_INCL@
POET_LIB = @POET_LIB@
PPL_PATH = @PPL_PATH@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
PYTHON = @PYTHON@
PYTHON_CPPFLAGS = @PYTHON_CPPFLAGS@
PYTHON_EXTRA_LDFLAGS = @PYTHON_EXTRA_LDFLAGS@
PYTHON_EXTRA_LIBS = @PYTHON_EXTRA_LIBS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@
PYTHON_SITE_PKG = @PYTHON_SITE_PKG@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HOME = @ROSE_HOME@
ROSE_LIBMAGIC_PREFIX = @ROSE_LIBMAGIC_PREFIX@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_JAR_FILE = @ROSE_OFP_JAR_FILE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_OFP_VERSION_NUMBER = @ROSE_OFP_VERSION_NUMBER@
ROSE_PS2PDF_PATH = @ROSE_PS2PDF_PATH@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_CANDL = @ROSE_USE_CANDL@
ROSE_USE_CLOOG = @ROSE_USE_CLOOG@
ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT = @ROSE_USE_FATAL_ROSE_WARNINGS_SUPPORT@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_SCOPLIB = @ROSE_USE_SCOPLIB@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_MPI_CFLAGS = @ROSE_WITH_MPI_CFLAGS@
ROSE_WITH_MPI_CLDFLAGS = @ROSE_WITH_MPI_CLDFLAGS@
ROSE_WITH_MPI_CXXFLAGS = @ROSE_WITH_MPI_CXXFLAGS@
ROSE_WITH_MPI_CXXLDFLAGS = @ROSE_WITH_MPI_CXXLDFLAGS@
ROSE_WITH_MPI_F77FLAGS = @ROSE_WITH_MPI_F77FLAGS@
ROSE_WITH_MPI_F77LDFLAGS = @ROSE_WITH_MPI_F77LDFLAGS@
ROSE_WITH_MPI_FFLAGS = @ROSE_WITH_MPI_FFLAGS@
ROSE_WITH_MPI_FLDFLAGS = @ROSE_WITH_MPI_FLDFLAGS@
ROSE_YAML_PREFIX = @ROSE_YAML_PREFIX@
ROSE_YICES = @ROSE_YICES@
ROSE_YICES_PREFIX = @ROSE_YICES_PREFIX@
RT_LIBS = @RT_LIBS@
SCOPLIB_PATH = @SCOPLIB_PATH@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRATEGO_BIN_PATH = @STRATEGO_BIN_PATH@
STRATEGO_INSTALL_PATH = @STRATEGO_INSTALL_PATH@
STRATEGO_LIBRARY_PATH = @STRATEGO_LIBRARY_PATH@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
UPC = @UPC@
UPCDEPMODE = @UPCDEPMODE@
UPCFLAGS = @UPCFLAGS@
USING_WINDOWS = @USING_WINDOWS@
VALGRIND_BINARY = @VALGRIND_BINARY@
VALGRIND_BIN_PATH = @VALGRIND_BIN_PATH@
VALGRIND_INCLUDE_PATH = @VALGRIND_INCLUDE_PATH@
VALGRIND_INSTALL_PATH = @VALGRIND_INSTALL_PATH@
VALGRIND_LIBRARY_PATH = @VALGRIND_LIBRARY_PATH@
VECTORIZATION = @VECTORIZATION@
VERSION = @VERSION@
WT_PREFIX = @WT_PREFIX@
X10_BIN_PATH = @X10_BIN_PATH@
X10_INSTALL_PATH = @X10_INSTALL_PATH@
X10_LIBRARY_PATH = @X10_LIBRARY_PATH@
X10_VERSION = @X10_VERSION@
XERCES_CPPFLAGS = @XERCES_CPPFLAGS@
XERCES_LDFLAGS = @XERCES_LDFLAGS@
XERCES_LIBS = @XERCES_LIBS@
XERCES_VERSION = @XERCES_VERSION@
XMKMF = @XMKMF@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
YACC = @YACC@
YFLAGS = @YFLAGS@
Z3BIN = @Z3BIN@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
ac_ct_F77 = @ac_ct_F77@
ac_ct_FC = @ac_ct_FC@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_UPC = @ac_ct_UPC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
backstroke_ross_path = @backstroke_ross_path@
backstroke_speedes_path = @backstroke_speedes_path@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
builddir = @builddir@
configure_date = @configure_date@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localedir = @localedir@
localstatedir = @localstatedir@
ltdl_LIBOBJS = @ltdl_LIBOBJS@
ltdl_LTLIBOBJS = @ltdl_LTLIBOBJS@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
pdfdir = @pdfdir@
php_path = @php_path@
poet_dir = @poet_dir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
res_top_src = @res_top_src@
rted_path = @rted_path@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
subdirs = @subdirs@
sys_symbol_underscore = @sys_symbol_underscore@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_pwd = @top_pwd@
top_srcdir = @top_srcdir@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@ROSE_YICES_PREFIX@/include
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@ROSE_HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @ROSE_YICES_PREFIX@/lib/libyices.a

# YAML-CPP package for parsing YAML/JSON files
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_INCLUDES = -I@ROSE_YAML_PREFIX@/include
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS = -lyaml-cpp
@ROSE_HAVE_LIBYAML_TRUE@ROSE_YAML_LIBS_WITH_PATH = -L@ROSE_YAML_PREFIX@/lib -lyaml-cpp

# GNU readline
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_INCLUDES = -I@LIBREADLINE_INCLUDE_PATH@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS = @LIBREADLINE_LIBS@
@ROSE_WITH_LIBREADLINE_TRUE@ROSE_READLINE_LIBS_WITH_PATH = -L@LIBREADLINE_LIBRARY_PATH@ $(ROSE_READLINE_LIBS)

# libmagic for identifying file types based on magic numbers
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_INCLUDES = -I@ROSE_LIBMAGIC_PREFIX@/include
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS = -lmagic
@ROSE_HAVE_LIBMAGIC_TRUE@ROSE_LIBMAGIC_LIBS_WITH_PATH = -L@ROSE_LIBMAGIC_PREFIX@/lib -lmagic

# Math algorithms from http://dlib.net. This is a headers-only library neede by some binary analyses.
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_INCLUDES = -I@DLIB_PREFIX@
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS = 
@ROSE_HAVE_DLIB_TRUE@ROSE_DLIB_LIBS_WITH_PATH = 

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`

# ROSE-DWARF libdwarf support
@ROSE_HAVE_LIBDWARF_TRUE@ROSE_DWARF_INCLUDES = $(LIBDWARF_CPPFLAGS)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(LIBDWARF_PREFIX/lib) -L$(LIBDWARF_PREFIX/lib) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(LIBDWARF_PREFIX)/lib/libdwarf.a -lelf
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @LIBDWARF_LDFLAGS@

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_HAVE_LIBDWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
@ROSE_WITH_ATERM_TRUE@ROSE_ATERM_LIBS = -L$(ATERM_LIBRARY_PATH) -lATerm

#   libroseExperimentalOpenFortranParserlibraries = frontend/Experimental_OpenFortranParser_ROSE_Connection/aterm_traversal/libexperimentalRoseFortran.la

# DQ (9/26/2015): This is defined in src/Makefile.am
#   libroseExperimentalOpenFortranParserlibraries =
#   ROSE_EXPERIMENTAL_OFP_INCLUDE = -I$(_PREFIX)/include
#   ROSE_EXPERIMENTAL_OFP_LIBS    = -L$(top_builddir)/src/frontend/Experimental_OpenFortranParser_ROSE_Connection/aterm_traversal -lexperimentalRoseFortran

# DQ (1/26/2017): This is not built in the new way that Craig and I are working together on the new OFP.
@ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION_TRUE@ROSE_EXPERIMENTAL_OFP_LIBS = -L$(top_builddir)/src/3rdPartyLibraries/experimental-fortran-parser/aterm_traversal -lexperimentalOFP
#   ROSE_EXPERIMENTAL_OFP_LIBS    = 

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -lm
# ROSE_INCLUDES = 
#     $(ROSE_BOOST_PREINCLUDE_PATH) 
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PHPFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_FRONTEND_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/PythonFrontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_CLANG_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractHandle \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractMemoryObject \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/abstractLayer \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astRewriteMechanism \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/annotation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SIDEEFFECTS_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_GUI_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_QT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(ROSE_SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@			$(ROSE_SIDEEFFECT_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@      $(SQLITE_DATABASE_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/midend/astUtil/astInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/libltdl \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PHP_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PYTHON_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YICES_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_YAML_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_READLINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_LIBMAGIC_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DLIB_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_DWARF_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_WINE_INCLUDES) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(VALGRIND_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(SQLITE3_CFLAGS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_PCH_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(INTEL_PIN_INCLUDE_PATHS) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ETHER_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_FALSE@     $(BOOST_CPPFLAGS)


# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
# ROSE_INCLUDES = 
#    $(ROSE_BOOST_PREINCLUDE_PATH) 
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_builddir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I"$(JAVA_HOME)/include" \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryFormats \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/BinaryLoader \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/frontend/Disassemblers \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/formatSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/unparser/X10CodeGeneration \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/backend/asmUnparser \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/support \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs  \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/stringSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/commandlineProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astDiagnostics \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astProcessing \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astMatching \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/astQuery \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/binaryAnalyses \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/midend/programAnalysis \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseSupport \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/util/graphs \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     -I$(top_srcdir)/src/roseExtensions/failSafe \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_ATERM_INCLUDE) \
@ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT_TRUE@     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)


# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to 
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend 
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang 
#    $(ROSE_CLANG_FRONTEND_INCLUDE) 
#    $(ROSE_CLANG_INCLUDE) 
SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH) 

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS = $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS) $(ROSE_BOOST_LIBS) \
  $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) $(ROSE_EXPERIMENTAL_OFP_LIBS) \
  $(ROSE_YAML_LIBS_WITH_PATH) $(ROSE_LIBMAGIC_LIBS_WITH_PATH) $(ROSE_READLINE_LIBS_WITH_PATH) \
  $(ROSE_DLIB_LIBS_WITH_PATH)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.
RTH_RUN_FLAGS_V_ = 
RTH_RUN_FLAGS_V_0 = 
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
pkginclude_HEADERS = $(am__append_4) $(am__append_6)
EXTRA_DIST = 
MOSTLYCLEANFILES = $(am__append_2)
TEST_TARGETS = $(am__append_9)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@dumpMemory_SOURCES = dumpMemory.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@dumpMemory_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@dumpMemory_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@linearDisassemble_SOURCES = linearDisassemble.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@linearDisassemble_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@linearDisassemble_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@recursiveDisassemble_SOURCES = recursiveDisassemble.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@recursiveDisassemble_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@recursiveDisassemble_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@nativeExecutionTrace_SOURCES = nativeExecutionTrace.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@nativeExecutionTrace_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@nativeExecutionTrace_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@checkExecutionAddresses_SOURCES = checkExecutionAddresses.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@checkExecutionAddresses_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@checkExecutionAddresses_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@magicScanner_SOURCES = magicScanner.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@magicScanner_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@magicScanner_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@simulate_SOURCES = simulate.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@simulate_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@simulate_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@stringDecoder_SOURCES = stringDecoder.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@stringDecoder_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@stringDecoder_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findDeadCode_SOURCES = findDeadCode.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findDeadCode_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findDeadCode_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@symbolicSimplifier_SOURCES = symbolicSimplifier.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@symbolicSimplifier_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@symbolicSimplifier_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@binaryToSource_SOURCES = binaryToSource.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@binaryToSource_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@binaryToSource_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@trace_SOURCES = trace.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@trace_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@trace_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@bROwSE_server_SOURCES = \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/Application.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/bROwSE.C				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/FunctionListModel.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/FunctionUtil.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/InstructionListModel.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/Statistics.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WAddressComboBox.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WAddressSpace.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WAssemblyListing.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WBusy.C				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WCrossReferences.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WFunctionCfg.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WFunctionList.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WFunctionNavigation.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WFunctionSummary.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WHexDump.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WHexValueEdit.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WInstructionList.C		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WMagic.C				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WMemoryMap.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WPartitioner.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WSemantics.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WSplash.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WStatus.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WStringDetail.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WStrings.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@	bROwSE/WToggleButton.C

@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@bROwSE_server_CPPFLAGS = -I$(ROSE_INCLUDES) -I$(top_builddir)/src/roseSupport -I$(WT_PREFIX)/include
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_USE_WT_TRUE@bROwSE_server_LDADD = -L$(WT_PREFIX)/lib -lwt -lwthttp $(LIBS_WITH_RPATH) -lboost_signals $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@generatePaths_SOURCES = generatePaths.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@generatePaths_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@generatePaths_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findPath_SOURCES = \
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	PathFinder/PathFinder.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	PathFinder/semantics.C			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	PathFinder/findPath.C

@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findPath_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@findPath_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@findSimilarFunctions_SOURCES = findSimilarFunctions.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@findSimilarFunctions_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@@ROSE_HAVE_DLIB_TRUE@findSimilarFunctions_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@maxBijection_SOURCES = maxBijection.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@maxBijection_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@maxBijection_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@debugSemantics_SOURCES = debugSemantics.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@debugSemantics_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@debugSemantics_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_call_targets_SOURCES = x86-call-targets.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_call_targets_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_call_targets_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_function_vas_SOURCES = x86-function-vas.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_function_vas_CPPFLAGS = $(ROSE_INCLUDES)
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@x86_function_vas_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
all: all-am

.SUFFIXES:
.SUFFIXES: .C .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps projects/BinaryAnalysisTools/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign --ignore-deps projects/BinaryAnalysisTools/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

bROwSE-server$(EXEEXT): $(bROwSE_server_OBJECTS) $(bROwSE_server_DEPENDENCIES) $(EXTRA_bROwSE_server_DEPENDENCIES) 
	@rm -f bROwSE-server$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(bROwSE_server_OBJECTS) $(bROwSE_server_LDADD) $(LIBS)

binaryToSource$(EXEEXT): $(binaryToSource_OBJECTS) $(binaryToSource_DEPENDENCIES) $(EXTRA_binaryToSource_DEPENDENCIES) 
	@rm -f binaryToSource$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(binaryToSource_OBJECTS) $(binaryToSource_LDADD) $(LIBS)

checkExecutionAddresses$(EXEEXT): $(checkExecutionAddresses_OBJECTS) $(checkExecutionAddresses_DEPENDENCIES) $(EXTRA_checkExecutionAddresses_DEPENDENCIES) 
	@rm -f checkExecutionAddresses$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(checkExecutionAddresses_OBJECTS) $(checkExecutionAddresses_LDADD) $(LIBS)

debugSemantics$(EXEEXT): $(debugSemantics_OBJECTS) $(debugSemantics_DEPENDENCIES) $(EXTRA_debugSemantics_DEPENDENCIES) 
	@rm -f debugSemantics$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(debugSemantics_OBJECTS) $(debugSemantics_LDADD) $(LIBS)

dumpMemory$(EXEEXT): $(dumpMemory_OBJECTS) $(dumpMemory_DEPENDENCIES) $(EXTRA_dumpMemory_DEPENDENCIES) 
	@rm -f dumpMemory$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(dumpMemory_OBJECTS) $(dumpMemory_LDADD) $(LIBS)

findDeadCode$(EXEEXT): $(findDeadCode_OBJECTS) $(findDeadCode_DEPENDENCIES) $(EXTRA_findDeadCode_DEPENDENCIES) 
	@rm -f findDeadCode$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(findDeadCode_OBJECTS) $(findDeadCode_LDADD) $(LIBS)

findPath$(EXEEXT): $(findPath_OBJECTS) $(findPath_DEPENDENCIES) $(EXTRA_findPath_DEPENDENCIES) 
	@rm -f findPath$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(findPath_OBJECTS) $(findPath_LDADD) $(LIBS)

findSimilarFunctions$(EXEEXT): $(findSimilarFunctions_OBJECTS) $(findSimilarFunctions_DEPENDENCIES) $(EXTRA_findSimilarFunctions_DEPENDENCIES) 
	@rm -f findSimilarFunctions$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(findSimilarFunctions_OBJECTS) $(findSimilarFunctions_LDADD) $(LIBS)

generatePaths$(EXEEXT): $(generatePaths_OBJECTS) $(generatePaths_DEPENDENCIES) $(EXTRA_generatePaths_DEPENDENCIES) 
	@rm -f generatePaths$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(generatePaths_OBJECTS) $(generatePaths_LDADD) $(LIBS)

linearDisassemble$(EXEEXT): $(linearDisassemble_OBJECTS) $(linearDisassemble_DEPENDENCIES) $(EXTRA_linearDisassemble_DEPENDENCIES) 
	@rm -f linearDisassemble$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(linearDisassemble_OBJECTS) $(linearDisassemble_LDADD) $(LIBS)

magicScanner$(EXEEXT): $(magicScanner_OBJECTS) $(magicScanner_DEPENDENCIES) $(EXTRA_magicScanner_DEPENDENCIES) 
	@rm -f magicScanner$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(magicScanner_OBJECTS) $(magicScanner_LDADD) $(LIBS)

maxBijection$(EXEEXT): $(maxBijection_OBJECTS) $(maxBijection_DEPENDENCIES) $(EXTRA_maxBijection_DEPENDENCIES) 
	@rm -f maxBijection$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(maxBijection_OBJECTS) $(maxBijection_LDADD) $(LIBS)

nativeExecutionTrace$(EXEEXT): $(nativeExecutionTrace_OBJECTS) $(nativeExecutionTrace_DEPENDENCIES) $(EXTRA_nativeExecutionTrace_DEPENDENCIES) 
	@rm -f nativeExecutionTrace$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(nativeExecutionTrace_OBJECTS) $(nativeExecutionTrace_LDADD) $(LIBS)

recursiveDisassemble$(EXEEXT): $(recursiveDisassemble_OBJECTS) $(recursiveDisassemble_DEPENDENCIES) $(EXTRA_recursiveDisassemble_DEPENDENCIES) 
	@rm -f recursiveDisassemble$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(recursiveDisassemble_OBJECTS) $(recursiveDisassemble_LDADD) $(LIBS)

simulate$(EXEEXT): $(simulate_OBJECTS) $(simulate_DEPENDENCIES) $(EXTRA_simulate_DEPENDENCIES) 
	@rm -f simulate$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(simulate_OBJECTS) $(simulate_LDADD) $(LIBS)

stringDecoder$(EXEEXT): $(stringDecoder_OBJECTS) $(stringDecoder_DEPENDENCIES) $(EXTRA_stringDecoder_DEPENDENCIES) 
	@rm -f stringDecoder$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(stringDecoder_OBJECTS) $(stringDecoder_LDADD) $(LIBS)

symbolicSimplifier$(EXEEXT): $(symbolicSimplifier_OBJECTS) $(symbolicSimplifier_DEPENDENCIES) $(EXTRA_symbolicSimplifier_DEPENDENCIES) 
	@rm -f symbolicSimplifier$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(symbolicSimplifier_OBJECTS) $(symbolicSimplifier_LDADD) $(LIBS)

trace$(EXEEXT): $(trace_OBJECTS) $(trace_DEPENDENCIES) $(EXTRA_trace_DEPENDENCIES) 
	@rm -f trace$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(trace_OBJECTS) $(trace_LDADD) $(LIBS)

x86-call-targets$(EXEEXT): $(x86_call_targets_OBJECTS) $(x86_call_targets_DEPENDENCIES) $(EXTRA_x86_call_targets_DEPENDENCIES) 
	@rm -f x86-call-targets$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(x86_call_targets_OBJECTS) $(x86_call_targets_LDADD) $(LIBS)

x86-function-vas$(EXEEXT): $(x86_function_vas_OBJECTS) $(x86_function_vas_DEPENDENCIES) $(EXTRA_x86_function_vas_DEPENDENCIES) 
	@rm -f x86-function-vas$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(x86_function_vas_OBJECTS) $(x86_function_vas_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<

.C.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<

bROwSE_server-Application.o: bROwSE/Application.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-Application.o `test -f 'bROwSE/Application.C' || echo '$(srcdir)/'`bROwSE/Application.C

bROwSE_server-Application.obj: bROwSE/Application.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-Application.obj `if test -f 'bROwSE/Application.C'; then $(CYGPATH_W) 'bROwSE/Application.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/Application.C'; fi`

bROwSE_server-bROwSE.o: bROwSE/bROwSE.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-bROwSE.o `test -f 'bROwSE/bROwSE.C' || echo '$(srcdir)/'`bROwSE/bROwSE.C

bROwSE_server-bROwSE.obj: bROwSE/bROwSE.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-bROwSE.obj `if test -f 'bROwSE/bROwSE.C'; then $(CYGPATH_W) 'bROwSE/bROwSE.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/bROwSE.C'; fi`

bROwSE_server-FunctionListModel.o: bROwSE/FunctionListModel.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-FunctionListModel.o `test -f 'bROwSE/FunctionListModel.C' || echo '$(srcdir)/'`bROwSE/FunctionListModel.C

bROwSE_server-FunctionListModel.obj: bROwSE/FunctionListModel.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-FunctionListModel.obj `if test -f 'bROwSE/FunctionListModel.C'; then $(CYGPATH_W) 'bROwSE/FunctionListModel.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/FunctionListModel.C'; fi`

bROwSE_server-FunctionUtil.o: bROwSE/FunctionUtil.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-FunctionUtil.o `test -f 'bROwSE/FunctionUtil.C' || echo '$(srcdir)/'`bROwSE/FunctionUtil.C

bROwSE_server-FunctionUtil.obj: bROwSE/FunctionUtil.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-FunctionUtil.obj `if test -f 'bROwSE/FunctionUtil.C'; then $(CYGPATH_W) 'bROwSE/FunctionUtil.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/FunctionUtil.C'; fi`

bROwSE_server-InstructionListModel.o: bROwSE/InstructionListModel.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-InstructionListModel.o `test -f 'bROwSE/InstructionListModel.C' || echo '$(srcdir)/'`bROwSE/InstructionListModel.C

bROwSE_server-InstructionListModel.obj: bROwSE/InstructionListModel.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-InstructionListModel.obj `if test -f 'bROwSE/InstructionListModel.C'; then $(CYGPATH_W) 'bROwSE/InstructionListModel.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/InstructionListModel.C'; fi`

bROwSE_server-Statistics.o: bROwSE/Statistics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-Statistics.o `test -f 'bROwSE/Statistics.C' || echo '$(srcdir)/'`bROwSE/Statistics.C

bROwSE_server-Statistics.obj: bROwSE/Statistics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-Statistics.obj `if test -f 'bROwSE/Statistics.C'; then $(CYGPATH_W) 'bROwSE/Statistics.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/Statistics.C'; fi`

bROwSE_server-WAddressComboBox.o: bROwSE/WAddressComboBox.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WAddressComboBox.o `test -f 'bROwSE/WAddressComboBox.C' || echo '$(srcdir)/'`bROwSE/WAddressComboBox.C

bROwSE_server-WAddressComboBox.obj: bROwSE/WAddressComboBox.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WAddressComboBox.obj `if test -f 'bROwSE/WAddressComboBox.C'; then $(CYGPATH_W) 'bROwSE/WAddressComboBox.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WAddressComboBox.C'; fi`

bROwSE_server-WAddressSpace.o: bROwSE/WAddressSpace.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WAddressSpace.o `test -f 'bROwSE/WAddressSpace.C' || echo '$(srcdir)/'`bROwSE/WAddressSpace.C

bROwSE_server-WAddressSpace.obj: bROwSE/WAddressSpace.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WAddressSpace.obj `if test -f 'bROwSE/WAddressSpace.C'; then $(CYGPATH_W) 'bROwSE/WAddressSpace.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WAddressSpace.C'; fi`

bROwSE_server-WAssemblyListing.o: bROwSE/WAssemblyListing.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WAssemblyListing.o `test -f 'bROwSE/WAssemblyListing.C' || echo '$(srcdir)/'`bROwSE/WAssemblyListing.C

bROwSE_server-WAssemblyListing.obj: bROwSE/WAssemblyListing.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WAssemblyListing.obj `if test -f 'bROwSE/WAssemblyListing.C'; then $(CYGPATH_W) 'bROwSE/WAssemblyListing.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WAssemblyListing.C'; fi`

bROwSE_server-WBusy.o: bROwSE/WBusy.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WBusy.o `test -f 'bROwSE/WBusy.C' || echo '$(srcdir)/'`bROwSE/WBusy.C

bROwSE_server-WBusy.obj: bROwSE/WBusy.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WBusy.obj `if test -f 'bROwSE/WBusy.C'; then $(CYGPATH_W) 'bROwSE/WBusy.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WBusy.C'; fi`

bROwSE_server-WCrossReferences.o: bROwSE/WCrossReferences.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WCrossReferences.o `test -f 'bROwSE/WCrossReferences.C' || echo '$(srcdir)/'`bROwSE/WCrossReferences.C

bROwSE_server-WCrossReferences.obj: bROwSE/WCrossReferences.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WCrossReferences.obj `if test -f 'bROwSE/WCrossReferences.C'; then $(CYGPATH_W) 'bROwSE/WCrossReferences.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WCrossReferences.C'; fi`

bROwSE_server-WFunctionCfg.o: bROwSE/WFunctionCfg.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionCfg.o `test -f 'bROwSE/WFunctionCfg.C' || echo '$(srcdir)/'`bROwSE/WFunctionCfg.C

bROwSE_server-WFunctionCfg.obj: bROwSE/WFunctionCfg.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionCfg.obj `if test -f 'bROwSE/WFunctionCfg.C'; then $(CYGPATH_W) 'bROwSE/WFunctionCfg.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WFunctionCfg.C'; fi`

bROwSE_server-WFunctionList.o: bROwSE/WFunctionList.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionList.o `test -f 'bROwSE/WFunctionList.C' || echo '$(srcdir)/'`bROwSE/WFunctionList.C

bROwSE_server-WFunctionList.obj: bROwSE/WFunctionList.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionList.obj `if test -f 'bROwSE/WFunctionList.C'; then $(CYGPATH_W) 'bROwSE/WFunctionList.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WFunctionList.C'; fi`

bROwSE_server-WFunctionNavigation.o: bROwSE/WFunctionNavigation.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionNavigation.o `test -f 'bROwSE/WFunctionNavigation.C' || echo '$(srcdir)/'`bROwSE/WFunctionNavigation.C

bROwSE_server-WFunctionNavigation.obj: bROwSE/WFunctionNavigation.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionNavigation.obj `if test -f 'bROwSE/WFunctionNavigation.C'; then $(CYGPATH_W) 'bROwSE/WFunctionNavigation.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WFunctionNavigation.C'; fi`

bROwSE_server-WFunctionSummary.o: bROwSE/WFunctionSummary.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionSummary.o `test -f 'bROwSE/WFunctionSummary.C' || echo '$(srcdir)/'`bROwSE/WFunctionSummary.C

bROwSE_server-WFunctionSummary.obj: bROwSE/WFunctionSummary.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WFunctionSummary.obj `if test -f 'bROwSE/WFunctionSummary.C'; then $(CYGPATH_W) 'bROwSE/WFunctionSummary.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WFunctionSummary.C'; fi`

bROwSE_server-WHexDump.o: bROwSE/WHexDump.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WHexDump.o `test -f 'bROwSE/WHexDump.C' || echo '$(srcdir)/'`bROwSE/WHexDump.C

bROwSE_server-WHexDump.obj: bROwSE/WHexDump.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WHexDump.obj `if test -f 'bROwSE/WHexDump.C'; then $(CYGPATH_W) 'bROwSE/WHexDump.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WHexDump.C'; fi`

bROwSE_server-WHexValueEdit.o: bROwSE/WHexValueEdit.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WHexValueEdit.o `test -f 'bROwSE/WHexValueEdit.C' || echo '$(srcdir)/'`bROwSE/WHexValueEdit.C

bROwSE_server-WHexValueEdit.obj: bROwSE/WHexValueEdit.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WHexValueEdit.obj `if test -f 'bROwSE/WHexValueEdit.C'; then $(CYGPATH_W) 'bROwSE/WHexValueEdit.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WHexValueEdit.C'; fi`

bROwSE_server-WInstructionList.o: bROwSE/WInstructionList.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WInstructionList.o `test -f 'bROwSE/WInstructionList.C' || echo '$(srcdir)/'`bROwSE/WInstructionList.C

bROwSE_server-WInstructionList.obj: bROwSE/WInstructionList.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WInstructionList.obj `if test -f 'bROwSE/WInstructionList.C'; then $(CYGPATH_W) 'bROwSE/WInstructionList.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WInstructionList.C'; fi`

bROwSE_server-WMagic.o: bROwSE/WMagic.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WMagic.o `test -f 'bROwSE/WMagic.C' || echo '$(srcdir)/'`bROwSE/WMagic.C

bROwSE_server-WMagic.obj: bROwSE/WMagic.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WMagic.obj `if test -f 'bROwSE/WMagic.C'; then $(CYGPATH_W) 'bROwSE/WMagic.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WMagic.C'; fi`

bROwSE_server-WMemoryMap.o: bROwSE/WMemoryMap.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WMemoryMap.o `test -f 'bROwSE/WMemoryMap.C' || echo '$(srcdir)/'`bROwSE/WMemoryMap.C

bROwSE_server-WMemoryMap.obj: bROwSE/WMemoryMap.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WMemoryMap.obj `if test -f 'bROwSE/WMemoryMap.C'; then $(CYGPATH_W) 'bROwSE/WMemoryMap.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WMemoryMap.C'; fi`

bROwSE_server-WPartitioner.o: bROwSE/WPartitioner.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WPartitioner.o `test -f 'bROwSE/WPartitioner.C' || echo '$(srcdir)/'`bROwSE/WPartitioner.C

bROwSE_server-WPartitioner.obj: bROwSE/WPartitioner.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WPartitioner.obj `if test -f 'bROwSE/WPartitioner.C'; then $(CYGPATH_W) 'bROwSE/WPartitioner.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WPartitioner.C'; fi`

bROwSE_server-WSemantics.o: bROwSE/WSemantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WSemantics.o `test -f 'bROwSE/WSemantics.C' || echo '$(srcdir)/'`bROwSE/WSemantics.C

bROwSE_server-WSemantics.obj: bROwSE/WSemantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WSemantics.obj `if test -f 'bROwSE/WSemantics.C'; then $(CYGPATH_W) 'bROwSE/WSemantics.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WSemantics.C'; fi`

bROwSE_server-WSplash.o: bROwSE/WSplash.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WSplash.o `test -f 'bROwSE/WSplash.C' || echo '$(srcdir)/'`bROwSE/WSplash.C

bROwSE_server-WSplash.obj: bROwSE/WSplash.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WSplash.obj `if test -f 'bROwSE/WSplash.C'; then $(CYGPATH_W) 'bROwSE/WSplash.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WSplash.C'; fi`

bROwSE_server-WStatus.o: bROwSE/WStatus.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WStatus.o `test -f 'bROwSE/WStatus.C' || echo '$(srcdir)/'`bROwSE/WStatus.C

bROwSE_server-WStatus.obj: bROwSE/WStatus.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WStatus.obj `if test -f 'bROwSE/WStatus.C'; then $(CYGPATH_W) 'bROwSE/WStatus.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WStatus.C'; fi`

bROwSE_server-WStringDetail.o: bROwSE/WStringDetail.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WStringDetail.o `test -f 'bROwSE/WStringDetail.C' || echo '$(srcdir)/'`bROwSE/WStringDetail.C

bROwSE_server-WStringDetail.obj: bROwSE/WStringDetail.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WStringDetail.obj `if test -f 'bROwSE/WStringDetail.C'; then $(CYGPATH_W) 'bROwSE/WStringDetail.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WStringDetail.C'; fi`

bROwSE_server-WStrings.o: bROwSE/WStrings.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WStrings.o `test -f 'bROwSE/WStrings.C' || echo '$(srcdir)/'`bROwSE/WStrings.C

bROwSE_server-WStrings.obj: bROwSE/WStrings.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WStrings.obj `if test -f 'bROwSE/WStrings.C'; then $(CYGPATH_W) 'bROwSE/WStrings.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WStrings.C'; fi`

bROwSE_server-WToggleButton.o: bROwSE/WToggleButton.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WToggleButton.o `test -f 'bROwSE/WToggleButton.C' || echo '$(srcdir)/'`bROwSE/WToggleButton.C

bROwSE_server-WToggleButton.obj: bROwSE/WToggleButton.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(bROwSE_server_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bROwSE_server-WToggleButton.obj `if test -f 'bROwSE/WToggleButton.C'; then $(CYGPATH_W) 'bROwSE/WToggleButton.C'; else $(CYGPATH_W) '$(srcdir)/bROwSE/WToggleButton.C'; fi`

binaryToSource-binaryToSource.o: binaryToSource.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(binaryToSource_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o binaryToSource-binaryToSource.o `test -f 'binaryToSource.C' || echo '$(srcdir)/'`binaryToSource.C

binaryToSource-binaryToSource.obj: binaryToSource.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(binaryToSource_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o binaryToSource-binaryToSource.obj `if test -f 'binaryToSource.C'; then $(CYGPATH_W) 'binaryToSource.C'; else $(CYGPATH_W) '$(srcdir)/binaryToSource.C'; fi`

checkExecutionAddresses-checkExecutionAddresses.o: checkExecutionAddresses.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(checkExecutionAddresses_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o checkExecutionAddresses-checkExecutionAddresses.o `test -f 'checkExecutionAddresses.C' || echo '$(srcdir)/'`checkExecutionAddresses.C

checkExecutionAddresses-checkExecutionAddresses.obj: checkExecutionAddresses.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(checkExecutionAddresses_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o checkExecutionAddresses-checkExecutionAddresses.obj `if test -f 'checkExecutionAddresses.C'; then $(CYGPATH_W) 'checkExecutionAddresses.C'; else $(CYGPATH_W) '$(srcdir)/checkExecutionAddresses.C'; fi`

debugSemantics-debugSemantics.o: debugSemantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(debugSemantics_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o debugSemantics-debugSemantics.o `test -f 'debugSemantics.C' || echo '$(srcdir)/'`debugSemantics.C

debugSemantics-debugSemantics.obj: debugSemantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(debugSemantics_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o debugSemantics-debugSemantics.obj `if test -f 'debugSemantics.C'; then $(CYGPATH_W) 'debugSemantics.C'; else $(CYGPATH_W) '$(srcdir)/debugSemantics.C'; fi`

dumpMemory-dumpMemory.o: dumpMemory.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dumpMemory_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dumpMemory-dumpMemory.o `test -f 'dumpMemory.C' || echo '$(srcdir)/'`dumpMemory.C

dumpMemory-dumpMemory.obj: dumpMemory.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(dumpMemory_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dumpMemory-dumpMemory.obj `if test -f 'dumpMemory.C'; then $(CYGPATH_W) 'dumpMemory.C'; else $(CYGPATH_W) '$(srcdir)/dumpMemory.C'; fi`

findDeadCode-findDeadCode.o: findDeadCode.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findDeadCode_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findDeadCode-findDeadCode.o `test -f 'findDeadCode.C' || echo '$(srcdir)/'`findDeadCode.C

findDeadCode-findDeadCode.obj: findDeadCode.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findDeadCode_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findDeadCode-findDeadCode.obj `if test -f 'findDeadCode.C'; then $(CYGPATH_W) 'findDeadCode.C'; else $(CYGPATH_W) '$(srcdir)/findDeadCode.C'; fi`

findPath-PathFinder.o: PathFinder/PathFinder.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findPath-PathFinder.o `test -f 'PathFinder/PathFinder.C' || echo '$(srcdir)/'`PathFinder/PathFinder.C

findPath-PathFinder.obj: PathFinder/PathFinder.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findPath-PathFinder.obj `if test -f 'PathFinder/PathFinder.C'; then $(CYGPATH_W) 'PathFinder/PathFinder.C'; else $(CYGPATH_W) '$(srcdir)/PathFinder/PathFinder.C'; fi`

findPath-semantics.o: PathFinder/semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findPath-semantics.o `test -f 'PathFinder/semantics.C' || echo '$(srcdir)/'`PathFinder/semantics.C

findPath-semantics.obj: PathFinder/semantics.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findPath-semantics.obj `if test -f 'PathFinder/semantics.C'; then $(CYGPATH_W) 'PathFinder/semantics.C'; else $(CYGPATH_W) '$(srcdir)/PathFinder/semantics.C'; fi`

findPath-findPath.o: PathFinder/findPath.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findPath-findPath.o `test -f 'PathFinder/findPath.C' || echo '$(srcdir)/'`PathFinder/findPath.C

findPath-findPath.obj: PathFinder/findPath.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findPath-findPath.obj `if test -f 'PathFinder/findPath.C'; then $(CYGPATH_W) 'PathFinder/findPath.C'; else $(CYGPATH_W) '$(srcdir)/PathFinder/findPath.C'; fi`

findSimilarFunctions-findSimilarFunctions.o: findSimilarFunctions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findSimilarFunctions_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findSimilarFunctions-findSimilarFunctions.o `test -f 'findSimilarFunctions.C' || echo '$(srcdir)/'`findSimilarFunctions.C

findSimilarFunctions-findSimilarFunctions.obj: findSimilarFunctions.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findSimilarFunctions_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findSimilarFunctions-findSimilarFunctions.obj `if test -f 'findSimilarFunctions.C'; then $(CYGPATH_W) 'findSimilarFunctions.C'; else $(CYGPATH_W) '$(srcdir)/findSimilarFunctions.C'; fi`

generatePaths-generatePaths.o: generatePaths.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(generatePaths_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o generatePaths-generatePaths.o `test -f 'generatePaths.C' || echo '$(srcdir)/'`generatePaths.C

generatePaths-generatePaths.obj: generatePaths.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(generatePaths_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o generatePaths-generatePaths.obj `if test -f 'generatePaths.C'; then $(CYGPATH_W) 'generatePaths.C'; else $(CYGPATH_W) '$(srcdir)/generatePaths.C'; fi`

linearDisassemble-linearDisassemble.o: linearDisassemble.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linearDisassemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o linearDisassemble-linearDisassemble.o `test -f 'linearDisassemble.C' || echo '$(srcdir)/'`linearDisassemble.C

linearDisassemble-linearDisassemble.obj: linearDisassemble.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(linearDisassemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o linearDisassemble-linearDisassemble.obj `if test -f 'linearDisassemble.C'; then $(CYGPATH_W) 'linearDisassemble.C'; else $(CYGPATH_W) '$(srcdir)/linearDisassemble.C'; fi`

magicScanner-magicScanner.o: magicScanner.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(magicScanner_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o magicScanner-magicScanner.o `test -f 'magicScanner.C' || echo '$(srcdir)/'`magicScanner.C

magicScanner-magicScanner.obj: magicScanner.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(magicScanner_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o magicScanner-magicScanner.obj `if test -f 'magicScanner.C'; then $(CYGPATH_W) 'magicScanner.C'; else $(CYGPATH_W) '$(srcdir)/magicScanner.C'; fi`

maxBijection-maxBijection.o: maxBijection.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(maxBijection_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o maxBijection-maxBijection.o `test -f 'maxBijection.C' || echo '$(srcdir)/'`maxBijection.C

maxBijection-maxBijection.obj: maxBijection.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(maxBijection_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o maxBijection-maxBijection.obj `if test -f 'maxBijection.C'; then $(CYGPATH_W) 'maxBijection.C'; else $(CYGPATH_W) '$(srcdir)/maxBijection.C'; fi`

nativeExecutionTrace-nativeExecutionTrace.o: nativeExecutionTrace.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nativeExecutionTrace_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nativeExecutionTrace-nativeExecutionTrace.o `test -f 'nativeExecutionTrace.C' || echo '$(srcdir)/'`nativeExecutionTrace.C

nativeExecutionTrace-nativeExecutionTrace.obj: nativeExecutionTrace.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nativeExecutionTrace_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nativeExecutionTrace-nativeExecutionTrace.obj `if test -f 'nativeExecutionTrace.C'; then $(CYGPATH_W) 'nativeExecutionTrace.C'; else $(CYGPATH_W) '$(srcdir)/nativeExecutionTrace.C'; fi`

recursiveDisassemble-recursiveDisassemble.o: recursiveDisassemble.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(recursiveDisassemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o recursiveDisassemble-recursiveDisassemble.o `test -f 'recursiveDisassemble.C' || echo '$(srcdir)/'`recursiveDisassemble.C

recursiveDisassemble-recursiveDisassemble.obj: recursiveDisassemble.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(recursiveDisassemble_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o recursiveDisassemble-recursiveDisassemble.obj `if test -f 'recursiveDisassemble.C'; then $(CYGPATH_W) 'recursiveDisassemble.C'; else $(CYGPATH_W) '$(srcdir)/recursiveDisassemble.C'; fi`

simulate-simulate.o: simulate.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(simulate_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o simulate-simulate.o `test -f 'simulate.C' || echo '$(srcdir)/'`simulate.C

simulate-simulate.obj: simulate.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(simulate_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o simulate-simulate.obj `if test -f 'simulate.C'; then $(CYGPATH_W) 'simulate.C'; else $(CYGPATH_W) '$(srcdir)/simulate.C'; fi`

stringDecoder-stringDecoder.o: stringDecoder.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stringDecoder_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stringDecoder-stringDecoder.o `test -f 'stringDecoder.C' || echo '$(srcdir)/'`stringDecoder.C

stringDecoder-stringDecoder.obj: stringDecoder.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(stringDecoder_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stringDecoder-stringDecoder.obj `if test -f 'stringDecoder.C'; then $(CYGPATH_W) 'stringDecoder.C'; else $(CYGPATH_W) '$(srcdir)/stringDecoder.C'; fi`

symbolicSimplifier-symbolicSimplifier.o: symbolicSimplifier.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSimplifier_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSimplifier-symbolicSimplifier.o `test -f 'symbolicSimplifier.C' || echo '$(srcdir)/'`symbolicSimplifier.C

symbolicSimplifier-symbolicSimplifier.obj: symbolicSimplifier.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSimplifier_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSimplifier-symbolicSimplifier.obj `if test -f 'symbolicSimplifier.C'; then $(CYGPATH_W) 'symbolicSimplifier.C'; else $(CYGPATH_W) '$(srcdir)/symbolicSimplifier.C'; fi`

trace-trace.o: trace.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trace_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o trace-trace.o `test -f 'trace.C' || echo '$(srcdir)/'`trace.C

trace-trace.obj: trace.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(trace_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o trace-trace.obj `if test -f 'trace.C'; then $(CYGPATH_W) 'trace.C'; else $(CYGPATH_W) '$(srcdir)/trace.C'; fi`

x86_call_targets-x86-call-targets.o: x86-call-targets.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86_call_targets_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86_call_targets-x86-call-targets.o `test -f 'x86-call-targets.C' || echo '$(srcdir)/'`x86-call-targets.C

x86_call_targets-x86-call-targets.obj: x86-call-targets.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86_call_targets_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86_call_targets-x86-call-targets.obj `if test -f 'x86-call-targets.C'; then $(CYGPATH_W) 'x86-call-targets.C'; else $(CYGPATH_W) '$(srcdir)/x86-call-targets.C'; fi`

x86_function_vas-x86-function-vas.o: x86-function-vas.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86_function_vas_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86_function_vas-x86-function-vas.o `test -f 'x86-function-vas.C' || echo '$(srcdir)/'`x86-function-vas.C

x86_function_vas-x86-function-vas.obj: x86-function-vas.C
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86_function_vas_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86_function_vas-x86-function-vas.obj `if test -f 'x86-function-vas.C'; then $(CYGPATH_W) 'x86-function-vas.C'; else $(CYGPATH_W) '$(srcdir)/x86-function-vas.C'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pkgincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pkgincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(pkgincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(pkgincludedir)" || exit $$?; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(pkgincludedir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile $(PROGRAMS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-pkgincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-pkgincludeHEADERS

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am check-local clean \
	clean-binPROGRAMS clean-generic clean-libtool clean-local \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-pkgincludeHEADERS \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-pkgincludeHEADERS

.PRECIOUS: Makefile


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)

# Temporary workaround for lack of AM_EXTRA_RECURSIVE_TARGETS in automake 1.11 and 1.12 [Matzke, 2016-09-14]
# The check for "." is because $ROSE/tests adds "." to SUBDIRS which would otherwise result in infinite recursion.
# The checks for other names are because we don't want to recurse into some directories that don't include this
# file and therefore don't have this rule (but that means these names can't be test subdirecties elsewhere either).
check-smoke check-nonsmoke check-all:
	@for subdir in $(SUBDIRS); do						\
		if [ "$$subdir" != .						\
			-a "$$subdir" != libltdl				\
			-a "$$subdir" != config					\
			-a "$$subdir" != EDG					\
			-a "$$subdir" != DLX					\
			-a "$$subdir" != MFB					\
			-a "$$subdir" != MDCG					\
			-a "$$subdir" != KLT					\
			-a "$$subdir" != 3rdPartyLibraries			\
			-a "$$subdir" != roseHPCToolkit				\
			-a "$$subdir" != projects				\
			-a "$$subdir" != docs					\
			-a "$$subdir" != tools ]; then				\
			echo "Making $@ in $$subdir";				\
			$(MAKE) $(AM_MAKEFLAGS) -C "$$subdir" $@ || exit 1;	\
		fi;								\
	done
	$(MAKE) $(AM_MAKEFLAGS) $@-local

check-smoke-local check-nonsmoke-local:
check-all-local: check-smoke-local check-nonsmoke-local

# Temporary until Jenkins and the Matrix are fixed to run "make check-all" isntead of "make check".  The correct version
# should be that check-local depends only on check-smoke-local. [Matzke, 2016-09-21].
check-local: check-smoke-local check-nonsmoke-local

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: check-smoke check-nonsmoke check-all check-smoke-local check-nonsmoke-local check-all-local clean-test-targets

#------------------------------------------------------------------------------------------------------------------------
# Not distributed; not part of the Git repo

@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@detectConstants: detectConstants.C
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(top_builddir)/libtool --mode=compile	\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(CXX) -c				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    -DUSE_PARTITIONER2			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(CFLAGS)				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(CPPFLAGS)				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    -I$(top_builddir)			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(ROSE_INCLUDES)			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    -o detectConstants.o $^
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	$(top_builddir)/libtool --mode=link	\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(CXX)				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(CFLAGS)				\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(LIBS_WITH_RPATH)			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    $(ROSE_LIBS)			\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	    -o $@ detectConstants.lo
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@testAdaptiveRegisters.passed: $(srcdir)/specimens/x86-64-adaptiveRegs		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@			      $(srcdir)/TestAnswers/testAdaptiveRegisters.ans		\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@			      debugSemantics
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@	@$(RTH_RUN)												\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@		TITLE="RegisterStateGeneric [$@]"								\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@		CMD="./debugSemantics --test-adaptive-registers --semantics=symbolic --track-writers=last $<"	\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@		ANS=$(srcdir)/TestAnswers/testAdaptiveRegisters.ans						\
@ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@		$(top_srcdir)/scripts/test_with_answer $@

#------------------------------------------------------------------------------------------------------------------------
# Makefile boilerplate

clean-local:
	rm -f $(MOSTLYCLEANFILES)

check-nonsmoke: $(TEST_TARGETS)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
