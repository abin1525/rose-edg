
The goal is to generate code that looks as clean as:

     for (int j=0; j < sizeY; j++)
          for (int i=0; i < sizeX; i++)
               data[i+j*sizeX] =
                    data[(i-1)+j*sizeX] + data[(i+1)+j*sizeX] +
                    data[i+(j-1)*sizeX] + data[i+(j+1)*sizeX];
(since at this point the loop invariant parts of the subscript computation
will be lifted out of the loops and we will get:
     for (int j=0; j < sizeY; j++)
        {
          k0 = j*sizeX;
          k1 = (j-1)*sizeX;
          k2 = (j+1)*sizeX;
          for (int i=0; i < sizeX; i++)
               data[i+k] = data[(i-1)+k] + data[(i+1)+k] + data[i+k1] + data[i+k2];
        }
And we could go further ...)

This code can be optimized by the compiler quite well, in general
(except that the linearized subscripts require more work to analyze
and so might not be done well except on the best compilers). Basicly
the commpiler can't determin if the accesses are unique because the size of
data in each axis is not known.

So asking for this to be done well could be an important step to getting better code
but this is slightly off topic.  It is worth while to ask for an example of 
the code you want to have the object-oriented code to be optimized as well as
(just to separate the issues of OO optimization from C code (with pointers)
optimization from C code with linearized substripts mimicing multidimentional arrays
from F77 code where there are not aliasing or pointer issues to analyze.


If we argue that the compiler should be able to optimize the following to generate
more efficent code equivalent to hand written array access then a case where
such a proposed transformation would get the wrong result is all that is required to 
counter the argument.  So I will construct such a case.

Set the pointer to the size to the pointer to the start of the data array.
Then the two are clearly aliased.

     D.size = D.data;

Then 
     for (int j=0; j < D.size[1]; j++)
          for (int i=0; i < D.size[0]; i++)
               D.data[i+j*D.size[0]] =
                    D.data[(i-1)+j*D.size[0]] + D.data[(i+1)+j*D.size[0]] +
                    D.data[i+(j-1)*D.size[0]] + D.data[i+(j+1)*D.size[0]];

is not equivalent to 

  // Scalar indexing showing transformation
     double* Dptr = D.data;
     int size0 = D.size[0];
     int size1 = D.size[1];
     for (int j=0; j < size1; j++)
          for (int i=0; i < size0; i++)
               Dptr[i+j*size] =
                    Dptr[(i-1)+j*size0] + Dptr[(i+1)+j*size0] +
                    Dptr[i+(j-1)*size0] + Dptr[i+(j+1)*size0];


since in the first of the two examples the subscript indexing depends upon 
the initial data computed in the first few iterations (through the aliasing of the
size array with the data array.

More general code:

          int data[6] = {1,0,1,0,1,0}
          for (int i=0; i < 6; i++)
               data[i+data[i]] = data[(i-1)+data[i]];
equal to:
          for (int i=0; i < 6; i++)
               data[i+1] = data[i];
but only for a specific input {1,0,1,0,1,0}

i = 0 --> data[1] = data[0] data = {1,1,1,0,1,0}
i = 1 --> data[2] = data[1] data = {1,1,1,0,1,0}
i = 2 --> data[3] = data[2] data = {1,1,1,1,1,0}
i = 3 --> data[4] = data[3] data = {1,1,1,1,1,0}
i = 4 --> data[5] = data[4] data = {1,1,1,1,1,1}


What information in the program could tell the compiler to do 
the optimization that is desired?

1) D.data and D.size might be declared as static arrays instead of arrays allocated
   through a pointer.
2) They might be of different types?
3) The declaration and usage could be local so that global analysis is not required
4) If the compiler can successfully determin the non aliasing of D.data dn D.size
   if could scalarize the accesses to D.size where it is accessed by a constant 
   subscript.
5) If the compiler got this far, then it could hoist the loop invariant parts of the
   subscript computation.
6) At this point we are just about at the level of the original non-object-oriented
   version and with most of the optimizations that could be done at that point
   (except for the tangent on the equivalence of linearized subscripts vs.
   indexing of statically defined multi-dimentional arrays).








