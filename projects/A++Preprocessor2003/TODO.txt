Remaining work for initial release:

X  initialize _lengthX variables

   transformations should check for loop dependence

X  different levels of optimization

   timing tests

   option to NOT perform optimization

   remove the char* types present in the code and replace with string objects


Later Releases should include:
     1) Where statement transformations in A++/P++ Preprocessor
     2) Indirect addressing in A++/P++ Preprocessor
     3) Scalar Indexing transformation in A++/P++ Preprocessor
     4) Cache optimized version of loop carry dependence transformation
     5) Temporal locality optimization for stencil array statements
     6) Use proposed timing transformation and error checking transformations
        (see ROSE TODO list).



Scalar Indexing Transformation:

   The motivation for this optimization is that the computation of A(i) requires the use of member data in the object A
   and so the inlined version of the code uses A.stride in it's computation instead of a spearately declared integer stride.
   The result after optimization is poorer performance for the inlined function since A.stride can't be optimized as well
   as a separate integer variable. The overall effect on performance is about a factor of 2 (or so it seems).

     int lengthOfA0 = A.length(0);
     for (int i=0; i < lengthOfA0; i++)
          A(i) = 0;

     int lengthOfA0 = A.length(0);
     int _strideOfA0 = A.getStride(0);
     double* _A_pointer = A.getDataPointer();
     #define SC_A ((i)*_A_stride0)
     for (int i=0; i < lengthOfA0; i++)
          A_pointer[SC_A(i)] = 0;


General Timing Transformation:

     long _startClock,_endClock;
     long _originalStatementTime;
     long _transformationStatementTime;
     _startClock = clock();
     <ORIGINAL STATEMENTS>
     _endClock = clock();
     _originalStatementTime = _endClock - _startClock;
     _startClock = clock();
     <TRANSFORMATION STATEMENTS>
     _endClock = clock();
     _transformationStatementTime = _endClock - _startClock;

     Issues of General Timing Transformation:
         1) Need to make sure that cache is flushed for both computations or o0ptionally 
            that warmup loops are computed before timing starts.
