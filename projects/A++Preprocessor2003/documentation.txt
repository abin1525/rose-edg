                 A++/P++ Preprocessor

Complexity of specifying transformations on an AST ammounts to:
      "What to you know, and when to you know it?"

This file represent the initial documentatin for the A++/P++ preprocessor.

   Statements that are handled include:

A = B;
A = B + C;
A(I) = B(I) + C(I);
A(I,J,K) = B(I,J,K) + C(I,J,K);


1) Statements not transformed optimally include:

// Scalar indexing in outer loop (not much of an issue)
A(I,0) = B(I,2);

// Scalar indexing in inner most loop (significant penalty)
// there is existing support for this to be optimized but 
// it is not tested.
A(1,J) = B(2,J);

// The current transformation treats all dimensions uniformally in the sense that 
// the strides A_I_J_stride1 and A_I_K_stride1 will be created as separate variables
// even though they have the same value and we could recognise this at compile time.
// When the transformations treat the different dimensions separately then a single
// variable will be used (A_I_stride1).  There is insufficient support internally 
// for this optimization.
A(I,J) = A(I,K);




2) Statements not handled properly include:

A = B = C; // not sure it this would work

// no mechanism for naming (B+C) though (B+C)(I) == B(I) + C(I) would simplify the expression and
// permit it to be optimized.
A(I) = (B+C)(I);

// requires simplified expression editing mechanism in ROSE (beyond that available in SAGE)
// transformation would be T = foo(B); A = T + C;
A = foo(B) + C;
foo(A) = B;

// Prefix and postfix operators are not distinguished (default is postfix)
A++;

3) Current problems with the implementation

    a) Name generation does not guarentee uniqueness (_A_I_J is a generated name, 
       but _A_I_J could be a user defined variable in which case there could 
       either be a conflict or the wrong variable would be used).

    b) The test for if a scalar value is input to the doubleArray::operator() member function
       is only if the a parameter of the arg list is a SgConstructorInitializer and the number of
       arguments to it's parameter list is 1.  This is not a robust test!

    c) More queries could be implemented to make up for what I current query through a simple 
       set of lists of variables and the index objects used to index each variable.  This simple
       data base could be eliminated by asking some of the queries in a different location and
       propogating the results through the synthesized attributed (more thant the current
       implementation does already).

    d) No mechanism presently to recognize that a statement is not transformable and to skip the
       transformation.














