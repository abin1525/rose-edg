module strtest1
imports simple-traversal fixpoint-traversal list term-io integers
signature
  sorts Term
  constructors
    var: String -> Term
    add: Term * Term -> Term
    addList: [Term] -> Term
    multiply: Term * Term -> Term
    intc: Int -> Term
strategies
  AddChange: add(a, b) -> addList([a, b])
  AddFlattenHelper = (addList(a) -> a) <+ (x -> [x])
  AddFlatten = bottomup(try(addList(mapconcat(AddFlattenHelper))))
  AddFold = bottomup(try(AddChange)); AddFlatten
  AddUnfold1: addList([]) -> intc(0)
  AddUnfold2: addList([a]) -> a
  AddUnfold3: addList([a, b*]) -> add(addList([b*]), a)
  AddUnfold = bottomup(try(addList(reverse)));
	      innermost(AddUnfold1 + AddUnfold2 + AddUnfold3)
  DistributionL: multiply(add(a, b), c) -> add(multiply(a, c), multiply(b, c))
  DistributionR: multiply(a, add(b, c)) -> add(multiply(a, b), multiply(a, c))
  Distribution = DistributionL + DistributionR
  MultConstFold: multiply(intc(a), intc(b)) -> intc(<mul>(a, b))
  AddConstFold: add(intc(a), intc(b)) -> intc(<add>(a, b))
  MultConstantsToLeft: multiply(a, intc(b)) -> multiply(intc(b), a)
  IsMultWithConstant = ?multiply(intc(a), b)
  FindMultsWithSameConstant = addList(
    split-fetch-keep(IsMultWithConstant);
    (id, id, split-fetch-keep(IsMultWithConstant));
    ((a, multiply(intc(x), z), (b, multiply(intc(y), z), c)) -> 
      <conc>(a, [multiply(addList([intc(<add>(x, y))]), z) | <conc>(b, c)])))
  MultBy1Left: multiply(intc(1), a) -> a
  MultBy1Right: multiply(a, intc(1)) -> a
  MultBy0Left: multiply(intc(0), a) -> intc(0)
  MultBy0Right: multiply(a, intc(0)) -> intc(0)
  ConstantSimplifications = 
    bottomup(try(MultBy1Left + MultBy1Right + MultBy0Left + MultBy0Right))
  main = Tl; 
	 map(ReadFromFile; 
	     innermost(Distribution);
	     AddFold;
	     bottomup(try(MultConstantsToLeft));
	     innermost(MultConstFold);
	     innermost(FindMultsWithSameConstant);
	     AddUnfold;
	     ConstantSimplifications);
	 ([x] -> x)
