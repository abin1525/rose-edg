package mops;
// $Id: Node.java,v 1.1 2006/09/08 11:39:23 dquinlan Exp $

import java.io.*;
import java.util.*;

/**
 * Represent a node in the CFG
 */
public class Node
{
  public Node()
  {
    inEdges = new Vector();
    outEdges = new Vector();
    label = null;
    sequenceNumber = 0;
    address = 0;
    data = null;
  }

  public Node(Vector inEdges, Vector outEdges)
  {
    this.inEdges = inEdges;
    this.outEdges = outEdges;
    label = null;
    sequenceNumber = 0;
    address = 0;
    data = null;
  }
  
  public final void setAddress(int address)
  {
    this.address = address;
  }

  public final int getAddress()
  {
    return address;
  }
  
  public void setLabel(String label)
  {
    this.label = label;
  }

  public String getLabel()
  {
    return label;
  }

  public final void addInEdge(Edge edge)
  {
    inEdges.add(edge);
  }

  public final Vector getInEdges()
  {
    return inEdges;
  }

  public final void addOutEdge(Edge edge)
  {
    outEdges.add(edge);
  }

  public final Vector getOutEdges()
  {
    return outEdges;
  }

  public final void setSN(int sequenceNumber)
  {
    this.sequenceNumber = sequenceNumber;
  }

  public final int getSN()
  {
    return sequenceNumber;
  }

  /**
   * Incoming edges
   */
  protected Vector inEdges;

  /**
   * Outgoing edges
   */
  protected Vector outEdges;

  /**
   * Label of this node.  It may be
   * <ul>
   * <li> "filename:lineno", or </li>
   * <li> "address1:address2:...:addressn" resulting from CfgCompact </li>
   * </ul>
   */
  protected String label;

  /**
   * Used in
   * <ul>
   * <li> Pda.read(): numbering each node uniquely when constructing a PDA
   * from the CFG </li>
   * <li> Cfg.defUse(): storing the defuse value </li>
   * </ul>
   */
  protected int sequenceNumber;

  /**
   * The address of this node in the CFG generated by rc.  This is kept
   * so as to allow for mapping from the compacted CFG to the original CFG
   */
  protected int address;

  protected Object data;
}
