Mint
====
This project is only tested under Linux boxes.
Mac OS X support is not yet available. 

Known bugs:  Liao, 2/6/2013
* You have to be very careful when writing mint pragmas (following the examples is the best way)
* The pragma parser is very sensitive to the spacing in pragmas!!
   midend/mintPragmas/MintPragmas.C needs to be fixed to handle pragmas with no space between keywords and "("/")"


Compile Mint
------------
The source directory is under src.
Set up the paths in the rose-new.mk based on your own ROSE
installation.

under src directory, type make to compiler Mint.

Run Mint
--------
You can call the Mint Translator with the "mintTranslator" command followed by the input filename.

$ ./mintTranslator [options] input_file.c

optimization options:
         -opt:shared       : turns on shared memory optimization
                                                     -opt:shared=[1-8] default is 8.
         -opt:register     : turns on register optimization
         -opt:preferL1     : favors L1 cache

Input:
Input to the translator is a c code annotated with Mint pragmas. Make sure that the input file has a .c
extension. We had experienced some problems with .C, cpp or cc extensions.  So, make sure that the file extension
is set to .c. The path to the input file can be absolute or relative path.

Output:
Mint will generate an output file in the current directory with a "mint_" suffix and .cu extension.

Optimization Options:
There are couple compiler options (can be used together or separately).
Two most important flags are shared and register: The flag shared optimizes
for shared memory, the flag register optimizes for registers.

Here is an example run:
./mintTranslator  -opt:shared -opt:register example/heat3D.c


