Compass -- Core
---------------

[appendix]
Files
~~~~~

- compass.C
- compass.h

  Core logic for Compass checkers.

- compass.inc

- compass/tools/compass/compassMain.C
------------------------------------------------------------------------------
[source, c++]
~~~~~~~~~~~~~~~~~
std::vector<const Compass::Checker*> traversals;               <1>
...
buildCheckers(traversals, params, output, project);            <2>
...
std::vector<const Compass::Checker*>::iterator itr;            <3>
for ( itr = traversals.begin();
      itr != traversals.end();
      itr++ )
{
    ...
    (*itr)->run(params, &output);
    ...
}
~~~~~~~~~~~~~~~~~
<1> A list of all the user-enabled Checkers.
<2> Build each Checker.
<3> Run each user-enabled Checker.
------------------------------------------------------------------------------

- compass.C.gergo
- compass.h.gergo

  2008-08-05: Gary M. Yuan

  Gergo has proposed changes to compass.h and compass.C
  which are inconsistant with Rich's MPI checker. So
  I have saved these files in compass.h.gergo and compass.C.gergo
  and reverted to the version that Rich used.

- compass_dirs.inc
- compassDocs.tex
- compassEmptyMain.C
- compass_parameters
- compassQRoseMain.C
- compassTestMain.C
- generate_asciidoc.rb
- Makefile.am
- Makefile.in
- Makefile.in~
- README

- compass/src/in/buildCheckers.C.in

[source, c++]
----
#line 1 "buildCheckers-inserted-code"
  // @@@ -- checker names inserted here
----


- compass/src/in/buildCheckers.C

[source, c++]
----
extern const Compass::Checker* const allocateAndFreeMemoryInTheSameModuleChecker;
...
try
{
  retVal.push_back(allocateAndFreeMemoryInTheSameModuleChecker);
}
catch (const std::exception &e)
{
  ...
}

----

- compass/tools/compass/Makefile.am

[source, makefile]
.Links Checkers into libCompassCheckers.la
----
include $(top_srcdir)/projects/compass/src/compassSupport/compass.inc
...
lib_LTLIBRARIES = libCompassCheckers.la
libCompassCheckers_la_SOURCES = buildCheckers.C checkers.h

libCompassCheckers.la: $(libCompassCheckers_la_OBJECTS) $(libCompassCheckers_la_DEPENDENCIES) $(COMPASS_CHECKER_OBJS)
  $(CXXLINK) -rpath $(libdir) $(libCompassCheckers_la_LDFLAGS) $(libCompassCheckers_la_OBJECTS) $(COMPASS_CHECKER_OBJS) $(libCompassCheckers_la_LIBADD) $(LIBS)
----


- compass/tools/compass/checkers.h
[source, c++]
----
extern const Compass::Checker* const allocateAndFreeMemoryInTheSameModuleChecker;
----

- $BUILD/compass/tools/compass/compass_makefile.inc

[source, makefile]
.This Makefile logic takes care of building all of the Compass Checkers.
----
# This is a generated file

COMPASS_CHECKER_DIRECTORIES = \
  allocateAndFreeMemoryInTheSameModule \
...
COMPASS_INCLUDES = \
  -I$(compass_checker_dir)/allocateAndFreeMemoryInTheSameModule \
  -I$(compass_checker_dir)/allowedFunctions \
...
COMPASS_CHECKER_SRCS = \
  allocateAndFreeMemoryInTheSameModule/allocateAndFreeMemoryInTheSameModule.C \
  allowedFunctions/allowedFunctions.C \
...
COMPASS_CHECKER_OBJS = \
  allocateAndFreeMemoryInTheSameModule.lo \
  allowedFunctions.lo \
...
COMPASS_CHECKER_TESTS = \
   allocateAndFreeMemoryInTheSameModule/allocateAndFreeMemoryInTheSameModuleTest1.C \
   allowedFunctions/allowedFunctionsTest1.C \
...
COMPASS_CHECKER_TEST_LABELS = \
  testAllocateAndFreeMemoryInTheSameModule \
  testAllowedFunctions \
...
COMPASS_CHECKER_TEX_FILES = \
  allocateAndFreeMemoryInTheSameModuleDocs.tex \
  allowedFunctionsDocs.tex \
...
# Compass checker object file build rules
allocateAndFreeMemoryInTheSameModule.lo: $(compass_checker_dir)/allocateAndFreeMemoryInTheSameModule/allocateAndFreeMemoryInTheSameModule.C
  $(LTCXXCOMPILE) -c -o allocateAndFreeMemoryInTheSameModule.lo $(compass_checker_dir)/allocateAndFreeMemoryInTheSameModule/allocateAndFreeMemoryInTheSameModule.C
...
----

