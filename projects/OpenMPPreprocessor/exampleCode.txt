
OpenMPSynthesizedAttribute
OpenMPTraversal::evaluateRewriteSynthesizedAttribute (
     SgNode* astNode, OpenMPInheritedAttribute inheritedAttribute,
     SubTreeSynthesizedAttributes synthesizedAttributeList )
   {
     OpenMPSynthesizedAttribute returnAttribute(astNode);

     if ( OmpUtility::isOmpParallelFor(astNode) )
        {
          SgForStatement *forStatement = isSgForStatement(astNode);
          ROSE_ASSERT (forStatement != NULL);

          string supportingFunction = " \n\
void supportingOpenMPFunction_$ID ( $SHARED_VAR_DECLARATION_LIST ) \n\
   { \n\
     $PRIVATE_VAR_LIST; \n\
     int intone_start, intone_end, intone_last /* ,intone_loopid */; \n\
     Nanos::begin_for($LB,$UB,$STEP,$CHUNKSIZE,$SCHEDULETYPE /* ,intone_loopid */ ); \n\
     while ( Nanos::next_iters(intone_start,intone_end,intone_last)) \n\
        { \n\
          for ($LOOPINDEX = intone_start; $LOOPINDEX <= intone_end; $LOOPINDEX += $STEP) \n\
             { \n\
               $LOOP_BODY; \n\
             } \n\
        } \n\
     Nanos::end_for(true); \n\
   } \n\
\n\
void wrapper_supportingOpenMPFunction_$ID ( int* intone_me_01, int* intone_nprocs_01, int* intone_master01, $SHARED_VAR_DECLARATION_LIST) \n
   { \n\
     supportingOpenMPFunction_$ID($SHARED_VAR_PARAMETER_LIST); \n\
   } \n\
\n\
";

          string transformationVariables = " \
     int intone_lme_01; \n\
     int intone_master01; \n\
     int intone_me_01; \n\
     int intone_nprocs_01; \n\
     intone_nprocs_01 = Nanos::numberOfCPUs();";

          string spawnParallel = " \
     extern void wrapper_supportingOpenMPFunction_$ID(); \n\
     int intone_nargs = $NUMBER_OF_PARAMETERS; \n\
     Nanos::spawn(wrapper_supportingOpenMPFunction_$ID,intone_nargs,intone_nprocs_01,$SHARED_VAR_PARAMETER_LIST); \n\
";

       // Edit the function name and define a unique number as an identifier
          string uniqueID = buildUniqueFunctionID();
          supportingFunction =
             StringUtility::copyEdit(supportingFunction, "$ID",uniqueID);
          spawnParallel = StringUtility::copyEdit( spawnParallel, "$ID",uniqueID);

       // Edit the loop parameters into place
          string loopBody =
             forStatement->get_loop_body()->unparseToString();
          supportingFunction =
             StringUtility::copyEdit(supportingFunction, "$LOOP_BODY",loopBody);

       // similar copyEdits for $LOOPINDEX, $LB, $UB, $STEP, $CHUNKSIZE, $SCHEDULETYPE

       // Edit the OpenMP parameters into place
       // ompParallelFor *ompParallelFor = isOmpParallelFor(pragmaStatement);
       // privateVarList = ompParallelFor->privateVarList();
       // sharedVarList = ompParallelFor->sharedVarList();

          OmpUtility ompData (astNode);
          string privateVarDeclarationList =
             ompData.generatePrivateVariableDeclaration();
          string sharedVarFunctionParameterList =
             ompData.generateSharedVariableFunctionParameters();
          string sharedVarFunctionParameterDeclarationList =
             ompData.generateSharedVariableFunctionParameterDeclarations();

          string loopIndex    = ompData.getOmpForLoopIndex();
          string lowerBound   = ompData.getLowerBound();
          string upperBound   = ompData.getUpperBound();
          string stepSize     = ompData.getStepSize();
          string chunkSize    = ompData.getChunkSize();
          string scheduleType = ompData.getSchedule();

          string numberOfParameters = ompData.getNumberOfParameters();

          supportingFunction =
             StringUtility::copyEdit(supportingFunction,
             "$SHARED_VAR_DECLARATION_LIST",sharedVarFunctionParameterDeclarationList);
          supportingFunction =
             StringUtility::copyEdit(supportingFunction,
             "$SHARED_VAR_PARAMETER_LIST",sharedVarFunctionParameterList);
          spawnParallel = StringUtility::copyEdit(spawnParallel,
             "$SHARED_VAR_PARAMETER_LIST",sharedVarFunctionParameterList);
          supportingFunction =
             StringUtility::copyEdit(supportingFunction,
             "$PRIVATE_VAR_LIST",privateVarDeclarationList);

          supportingFunction = StringUtility::copyEdit(supportingFunction, "$LOOPINDEX",loopIndex);
          supportingFunction = StringUtility::copyEdit(supportingFunction, "$LB",lowerBound);
          supportingFunction = StringUtility::copyEdit(supportingFunction, "$UB",upperBound);
          supportingFunction = StringUtility::copyEdit(supportingFunction, "$STEP",stepSize);
          supportingFunction = StringUtility::copyEdit(supportingFunction, "$CHUNKSIZE",chunkSize);
          supportingFunction = StringUtility::copyEdit(supportingFunction, "$SCHEDULETYPE",scheduleType);

          spawnParallel = StringUtility::copyEdit(spawnParallel, "$NUMBER_OF_PARAMETERS",numberOfParameters);

          AST_Rewrite::addSourceCodeString( returnAttribute,
                         "#include \"nanos.h\"",
                         inheritedAttribute,
                         AST_Rewrite::GlobalScope,
                         AST_Rewrite::TopOfScope,
                         AST_Rewrite::TransformationString,
                         false);

          AST_Rewrite::addSourceCodeString( returnAttribute,
                         supportingFunction,
                         inheritedAttribute,
                         AST_Rewrite::GlobalScope,
                         AST_Rewrite::BeforeCurrentPosition,
                         AST_Rewrite::TransformationString,
                         false);

          AST_Rewrite::addSourceCodeString(
               returnAttribute,
               transformationVariables,
               inheritedAttribute,
               AST_Rewrite::LocalScope,
               AST_Rewrite::TopOfScope,
               AST_Rewrite::TransformationString,
               false);

          AST_Rewrite::addSourceCodeString( returnAttribute,
                         spawnParallel,
                         inheritedAttribute,
                         AST_Rewrite::LocalScope,
                         AST_Rewrite::ReplaceCurrentPosition,
                         AST_Rewrite::TransformationString,
                         false);
        }

     return returnAttribute;
   }

