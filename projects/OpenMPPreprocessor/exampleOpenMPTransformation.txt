
#if 0
  // Original A++ code before transformation to explicit for loops
     int n;
     Range I,J,K;
     floatArray A(n,n,n);
     A(I,J,K) = 0;
#endif

#include "nanos.h" 

void supportingOpenMPFunction__0_0(
   float * AIJKpointer,int _length1,
   int _length2,int _size1,int _size2)
   {
     int _1; 
     int _2; 
     int _3; /* ,intone_loopid */
     int intone_start; 
     int intone_end; 
     int intone_last; /* ,intone_loopid */
     Nanos::begin_for(0,100,10,5,1); 
     while(Nanos::next_iters(intone_start,intone_end,intone_last))
        { 
          for (_3 = intone_start; _3 <= intone_end; _3 += 10)
             { 
               for (_2 = 0; _2 < _length2; _2++)
                 { 
                   for (_1 = 0; _1 < _length1; _1++)
                      { 
                        AIJKpointer[((_1 + _2 * _size1) + _3 * _size2)] = 0; 
                      } 
                 }
             } 
        }
     Nanos::end_for(true); 
   }

void wrapper_supportingOpenMPFunction__0_0(
     int * intone_me_01,int * intone_nprocs_01,
     int * intone_master01,float * AIJKpointer,
     int _length1,int _length2,int _size1, int _size2)
   { 
     supportingOpenMPFunction__0_0(AIJKpointer,_length1,_length2,_size1,_size2); 
   }

int main()
   { 
     int intone_lme_01; 
     int intone_master01; 
     int intone_me_01; 
     int intone_nprocs_01; 
     intone_nprocs_01 = Nanos::numberOfCPUs();
     int _1; int _2; int _3; 
     int _length1; int _length2; int _length3; 
     int _size1; int _size2; 
     float * AIJKpointer; 
     #define SC(x1,x2,x3) /* case UniformSizeUnitStride */ (x1)+(x2)*_size1+(x3)*_size2
     extern void wrapper_supportingOpenMPFunction__0_0();
     int intone_nargs = 5;
     Nanos::spawn(wrapper_supportingOpenMPFunction__0_0,intone_nargs,intone_nprocs_01,
     AIJKpointer,_length1,_length2,_size1,_size2);
     return 0;
   }
