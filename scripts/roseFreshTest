#!/bin/bash -x
# This script does a fresh checkout of ROSE and conducts series tests
# Please provide your customized configurations in a .sh file before using this script:
#
# example .sh file: rose/scripts/roseFreshTestStub-Jeremiah-asmAsEnum.sh, which sets 
#
# x. Environment variables,
# x. The path to the source and build directories of ROSE
# x. The configuration options for building ROSE
# x. Email notification recipients, etc.  
# x. Enable upload roseCompiler website
# x. Enable load ROSE distribution as vendor drop to the SciDAC repository
#
# Caution: 
#    Be extremely careful when change the directory layout of the test dir.
#    Other scripts may depend on it.     
#    
# Usage ------------------
# manual run it:
#      ./roseFreshTest yourConfiguration.sh 
#
# automatically run it as a daily cron job running at 2:30AM
#   $ crontab -e
#   30 2 * * * /home/liao6/rose/scripts/roseFreshTest /path/to/yourconfigStub.sh
#
# Liao, Jeremiah, 2/7/2008
# Last modified 5/18/2009
#------------------------------------------------------
if [ $# -lt 1 ]
then
  echo This script needs at least one argument
  echo Example:$0 your_config_stub.sh
  exit 1
fi

#------------------------------------------------------
# Configuration Section
#------------------------------------------------------
# Obtain the configuration file from the first argument of the script
user_config_file="$1"
shift
. $user_config_file

# Assume we are in the ROSE/scripts directory
myuserid=`whoami`
myname="`./getRealName "$myuserid" || echo "$myuserid"`"

#------------------------------------------------------
# Preprocessing Section
#------------------------------------------------------
rm -rf ${ROSE_TOP}
mkdir -p ${ROSE_TOP}

# we update ChangeLog2 when needed here
# We now save ChangeLog2 into the test dir and no longer commit it to the svn repository

# Only Liao can enable this option now due to the installation of the required software
if [ 0$ENABLE_UPLOAD_CHANGELOG2 -ne 0 ] ; then
  # update the log
  /home/liao6/rose/scripts/updateChangeLog2.sh ${ROSE_TOP}
  if [ $? -ne 0 ]; then
    echo "Error: updateChangeLog2.sh finishes abnormally!" 
    exit 1
  else
    echo "updateChangeLog2.sh finishes normally."
  fi
fi

set -e
cd ${ROSE_TOP}
# This is required so that the DESTDIR part of "make distcheck" doesn't fail by
# running out of space on /tmp on tux270
mkdir tmp
TMPDIR=${ROSE_TOP}/tmp/
export TMPDIR
#------------------------------------------------------
# Starting Section
#------------------------------------------------------
#Exit immediately if a command fails
set -e

# SVNVERSIONOPTION is an optional option supplied in the configuration stub
# default is the head reversion.It is one of the -r options in "svn help checkout"
if [ "x$SVNVERSIONOPTION" = "x" ]; then SVNVERSIONOPTION="HEAD"; fi
svnversion=`${SVN} info -r${SVNVERSIONOPTION} ${ROSE_SVNROOT} | grep '^Revision: ' | cut -f 2 -d \ `
svnmodificationdate=`${SVN} info -r${SVNVERSIONOPTION} ${ROSE_SVNROOT} | grep '^Last Changed Date: ' | cut -f 4- -d \ `
#------------------------------------------------------
# Sending an email notifying the start of the test ....
#------------------------------------------------------
(
if [ -n "$TIMESTAMP" ]; then
  if [ 0$SHOW_STUB_ON_EMAIL_SUBJECT -ne 0 ] ; then
    echo "Subject: $user_config_file $TIMESTAMP on `hostname` 1. start" > mailtext1
  else
    echo "Subject: ROSE test $TIMESTAMP on `hostname` 1. start" > mailtext1
  fi  
else
  echo "Subject: Starting ROSE test $$ on `hostname`" > mailtext1
fi  
echo "From: ROSE regression tester on `hostname | cut -f 1 -d .` <`whoami`@llnl.gov>" >> mailtext1
echo "Reply-to: $myname <`whoami`@llnl.gov>" >> mailtext1
echo "" >> mailtext1
echo ">>> See build log in ${ROSE_TOP}/buildlog on `hostname` for status" >> mailtext1
echo "SVN root = ${ROSE_SVNROOT}" >> mailtext1
echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> mailtext1
echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext1
echo "Make flags = ${MAKEFLAGS}" >> mailtext1
echo "Host name = `hostname`" >> mailtext1
echo "System info = `uname -a`" >> mailtext1
echo "" >> mailtext1
echo "> Command versions" >> mailtext1
(automake --version | head -1 || echo "automake not found") >> mailtext1
(autoconf --version | head -1 || echo "autoconf not found") >> mailtext1
(make --version | head -1 || echo "make not found") >> mailtext1
(g++ --version | head -1 || echo "g++ not found") >> mailtext1
(gcc --version | head -1 || echo "gcc not found") >> mailtext1
(bison --version | head -1 || echo "bison not found") >> mailtext1
echo -n "doxygen " >> mailtext1
(doxygen --version || echo "not found") >> mailtext1
dot -V >> mailtext1 2>&1 || echo "dot not found" >> mailtext1
(libtool --version | sed '2,$d' || echo "libtool not found") >> mailtext1 # head -1 crashes
(latex --version | head -1 || echo "latex not found") >> mailtext1
(latex2html -v | grep -w LaTeX2HTML || echo "latex2html not found") >> mailtext1
(swig -version | grep -w SWIG || echo "swig not found") >> mailtext1
# JJW -- BOOST_ROOTX is used in my scripts because our configure scripts use
# BOOST_ROOT as a way to find Boost so we don't really want to rely on having
# that variable set
(grep '#define *BOOST_LIB_VERSION' ${BOOST_ROOT:-$BOOST_ROOTX}/include/*/boost/version.hpp | cut -f 3 -d ' ' | tr -d '"' | tr _ . | sed 's/^/Boost version: /' || echo "Boost not found") >> mailtext1
echo "" >> mailtext1
echo "> Environment:" >> mailtext1
printenv >> mailtext1
)

/usr/sbin/sendmail -i $MAILADDRS < mailtext1

timer="/usr/bin/time"

#------------------------------------------------------
#  Building and Making Section
#------------------------------------------------------

SourceTreeLocation=$ROSE_TOP/sourcetree
buildstatus=0
(
  set -e
  # Print a trace of simple Shell commands  
  set -x
 
#------------------------------------------------------
# check out a fresh copy for testing
# Two methods: checkout and export (default)
  if [ "x$SVNOP" = "x" ]; then SVNOP=export; fi

# $SVN ${SVNOP} -r${svnversion} -q ${ROSE_SVNROOT} sourcetree
# $timer $SVN ${SVNOP} -r${svnversion} -q ${ROSE_SVNROOT} sourcetree

# DQ (9/18/2009): This is added as a performance optimization to the
# generation of many EDG binaries for different versions of compilers.
# adjust the local copy of ROSE to share a common directory: 
# We assume the common dir (SVN_READONLY_REPOSITORY_LOCATION) already exists and 
# ./build has been run before.
# This saves time compared to a fresh checkout

 # additional svn options, quiet mode by default
 SVN_OPTIONS="-q"
  if [ "x$SVNOP" = "xupdate" ]; then
      $SVN info $SVN_READONLY_REPOSITORY_LOCATION
    # Check the return status of the svn info command.
      if [ $? == 0 ]; then
          SourceTreeLocation=$SVN_READONLY_REPOSITORY_LOCATION
        # Liao, 9/25/2009
        # for the update operation, we use force to overwrite previous local copies of binaries
        SVN_OPTIONS=$SVN_OPTIONS" --force"  
        # I think we need to run update and build separately before running tests
        # cd $SVN_READONLY_REPOSITORY_LOCATION; $timer $SVN ${SVNOP} -r${svnversion} -q
        # cd $SourceTreeLocation
        # $timer ./build
        # cd ..

        # Liao, 9/25/2009. I want to do the update here also,there is no conflict for me
        if [ 0$ENABLE_SVN_UPDATE -ne 0 ]; then
          $timer $SVN ${SVNOP} -r${svnversion} ${SVN_OPTIONS} ${ROSE_SVNROOT} $SourceTreeLocation
        fi  
      else
        # Error
          echo "Error update specified without a valid SVN repository: $SVN_READONLY_REPOSITORY_LOCATION"
          exit 1
      fi
  else # check out or export operations
      if [ "x$SVNOP" = "xcheckout" ]; then
          $timer $SVN ${SVNOP} -r${svnversion} -q ${ROSE_SVNROOT} $SourceTreeLocation
      else
        # default is export
         $timer $SVN ${SVNOP} -r${svnversion} -q ${ROSE_SVNROOT} $SourceTreeLocation
# Liao, 9/28/2009. Weekly file release uses export, we have to allow this.
#          echo "Default is export, but make that an error for now! (SVNOP should be defined: SVNOP = $SVNOP)"
#          exit 1
      fi
  fi    

 

#------------------------------------------------------
# rebuild the Makefile in the source tree
# should not run this for external repository or released packages
# JJW (10/5/2008) note: on OS X, we need this for Java to work with the
# external repository
if [ 0$SKIP_BUILD_SOURCE -ne 0 ]; then
  echo "Skipping ./build in the source tree..."
else  
  echo "Build configuration and Makefile.in in the source tree...."
  cd $SourceTreeLocation
  $timer ./build
  cd ..
fi
#------------------------------------------------------
# prepare a fresh build tree
  echo "Making a temporary build directory:... "
  mkdir build

# Prevent writing to the install tree
  mkdir install
  # Save ROSE's installation path
  cd install
  ROSE_INS=`pwd`
  cd ..
if [ 0$NORMAL_INSTALL_DIR -ne 0 ] ; then
  echo "Normal file permission for the installation directory"
else  
  chmod 000 install
fi  

#------------------------------------------------------
# configure,make, and test ROSE
  cd build
  $timer $SourceTreeLocation/configure "${CONFIGURE_FLAGS[@]}" || exit 1
  echo "############ configure done"

  # For testing -- skip the rest if we are testing the head of the SciDAC repository of ROSE
  if [ 0$BUILD_AND_UPDATE_EDG_BINARY_ONLY -ne 0 ] ; then
    $SKIP_DIST_TEST=1 # we also want to skip distcheck in this case, Liao 9/17/2009
  # This is as short a compile as possible (roughly) to build the EDG binary.
    echo "This is a short compile (just enough to build the EDG binary)"
    $timer make -C src/util $MAKEFLAGS || exit 1
    $timer make -C src/ROSETTA $MAKEFLAGS || exit 1

  # $timer make -C src/frontend $MAKEFLAGS || exit 1
    $timer make -C src/frontend/CxxFrontend $MAKEFLAGS || exit 1
  # $timer make -C src/frontend/CxxFrontend/EDG_3.3 $MAKEFLAGS || exit 1
  # $timer make -C src/frontend/CxxFrontend/EDG_SAGE_Connection $MAKEFLAGS || exit 1

    echo "exit status = $?"
    echo "############ make done"
    echo "Skipping make check, docs, install, and installcheck.."

#    if [ 0$ENABLE_BUILD_BINARY_EDG -ne 0 ]; then
#      cd ${ROSE_TOP}/build
#    # DQ (9/17/2009): These are now called via dependences in the Makefile when we call the makefile rule: source_with_binary_edg_dist
#      make $MAKEFLAGS copy_binary_edg_tarball_to_source_tree_svn DOT_SVNREV=-${svnversion} || exit 1
#      echo "After copy_binary_edg_tarball_to_source_tree_svn: exit status = $?"
#      echo "############ make copy_binary_edg_tarball_to_source_tree_svn using svnversion = ${svnversion} done"
#    fi
  else
  # Normal build of ROSE

  # This conditional allows faster testing of the generation of the EDG binary
    if [ true ]; then
      $timer make $MAKEFLAGS || exit 1
      echo "############ make done"
      $timer make $MAKEFLAGS check || exit 1
      echo "############ make check done"
      $timer make $MAKEFLAGS docs || exit 1
      echo "############ make docs done"
      rmdir ../install || exit 1
      $timer make $MAKEFLAGS install || exit 1
      echo "############ make install done"
      $timer make $MAKEFLAGS installcheck || exit 1
      echo "############ make installcheck done"
    else
      $timer make -C src/util $MAKEFLAGS || exit 1
      $timer make -C src/ROSETTA $MAKEFLAGS || exit 1
      $timer make -C src/frontend $MAKEFLAGS || exit 1
    fi

  # test the installed ROSE on external benchmarks, such as SPEC CPU 2006 etc.
    if  [ 0$ENABLE_EXTERNAL_TEST -ne 0 ] ; then
      echo "----------- start testing using external benchmarks ------------"

      if [ "x$SPEC_CPU2006_INS" = "x" ]; then
        echo "ERROR: SPEC CPU2006's install path is not given!"
        exit 1
      fi

      if [ "x$SPEC_CPU2006_CONFIG" = "x" ]; then
        echo "ERROR: SPEC CPU2006's config file name is not given!"
        exit 1
      fi

      $SourceTreeLocation/scripts/testOnExternalBenchmarks.sh ${ROSE_INS} $SPEC_CPU2006_INS $SPEC_CPU2006_CONFIG ||exit 1
    fi

  # DQ (9/28/2009): Added support for ROSE to be tested by compiling the ROSE source code.
  # Test the installed version of ROSE on the compilation of the ROSE source code.
  # This works, but it greatly effected by new code added to ROSE (since most 
  # developers don't run this test).  This is mostly interesting and not a critical 
  # test currently.
    if  [ 0$ENABLE_ROSE_COMPILE_ROSE_TEST -ne 0 ] ; then
      echo "----------- start testing of ROSE compiling ROSE ------------"

    # Finish customization of this test later (I might not need either of these variables)
      if [ "x$ROSE_INS" = "x" ]; then
        echo "ERROR: ROSE's install path is not given!"
        exit 1
      fi

      if [ "x$ROSE_CONFIG" = "x" ]; then
        echo "ERROR: ROSE's xxx file name is not given!"
        exit 1
      fi

    # Finish customization of this test later (I might not need either of these variables)
      $SourceTreeLocation/scripts/testOfRoseCompilingRose.sh ${ROSE_INS} $ROSE_INS $ROSE_CONFIG ||exit 1
    fi
  fi

  echo "Before testing for SKIP_DIST_TEST: exit status = $?"

  # skip the rest if we are testing the head of the SciDAC repository of ROSE
  if [ 0$SKIP_DIST_TEST -ne 0 ] ; then
    echo "Skipping make dist, distcheck, source_with_binary_edg_dist... (but running source_with_binary_edg_dist rule)" 

    if [ 0$ENABLE_BUILD_BINARY_EDG -ne 0 ]; then
      cd ${ROSE_TOP}/build
    # See comment below (in false case).
      make $MAKEFLAGS copy_binary_edg_tarball_to_source_tree_svn DOT_SVNREV=-${svnversion} || exit 1
      echo "After copy_binary_edg_tarball_to_source_tree_svn: exit status = $?"
      echo "############ make copy_binary_edg_tarball_to_source_tree_svn using svnversion = ${svnversion} done"

      if [ 0$BUILD_AND_UPDATE_EDG_BINARY_ONLY -eq 0 ] ; then
      # This appears to be a problem (since make dist is called) but we have not build all of ROSE 
      # See comment below (in false case).
        make $MAKEFLAGS source_with_binary_edg_dist DOT_SVNREV=-${svnversion} || exit 1
        echo "############ make source_with_binary_edg_dist done"
      fi
    fi
  else
    echo "Running make dist, distcheck, source_with_binary_edg_dist... (but running source_with_binary_edg_dist rule at the end)" 
    $timer make $MAKEFLAGS dist || exit 1
    echo "############ make dist done"
    $timer make $MAKEFLAGS distcheck || exit 1
    echo "############ make distcheck done"
    # Build a binary version of EDG and put it into the source tree
    # SYSTEM_NAME=`$SourceTreeLocation/config/config.guess | xargs $SourceTreeLocation/config/cleanConfigGuessOutput`
    # echo "SYSTEM_NAME = \"$SYSTEM_NAME\"" >&2
    if [ 0$ENABLE_BUILD_BINARY_EDG -ne 0 ]; then
      cd ${ROSE_TOP}/build

    # DQ (9/15/2009): These are now called via dependences in the Makefile when we call the makefile rule: source_with_binary_edg_dist
    # make binary_edg_tarball || exit 1
    # $SourceTreeLocation/scripts/copy_binary_edg_tarball_to_source_tree_svn ${ROSE_SVNROOT} "${SYSTEM_NAME}" || exit 1
    # $SourceTreeLocation/scripts/copy_binary_edg_tarball_to_source_tree $SourceTreeLocation "${SYSTEM_NAME}" || exit 1
    # make $MAKEFLAGS source_with_binary_edg_dist DOT_SVNREV=-${svnversion} || exit 1
    # $timer make $MAKEFLAGS source_with_binary_edg_dist DOT_SVNREV=-${svnversion} || exit 1

    # DQ (9/19/2009): The fix in <rose>/Makefile.am to have copy_binary_edg_tarball_to_source_tree be 
    # a dependency of source_with_binary_edg_dist instead of copy_binary_edg_tarball_to_source_tree_svn 
    # means that we have to call it explicitly.
      make $MAKEFLAGS copy_binary_edg_tarball_to_source_tree_svn DOT_SVNREV=-${svnversion} || exit 1
      echo "After copy_binary_edg_tarball_to_source_tree_svn: exit status = $?"

    # Now call the rule to build a proper distribution.
      make $MAKEFLAGS source_with_binary_edg_dist DOT_SVNREV=-${svnversion} || exit 1
      echo "############ make source_with_binary_edg_dist done"
    fi
  fi
  echo "End of tests: exit status = $?"
) >buildlog 2>&1 || buildstatus=1

#------------------------------------------------------
# Post-test Section
#------------------------------------------------------
#------------------------------------------------------
# if successful
#------------------------------------------------------
mailtext=${ROSE_TOP}/mailtext  # using absolute path to work with changing current dir.
if [ $buildstatus == 0 ]; then  
  if [ -n "$TIMESTAMP" ]; then
    if [ 0$SHOW_STUB_ON_EMAIL_SUBJECT -ne 0 ] ; then
      echo "Subject: $user_config_file $TIMESTAMP on `hostname` 2. end (pass)" > $mailtext
    else  
      echo "Subject: ROSE test $TIMESTAMP on `hostname` 2. end (pass)" > $mailtext
    fi  
  else
    echo "Subject: ROSE test $$ on `hostname` results (pass)" > $mailtext
  fi
  echo "From: ROSE regression tester on `hostname | cut -f 1 -d .` <`whoami`@llnl.gov>" >> $mailtext
  echo "Reply-to: $myname <`whoami`@llnl.gov>" >> $mailtext
  echo "" >> $mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> $mailtext
  echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> $mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> $mailtext
  echo "Make flags = ${MAKEFLAGS}" >> $mailtext
  echo "Host name = `hostname`" >> $mailtext
  echo "System info = `uname -a`" >> $mailtext
  echo "" >> $mailtext
  echo "> Environment:" >> $mailtext
  printenv >> $mailtext
  echo "" >> $mailtext

 #----------- test using plumhall---------- 
  if [ 0$ENABLE_RRQM_PLUMHALL -ne 0 ] ; then
    echo "Running QMtest on Plumhall..." >> $mailtext
    cd ${ROSE_TEST_REGRESSION_ROOT}
    make -f ${ROSE_TEST_REGRESSION_ROOT}/nightly.makefile plumhall_using_rose

    if [[ 0$ENABLE_RRQM_PUBLISH -ne 0 && -n "$LBL_RRQM_ROOT" && $? -eq 0 ]] ; then
      echo "Publishing plumhall results..." >> $mailtext
      make -f ${ROSE_TEST_REGRESSION_ROOT}/plumhall.makefile publish
    fi

    if [ $? -ne 0 ]; then
      echo "Error: make plumhall finishes abnormally!" >>$mailtext
      KEEP_TEST_DIR=1
    else
      echo "make plumhall finishes normally.">>$mailtext
    fi
  fi

 #----------- test using mozilla---------- 
  if [ 0$ENABLE_RRQM_MOZILLA -ne 0 ] ; then
    echo "Running QMtest on Mozilla..." >> $mailtext
    cd ${ROSE_TEST_REGRESSION_ROOT}
    make -f ${ROSE_TEST_REGRESSION_ROOT}/nightly.makefile mozilla_using_rose

    if [[ 0$ENABLE_RRQM_PUBLISH -ne 0 && -n "$LBL_RRQM_ROOT"  && $? -eq 0 ]] ; then
      echo "Publishing mozilla results..." >> $mailtext
      make -f ${ROSE_TEST_REGRESSION_ROOT}/mozilla.makefile publish
    fi

    if [ $? -ne 0 ]; then
      echo "Error: make mozilla finishes abnormally!" >>$mailtext
      KEEP_TEST_DIR=1
    else
      echo "make mozilla finishes normally.">>$mailtext
    fi
  fi

 #----------- update the external repository---------- 
 # upload ROSE sources-with-EDG-binary to the SciDAC Outreach repository 
# relies on the previous results of  make source_with_binary_edg_dist DOT_SVNREV=-${svnversion}
  if [ 0$ENABLE_UPLOAD_SVN -ne 0 ] ; then
 # bypass set -e by using own flag, so the child script can return to its parent    
     failed=no 
     $SourceTreeLocation/scripts/importRoseDistributionToSVN ${ROSE_TOP} >>${ROSE_TOP}/buildlog || failed=yes
    if [ $failed = yes ]; then
      echo "Error: importRoseDistributionToSVN finishes abnormally!" >>$mailtext
      tail buildlog >>$mailtext
      KEEP_TEST_DIR=1
    else
      echo "importRoseDistributionToSVN finishes normally.">>$mailtext
    fi
  fi

 #----------- update the external website---------- 
  # documentations to www.roseCompiler.org
  if [ 0$ENABLE_UPLOAD_WEB -ne 0 ] ; then
    # update the web site
    cd ${ROSE_TOP}/build/docs/Rose
    make copyWebPages
    if [ $? -ne 0 ]; then
      echo "Error: make copyWebPages finishes abnormally!" >>$mailtext
      KEEP_TEST_DIR=1
    else
      echo "make copyWebPages finishes normally.">>$mailtext
    fi
  fi
else
#------------------------------------------------------
# if failed
#------------------------------------------------------
  if [ -n "$TIMESTAMP" ]; then
   if [ 0$SHOW_STUB_ON_EMAIL_SUBJECT -ne 0 ] ; then
    echo "Subject: $user_config_file $TIMESTAMP on `hostname` 2. end (fail)" > $mailtext
   else 
    echo "Subject: ROSE test $TIMESTAMP on `hostname` 2. end (fail)" > $mailtext
   fi
  else
    echo "Subject: ROSE test $$ on `hostname` results (fail)" > $mailtext
  fi  
  echo "From: ROSE regression tester on `hostname | cut -f 1 -d .` <`whoami`@llnl.gov>" >> $mailtext
  echo "Reply-to: $myname <`whoami`@llnl.gov>" >> $mailtext
  echo "" >> $mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> $mailtext
  echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> $mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> $mailtext
  echo "Make flags = ${MAKEFLAGS}" >> $mailtext
  echo "Hostname = `hostname`" >> $mailtext
  echo "System info = `uname -a`" >> $mailtext
  echo "" >> $mailtext
  echo "> Environment:" >> $mailtext
  printenv >> $mailtext
  echo "" >> $mailtext
  echo ">>> -------------------- Error summary --------------------" >> $mailtext
  tail -500 buildlog >> $mailtext
  echo "" >> $mailtext
fi
# echo "-------------------- Full log      --------------------" >> $mailtext
# cat buildlog >> $mailtext (too big)
/usr/sbin/sendmail -i $MAILADDRS < $mailtext
if [ 0$KEEP_TEST_DIR -ne 0 ] ; then
# : # echo "Test directory is preserved."
  echo "Test directory is preserved."
else
  echo "Test directory has been removed."
  if [ $buildstatus == 0 ]; then rm -rf "${ROSE_TOP}"; fi # Only delete if the test passed
fi 
