#!/bin/bash
# This script does a fresh checkout of ROSE, conducts series tests, and builds source 
# and binary release.
# Please provide your customized configurations in a .sh file before using this script:
#
# example .sh file: rose/scripts/roseFreshTestStub-Jeremiah-asmAsEnum.sh, which sets 
#
# 1. Environment variables,
# 2. The path to the source and build directories of ROSE
# 3. The configuration options for building ROSE
# 4. Email notification recipients, etc.  
# 5. SVNOP=checkout or default export mode
# 6. SVNVERSIONOPTION=yourVersionNumber or default head revision

# Usage ------------------
# manual run it:
#      ./thisScript yourConfiguration.sh 
#
# automatically run it as a daily cron job running at 2:30AM
#   $ crontab -e
#   30 2 * * * /home/liao6/rose/scripts/thisscript /path/to/yourconfig.sh
#
# Liao, Jeremiah, 2/7/2008
# Last modified 7/30/2008
#------------------------------------------------------

user_config_file="$1"
shift
. $user_config_file

set -e
rm -rf ${ROSE_TOP}
mkdir -p ${ROSE_TOP}
cd ${ROSE_TOP}
# This is required so that the DESTDIR part of "make distcheck" doesn't fail by
# running out of space on /tmp on tux270
mkdir tmp
TMPDIR=${ROSE_TOP}/tmp/
export TMPDIR

set -e

# SVNVERSIONOPTION is one of the -r options in "svn help checkout"
if [ "x$SVNVERSIONOPTION" = "x" ]; then SVNVERSIONOPTION="HEAD"; fi
svnversion=`${SVN} info -r${SVNVERSIONOPTION} ${ROSE_SVNROOT} | grep '^Revision: ' | cut -f 2 -d \ `
svnmodificationdate=`${SVN} info -r${SVNVERSIONOPTION} ${ROSE_SVNROOT} | grep '^Last Changed Date: ' | cut -f 4- -d \ `

(
echo "Subject: Starting ROSE test $$ on `hostname`" > mailtext1
echo "" >> mailtext1
echo ">>> See build log in ${ROSE_TOP}/buildlog on `hostname` for status" >> mailtext1
echo "SVN root = ${ROSE_SVNROOT}" >> mailtext1
echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> mailtext1
echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext1
echo "Make flags = ${MAKEFLAGS}" >> mailtext1
echo "Hostname = `hostname`" >> mailtext1
echo "" >> mailtext1
echo "> Command versions" >> mailtext1
(automake --version | head -1 || echo "automake not found") >> mailtext1
(autoconf --version | head -1 || echo "autoconf not found") >> mailtext1
(make --version | head -1 || echo "make not found") >> mailtext1
(g++ --version | head -1 || echo "g++ not found") >> mailtext1
(gcc --version | head -1 || echo "gcc not found") >> mailtext1
(bison --version | head -1 || echo "bison not found") >> mailtext1
echo -n "doxygen " >> mailtext1
(doxygen --version || echo "not found") >> mailtext1
dot -V >> mailtext1 2>&1 || echo "dot not found" >> mailtext1
(libtool --version | sed '2,$d' || echo "libtool not found") >> mailtext1 # head -1 crashes
(latex --version | head -1 || echo "latex not found") >> mailtext1
(latex2html -v | grep -w LaTeX2HTML || echo "latex2html not found") >> mailtext1
(swig -version | grep -w SWIG || echo "swig not found") >> mailtext1
(grep '#define *BOOST_LIB_VERSION' ${BOOST_ROOTX}/include/*/boost/version.hpp | cut -f 3 -d ' ' | tr -d '"' | tr _ . | sed 's/^/Boost version: /' || echo "Boost not found") >> mailtext1
echo "" >> mailtext1
echo "> Environment:" >> mailtext1
printenv >> mailtext1
)

/usr/sbin/sendmail -i $MAILADDRS < mailtext1

buildstatus=0
(
  set -e
  set -x

#------------------------------------------------------
# check out a fresh copy for testing
  if [ "x$SVNOP" = "x" ]; then SVNOP=export; fi
  $SVN ${SVNOP} -r${svnversion} -q ${ROSE_SVNROOT} sourcetree

#------------------------------------------------------
# rebuild the Makefile in the source tree
  echo "Build configuration and Makefile.in in the source tree...."
  cd sourcetree
  ./build
  cd ..

#------------------------------------------------------
# prepare a fresh build tree
  echo "Making a temporary build directory:... "
  mkdir build

# Prevent writing to the install tree
  mkdir install
  chmod 000 install

#------------------------------------------------------
# configure ROSE
  cd build
# ROSE_CONFIG_FLAGS="--without-binary_analysis --enable-rosehpct --with-openFortranParser=/home/liao6/download/fortran-parser --with-Java=/usr/apps/java/jdk1.5.0_11 --with-JavaJVM=/usr/apps/java/jdk1.5.0_11/jre/lib/i386/server"
  ../sourcetree/configure "${CONFIGURE_FLAGS[@]}" && \
  echo "############ configure done" && \
  make $MAKEFLAGS && \
  echo "############ make ((for source distribution; building libraries for binary distribution) done" && \
  make $MAKEFLAGS check && \
  echo "############ make check (for source distribution) done" && \
  make $MAKEFLAGS docs && \
  echo "############ make docs ((for source distribution) done" && \
  rmdir ../install && \
  make $MAKEFLAGS install && \
  echo "############ make install (for source distribution) done" && \
  make $MAKEFLAGS installcheck && \
  echo "############ make installcheck (for source distribution) done" && \
  make $MAKEFLAGS dist DOT_SVNREV=-source-${svnversion} && \
  echo "############ make dist (for source distribution) done" && \
  make $MAKEFLAGS distcheck DOT_SVNREV=-source-${svnversion} && \
  echo "############ make distcheck (for source distribution) done" && \
  ../sourcetree/configure "${BINARY_CONFIGURE_FLAGS[@]}" && \
  echo "############ reconfigured for binary distribution done" && \
  make $MAKEFLAGS dist DOT_SVNREV=-source-with-EDG-binary-${svnversion} && \
  echo "############ make dist (for binary distribution) done" && \
  make $MAKEFLAGS distcheck DOT_SVNREV=-source-with-EDG-binary-${svnversion} && \
  echo "############ make distcheck (for binary distribution) done"
) >buildlog 2>&1 || buildstatus=1

if [ $buildstatus == 0 ]; then
  echo "Subject: ROSE test $$ on `hostname` results (pass)" > mailtext
  echo "" >> mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> mailtext
  echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext
  echo "Make flags = ${MAKEFLAGS}" >> mailtext
  echo "Hostname = `hostname`" >> mailtext
  echo "" >> mailtext
  echo "> Environment:" >> mailtext
  printenv >> mailtext
  echo "" >> mailtext

 # Upload the distribution package into the head of the external repos.
 #Liao, 7/31/2008
  if [ $ENABLE_UPLOAD ]; then
    ${ROSE_TOP}/sourcetree/scripts/importRoseDistributionToSVN ${ROSE_TOP}
    if [ $? -ne 0 ]; then
      echo "Error: importRoseDistributionToSVN finishes abnormally!" >>mailtext
      exit 3
    else
     echo "importRoseDistributionToSVN finishes normally.">>mailtext
    fi
  fi  

else
  echo "Subject: ROSE test $$ on `hostname` results (fail)" > mailtext
  echo "" >> mailtext
  echo "SVN root = ${ROSE_SVNROOT}" >> mailtext
  echo "SVN repository version ${svnversion} as of ${svnmodificationdate}" >> mailtext
  echo "Configure flags = ${CONFIGURE_FLAGS[@]}" >> mailtext
  echo "Make flags = ${MAKEFLAGS}" >> mailtext
  echo "Hostname = `hostname`" >> mailtext
  echo "" >> mailtext
  echo "> Environment:" >> mailtext
  printenv >> mailtext
  echo "" >> mailtext
  echo ">>> -------------------- Error summary --------------------" >> mailtext
  tail -100 buildlog >> mailtext
  echo "" >> mailtext
fi
# echo "-------------------- Full log      --------------------" >> mailtext
# cat buildlog >> mailtext (too big)
/usr/sbin/sendmail -i $MAILADDRS < mailtext
# DQ (7/24/2008): Never delete this since then we can't save the source and binary distributions
# (or copy them out to a special location when they pass...).
# if [ $buildstatus == 0 ]; then rm -rf "${ROSE_TOP}"; fi # Only delete if the test passed
