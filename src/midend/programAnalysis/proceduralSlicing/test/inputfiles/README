
Requirements for the inputfiles to the testing:
-----------------------------------------------

- the main function must always return 0 (from normal execution..), otherwise running the compiled code fails using the system call.

- the input file name must end with .c or .C. This is so we can make more copies of a sgproject with the frontend call. If file name ends with cpp this way of copying is not allowed.

- in for loops the iterator variable must be declared outside the for loop. This is because when the whole for loop is considered a statement and we add an output statement, the iterator variable will be outputted as well, and thus need to be declared not only in the for loop:
Example:
#pragma start
for (int j = (1); j <= y; j++) {
    x--;
}
printf("%d %d %d %d %d ",j,j,y,j,x);
#pragma end

This will not compile, since j is not defined outside the forloop.

The following code will work:
int j;
#pragma start
for (j = 1; j <= y; j++) {
   x--;
}
printf("%d %d %d %d %d ",j,j,y,j,x);
#pragma end

- We add only the output statement (printf-statement). For the new code to compile, we need to 
have this prototype definition before main:
int printf(const char *, ...);
This is not done automatically.

- Since we output the values of the variables in the slicing criterion to screen and not directly to file, the input program should not have any other output statements which might interfere with the output of the slicing criterion.
We are not outputting to file since it was not trivial to build a FILE pointer in the AST.

- all variables have to be set. Otherwise when outputting the values we won't be able to compare them.

- not contain pointers, like char *a?


Other comments:

- for doing slicing, we run the slicing application. We are not calling Slicing::completeSlice(sgproject) as this does not seem to work (due to changes to sgproject??)


Interprocedural testing
-----------------------
This testing is not so good for interprocedural testing. This is because this testing will insert a pragma declaration around the first statement in the file. This is not necessarily in the main function. Thus it will not compile and run later...
 
Maybe do a separate testing for interprocedural programs.... that is not automatically insert pragma statements..
.