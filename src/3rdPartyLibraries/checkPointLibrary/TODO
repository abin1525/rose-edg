API

Register functions to be called at ckpt events

    ckpt_before_ckpt(F, ARG)
    ckpt_after_ckpt(F, ARG)
    ckpt_after_restart(F, ARG)

ckpt_setflags()

    CKPT_CONTINUE - continue after taking a checkpoint
    CKPT_ASYNC   - respond to async signal

ckpt_getflags()


ckpt_dockpt(int continue)
ckpt_restart(char *ckptname)





RESTART SCENARIOS

A job control system invokes an unmodified program
the same way each time it tries to run the program,
like the Condor vanilla universe.

The first time the job runs, 

whether there is a checkpoint for it.  Changing the
context of the application depending on when it starts
is not feasible, so I need the application to be able
to figure out for itself whether there is a checkpoint
to restart.

I want a mechanism to take an existing program,

API

A revised API for applications that link with the ckpt
library.




FILE DESCRIPTORS

Ckpt does not checkpoint open file descriptors.

THREADS.

we need to ckpt threaded programs.  we need to learn
how to do this.


CHECKPOINT MODIFICATION.

Can the checkpoint file be an object that can be
operated on before being restarted.  Something like a
binary editor; something like what Bart/Dyninst has in
mind.  Possible functionality includes changing the
values of some variables and replacing some code.

BUGS.




Short of flac, define some basic
functionality:
- open regular files
- callbacks for any file descriptor
  (define the interface that flac would use)




Hungarian User Interface:
- re-reading the environment variables; 
  this seems like the wrong interface for the
  problem.  what values were they trying to change?
  - CKPT_CONTINUE -- whether to continue after current
    ckpt;
  - the name of the checkpoint server, so that the
    next ckpt goes to a different server
  
- API for taking a checkpoint and restarting one;
  ideally, the call for restarting is execve.
  however, if there is a ckpt server you might want
  ckpt_restart("identififer");

- ckpt_init functionality in the library should be
  on demand ... i suspect that they mean calling
  the ckpt server should happen later.

Documentation
- discuss static vs dynamically linked executable
functionality

-FIXMEs in signals.c
-limits (?)
-compile with PIC?
-linux realtime signals (they appear to be set by telnet).
-improve STACKHACK
-explain why we have restart.script
 (it lets us load the code a bit lower than
 usual to ensure that the brk does not break.)
 also, clean it up so it is portable and manageable.
-standard failure and cleanup



DISCUSSION

- the ckpt file has minimal state for getting the
  restarted program back up:
  memory, tls state.
