ckpt - process checkpoint library
www.cs.wisc.edu/~zandy/ckpt
Copyright (c) 2002-2004 Victor C. Zandy  zandy@cs.wisc.edu

COPYING contains the distribution terms for ckpt (LGPL).

CONTENTS

 1     RELEASE NOTES
 2     INSTALLATION
 3     QUICK EXAMPLE
 4     OVERVIEW
 5     DOES CKPT CHECKPOINT EVERYTHING?
 6     USING CKPT
   6.1     LINKING
   6.2     TRIGGERING CHECKPOINTS
   6.3     RESTARTING CHECKPOINTS
 7     CKPT CONFIGURATION
   7.1     CONFIGURATION OPTIONS
   7.2     COMMAND LINE OPTIONS
   7.3     ENVIRONMENT VARIABLES
 8     CKPT API
 9     CONTACT


1 RELEASE NOTES

We support ckpt on x86's running Linux 2.4 and 2.6.

This is a preview of ckpt 2.  There are user interface and
API changes.

* Checkpoint files are now executables that restart
  themselves.  The restart command and librestart.so
  library are obsolete.

* A new command, named ckpt, executes ordinary programs
  with checkpointing enabled.

* The library libckpt.so is now needed only to build
  executables pre-linked with ckpt.  It does not need
  to be installed to use the ckpt command.
  It can still be linked at run time with LD_PRELOAD.

Some other features are being developed for the final release
of ckpt 2:

* Hijack.  A command to add checkpoint capability to programs
  already in execution.

* Save open files.  An API for saving file descriptor state and
  built-in functionality for saving open files.

* Automatic periodic checkpointing.

We welcome comments on the new functionality.


2 INSTALLATION

ckpt requires python version 2.2 or higher to build.

Edit the user options in Makefile to set the compiler, compiler
flags, and installation directories.  Then run 'make'.

The Makefile produces three files for users:

  ckpt           ckpt command 
  libckpt.so     ckpt library for building ckpt-aware applications
  ckpt.h         ckpt API C header for ckpt-aware applications


The ckpt command is a standalone program for checkpointing existing
executables.  It does not depend on libckpt.so or ckpt.h.

The libckpt.so library is for users who want to build executables
linked with ckpt.  The ckpt.h C header file is for writing programs
(linked with libckpt.so) that call ckpt services.

'make install' installs these three files under the user's home
directory.  Edit the Makefile for a different destination.


3 QUICK EXAMPLE

For users who want to use ckpt to checkpoint ordinary executables,
here is all you really need to know.

We demonstrate ckpt on a program named foo that prints integers
starting from 1.

% ckpt foo                         # run foo with checkpointing
1
2
3
4
5
^Z                                 # send checkpoint signal;
                                   # ckpt saves checkpoint to foo.ckpt
                                   # and exits the program.

% foo.ckpt                         # restart checkpoint
6
7
8


4 OVERVIEW

ckpt provides user-level process checkpointing functionality to an
ordinary program.  It inserts code into the program that enables the
program to checkpoint itself.  Ckpt supports asynchronous checkpoints
triggered by signals sent by other programs.  Ckpt-aware programs can
also use the ckpt API to synchronously checkpoint themselves.

Ckpt writes its checkpoint of a program to a checkpoint file.  A
checkpoint file is an ordinary executable (in ELF format) that,
when executed, continues the program from the point at which it was
checkpointed.  Checkpoints can be restarted on a different machine
from the one on which the checkpoint was taken, however the machine
must have the same processor architecture and operating system.


5 DOES CKPT CHECKPOINT EVERYTHING?

No.  The state of a program in execution has many aspects.  Ckpt saves
and restores only some of them.

Ckpt saves and restores:

* The entire address space of the process: its text, data,
  stack, and heap, including shared library text and data;
* The signal state of the process;
* The environment of the process; (the environment of the process
  where it is restarted is ignored);

Ckpt does not save and restore:

- File descriptors of open files, special devices,
  pipes, and sockets;
- Interprocess communication state (such as shared memory, semaphores,
  mutex, messages);
- Kernel-level thread state;
- Process identifiers, including process id, process group;
  id, user id, or group id.

The ckpt API provides hooks for calling third-party code at stages of
a program checkpoint and restart.  Users can add their own code to
these hooks to augment the checkpointing functionality with, for
example, code to save open file descriptors.


6 USING CKPT

Using ckpt involves linking the ckpt run time code with a program,
triggering checkpoints, and restarting checkpoints.


6.1 LINKING

There are three ways to link ckpt with a program.

The simplest way to link ckpt is to use the ckpt command to start
the program.

    % ckpt PROGRAM ARGS ...

ckpt exec's the program, preloads the ckpt library into the process
address space, and then allows the program to run.

The second way is to set the LD_PRELOAD environment variable to the
location of libckpt.so, and run the program in that environment.

    % setenv LD_PRELOAD /home/user/lib/libckpt.so
    % PROGRAM ARGS ... 

The third way to to link the program executable with libckpt.so.

For example, if the program foo is linked with this line:
     cc -o foo foo.o -lm
 
Then edit the link line to include libckpt.so:
     cc -o foo foo.o -lm -L/home/user/lib -lckpt

Note that the -L option directs the linker to include the
specified directory in its search for the library.

Note also that the -L option does not affect the set of
directories searched when the program is started.  You must also
modify the LD_LIBRARY_PATH environment variable to include the
directory containing libckpt.so.


6.2 TRIGGERING CHECKPOINTS

By default, a process linked with ckpt can be asynchronously
checkpointed by sending the SIGTSTP signal to it.  The signal
can be changed by modifying the configuration parameters described
below.

User code can call routines in ckpt.h to synchronously checkpoint
itself.


6.3 RESTARTING CHECKPOINTS

Checkpoint files are executables.  To restart a checkpoint, execute
the checkpoint file like an ordinary executable.  The environment
in which the checkpoint file is executed is discarded.  The
environment of the original program is restored.


7 CKPT CONFIGURATION

Several user-configurable parameters control the behavior of ckpt.
We describe these parameters and how to set these parameters with
ckpt command line options and with environment variables.  Section
8 describes CKPT API calls that allow programs to set these
parameters.

7.1  CONFIGURATION OPTIONS

* CKPT_NAME specifies the name of the file in which ckpt saves
checkpoints.  By default, CKPT_NAME is the name of the program that
is being checkpointed, followed by the string ".ckpt".


* CKPT_CONTINUE is a boolean that specifies what happens to a process
following a checkpoint.  If TRUE the process continues normally.
If FALSE the process exits by calling _exit().

The default value of CKPT_NAME is FALSE.


* CKPT_ASYNCSIG is an integer that identifies the signal that triggers
an asynchronous checkpoint.  If 0 asynchronous checkpoints are
disabled.  Otherwise CKPT_ASYNCSIG is integer corresponding to a
defined signal.

Asynchronous checkpoints are enabled by default: the default value of
CKPT_ASYNCSIG is the integer corresponding to the SIGTSTP signal.


7.2 COMMAND LINE OPTIONS

The ckpt command line arguments are

  -n NAME        set CKPT_NAME to NAME
  -c             set CKPT_CONTINUE to TRUE
  -a SIGNAL      set CKPT_ASYNCSIG to SIGNAL, which may be an integer
                 or SIGname string

7.3 ENVIRONMENT VARIABLES

Ckpt recognizes environment variables with the names of parameters.
For example,

    setenv CKPT_ASYNCSIG SIGUSR1

The environment variables are read once and only once: the first time
the checkpoint library is loaded.  Programs that wish to influence the
checkpoint parameters are run time must call the ckpt API.

How the environment is interpreted depends on how ckpt is loaded into a program:

  execution time: ckpt consults the environment of the invoking
                  ckpt command.

  link time:      ckpt consults the environment of the program when
                  it is executed.
  

8 CKPT API

Programs linked with the checkpoint library can call the
functions defined in ckpt.h.

void ckpt_on_preckpt(void (*f)(void *), void *arg);

    Register F to be called when a checkpoint is triggered.
    Registered functions are called before the checkpoint begins
    in the order they were registered.  F is passed the ARG
    argument.

void ckpt_on_postckpt(void (*f)(void *), void *arg);

    Register F to be called when a checkpoint is taken and
    CKPT_CONTINUE is set.  Registered functions are called
    after the checkpoint completes in the order they were
    registered.  F is passed the ARG argument.

void ckpt_on_restart(void (*f)(void *), void *arg);

    Register F to be called when a process is restarted from a
    checkpoint.  Registered functions are called after the
    checkpoint has been completely restored, just before control
    returns to the program, in the reverse of the order they were
    registered.  F is passed the ARG argument.

Beware that functions registered with these interfaces might be called
in the context of a signal handler.

void ckpt_config(struct ckptconfig *cfg, struct ckptconfig *old)

    The struct ckptconfig represents the ckpt parameters.  It includes
    the following fields.  The use of other fields is undefined.

    struct ckptconfig {
           char name[CKPT_MAXNAME];    /* CKPT_NAME */
	   unsigned int asyncsig;      /* CKPT_ASYNCSIG */
	   unsigned int continue;      /* CKPT_CONTINUE */
    };

    If OLD is non-NULL it is filled with a copy of the current
    checkpoint parameters. 
    
    If CFG is non-NULL the configuration is updated (after possibly
    copying the current configuration to OLD) to the parameters in CFG.  
    Ckpt makes a copy of ckpt_name, freeing the caller to reuse or
    free the memory for ckpt_name.

void ckpt_ckpt(char *name)

    Take a checkpoint.  If NAME is non-null, CKPT_NAME is set to
    NAME for the execution of the call, otherwise the current value
    of CKPT_NAME is used.


9 CONTACT

Victor Zandy wrote and maintains ckpt.  Please report bugs to
zandy@cs.wisc.edu.  Feedback and experience reports are welcome.
The ckpt webpage is http://www.cs.wisc.edu/~zandy/ckpt.


