// -*- c++ -*-

/** @page identity_translator Identity Translator
 * 
 * @section sec_overview Overview
 *  This tool is the simplest tool built using ROSE. It takes input source files , builds AST, and then unparses the AST back to compilable source code. It tries its best to preserve everything from the input file. Any other ROSE-based tools can be built using this tool's skeleton by adding customized AST analysis and transformation.
 *
 * @code{.cpp}
 * #include "rose.h"
 * int main(int argc, char *argv[]){
 *   // Build the AST used by ROSE
 *   SgProject *project = frontend(argc, argv);
 * 
 *   // Run internal consistency tests on AST
 *   AstTests::runAllTests(project);
 * 
 *   // Insert your own manipulation of the AST here...
 * 
 *   // Generate source code from AST and call the vendor's compiler
 *   return backend(project);
 * }
 * @endcode
 *
 * @section sec_install Installation
 *  Type make install-core -j4 under $ROSE_build will build and install this tool into $ROSE_INSTALL/bin.
 *
 * @section sec_instructions User Instructions
 * There are too many options to be displayed here. So please refer to --help for details.
 *
 * @li   --help               will display help information for the tool
 *
 * 
 * @section sec_example Example
 * 
 * You can run the tool as follows to produce an output file rose_input.c file below:
 * 
 * @code
 *  identityTranslator -c input.c
 * @endcode
 * 
 * @section sec_limitation Limitations
 * Due to limitations of the frontends used by ROSE and some internal processing, identityTranslator cannot generate 100% identical output compared to the input file.
 * Some notable changes it may introduce include:
 * @li "int a, b, c;" are transformed to three SgVariableDeclaration statements,
 * @li macros are expanded
 * @li extra brackets are added around constants of typedef types (e.g. c=Typedef_Example(12); is translated in the output to c = Typedef_Example((12));)
 * @li NULL is converted to 0
 * 
 *  This page is generated from $ROSE/docs/Rose/Tools/identityTranslator.dox */


