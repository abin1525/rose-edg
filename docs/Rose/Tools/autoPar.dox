// -*- c++ -*-

/** @page auto_par autoPar
 * 
 * @section sec_overview Overview
 *
 * This tool is an implementation of automatic parallelization using OpenMP. It can automatically insert OpenMP 3.0 directives into input serial C/C++ codes. 
 * For input programs with existing OpenMP directives, the tool will double check the correctness when the right option is turned on.
 * @li The source files are currently located in rose/projects/autoParallelization
 * @li Test input files are located at rose/projects/autoParallelization/tests
 * @li There is a section 12.7 Automatic Parallelization in the ROSE pdf manual: http://rosecompiler.org/ROSE_UserManual/ROSE-UserManual.pdf
 *
 * @section sec_install Installation
 *  Type make install-core -j4 under $ROSE_build will build and install the tool, autoPar, into $ROSE_INSTALL/bin.
 *
 * @section sec_instructions User Instructions
 * The tool accepts a set of options:
  
 * @code{.unparsed}
 * autoPar -help
 * 
 * Auto parallelization-specific options
 * -rose:autopar:enable_debug     run automatic parallelization in a debugging mode
 * -rose:autopar:enable_patch     additionally generate patch files for translations
 * -rose:autopar:unique_indirect_index assuming all arrays used as indirect indices have unique elements (no overlapping)
 * -rose:autopar:enable_distance  report the absolute dependence distance of a dependence relation preventing parallelization
 * -annot filename        specify annotation file for semantics of abstractions. This option can be repeated in one command line to load multiple annotation files. 
 * -dumpannot            dump annotation file content
 * @endcode
 *
 * 
 *
 * @section sec_example Examples
 * @subsection sec_simple An Simple One
 * For an example input code:
 * @code{.c}
 * /* Only the inner loop can be parallelized
 *  */
 * void foo()
 * {
 *   int n=100, m=100;
 *   double b[n][m];
 *   int i,j;
 *   for (i=0;i<n;i++)
 *     for (j=0;j<m;j++)
 *       b[i][j]=b[i-1][j-1];
 * }
 * @endcode
 * 
 * You can run the tool as follows:
 * @code{.unparsed}
 * autoPar -rose:autopar:unique_indirect_index -rose:autopar:enable_patch inner_only.c
 *
 * Enabling generating patch files for auto parallelization ...
 * Assuming all arrays used as indirect indices have unique elements (no overlapping) ...
 * 
 * Unparallelizable loop at line:8 due to the following dependencies:
 * 2*2 TRUE_DEP; commonlevel = 2 CarryLevel = (0,0)  Is precise SgPntrArrRefExp:b[i][j]@10:14->SgPntrArrRefExp:b[i - 1][j - 1]@10:21 == -1;* 0;||* 0;== -1;||::
 * 
 * Automatically parallelized a loop at line:9 
 * @endcode
 *  The generated output file rose_inner_only.c should look like:
 * @code{.c}
 * /* Only the inner loop can be parallelized
 *  */
 * #include "omp.h" 
 * 
 * void foo()
 * {
 *   int n = 100;
 *   int m = 100;
 *   double b[n][m];
 *   int i;
 *   int j;
 *   for (i = 0; i <= n - 1; i += 1) {
 *     
 * #pragma omp parallel for private (j) firstprivate (n,m,i)
 *     for (j = 0; j <= m - 1; j += 1) 
 *       b[i][j] = b[i - 1][j - 1];
 *   }
 * }
 * @endcode
 * 
 * @subsection subsec_annot Using Annotations
 * Annotation files provide additional program information which is traditionally hard for compilers to extract, such as aliasing, side effect information.
 * Multiple annotations files can be loaded in one command line
 * Example annotation files are https://github.com/rose-compiler/rose-develop/blob/master/projects/autoParallelization/tests/floatArray.annot and https://github.com/rose-compiler/rose-develop/blob/master/projects/autoParallelization/tests/funcs.annot . 
 * 
 * To use annotation files:
 * @code{.unparsed}
 * autoPar -annot floatArray.annot -annot funcs.annot -c interp1_elem2.C  
 * @endcode
 *
 * @subsection subsec_patch Generating Patches
 * Often users want to see the changed lines only instead of seeing a big output file.
 * 
 * To use the patch generation feature:
 * @code{.unparsed}
 * autoPar -rose:autopar:unique_indirect_index -rose:autopar:enable_patch -c jacobi_seq.c
 * Enabling generating patch files for auto parallelization ...
 * Assuming all arrays used as indirect indices have unique elements (no overlapping) ...
 * 
 * Automatically parallelized a loop at line:83
 * 
 * Unparallelizable loop at line:84 due to the following dependencies:
 * 1*1 OUTPUT_DEP; commonlevel = 1 CarryLevel = (0,0)  Is precise SgPntrArrRefExp:f[i][0]@89:6->SgPntrArrRefExp:f[i][0]@89:6 <= -1;||::
 * 1*1 OUTPUT_DEP; commonlevel = 1 CarryLevel = (0,0)  Is precise SgPntrArrRefExp:f[i][0]@89:6->SgPntrArrRefExp:f[i][0]@89:6 <= -1;||::
 * 
 * Automatically parallelized a loop at line:143
 * 
 * Automatically parallelized a loop at line:144
 * 
 * Automatically parallelized a loop at line:147
 * 
 * Automatically parallelized a loop at line:148
 * 
 * Automatically parallelized a loop at line:185
 * 
 * Automatically parallelized a loop at line:186
 * @endcode
 *
 * The generated patch file should look like:  
 * @code{.unparsed}
 * cat jacobi_seq.c.patch
 * 
 * diff -ar /home/liao6/workspace/autoPar/sourcetree/projects/autoParallelization/tests/jacobi_seq.c rose_jacobi_seq.c
 * 0a1
 * > #include <omp.h>
 * 82a83
 * > #pragma omp parallel for private (xx,yy,i,j) firstprivate (n,m)
 * 142a143
 * > #pragma omp parallel for private (i,j)
 * 143a144
 * > #pragma omp parallel for private (j)
 * 146a147
 * > #pragma omp parallel for private (resid,i,j) reduction (+:error)
 * 147a148
 * > #pragma omp parallel for private (resid,j) reduction (+:error) firstprivate (omega,ax,ay,b)
 * 184a185
 * > #pragma omp parallel for private (xx,yy,temp,i,j) reduction (+:error)
 * 185a186
 * > #pragma omp parallel for private (xx,yy,temp,j) reduction (+:error) firstprivate (dx,dy)
 * @endcode
 *
 * @subsection subsec_diff Checking Correctness
 * AutoPar can examine pre-existing OpenMP directives in an application and verifies that they have correctly accounted for private, reductions and other OMP data-sharing attributes.
 * Sample input file
 * @code{.c}
 * #include <stdio.h>
 * #include <omp.h>
 *  
 * int main(int argc, char *argv[]) {
 *   int N = 20;
 *   int total ;
 *   int i,j;
 *  
 * #pragma omp parallel for
 *   for (j=0;j<N;j++) {
 *     for (i=0;i<N;i++) {
 *       total += i+j ;
 *     }
 *   }
 *   printf("%d\n", total) ;
 *   return 0;
 * }
 * @endcode
 * The code above contains a real OpenMP bug someone struggled with while trying to add OMP annotations to their code, submitted here: http://openmp.org/forum/viewtopic.php?f=3&t=821
 * 
 * Running the autoPar as an OpenMP directive checker produces this result:
 * @code{.c}
 * % autoPar -rose:unparse_tokens -rose:autopar:unique_indirect_index -rose:autopar:enable_diff  -fopenmp -c OMPcheck.cc
 * <<<<<<<<<
 * user defined      : #pragma omp parallel for
 * --------
 * OMPcheck.cc:11
 * compiler generated:#pragma omp parallel for private (i) reduction (+:total)
 * >>>>>>>> 
 * @endcode
 * The output above from autoPar indicates that the OMP pragma is missing an OpenMP 'private' declaration for the variable 'i', and a reduction annotation for the variable 'total'.
 *
 *  This page is generated from $ROSE/docs/Rose/Tools/autoPar.dox */


